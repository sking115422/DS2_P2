readFileIntoArray: C:\Users\spenc\Desktop\UGA_projects\data_science\DS2_P2\scala\scalation\data\auto_mpg_fixed_cleaned.csv
load: read 99 data rows so far ...
load: read 199 data rows so far ...
load: read 299 data rows so far ...
load: read in an 392-by-8 matrix from auto_mpg_fixed_cleaned.csv
ox_fname = Array(intercept, cylinders, displacement, horsepower, weight, acceleration, modelyear)
-----------------------------------------
| NeuralNet_3L for AutoMPG with sigmoid |
-----------------------------------------
 scaled: x = 
MatrixD(1.00000,	1.00000,	0.617571,	0.456522,	0.536150,	0.238095,	0.00000,
 	1.00000,	1.00000,	0.728682,	0.646739,	0.589736,	0.208333,	0.00000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.516870,	0.178571,	0.00000,
 	1.00000,	1.00000,	0.609819,	0.565217,	0.516019,	0.238095,	0.00000,
 	1.00000,	1.00000,	0.604651,	0.510870,	0.520556,	0.148810,	0.00000,
 	1.00000,	1.00000,	0.932817,	0.826087,	0.773462,	0.119048,	0.00000,
 	1.00000,	1.00000,	0.997416,	0.945652,	0.777148,	0.0595238,	0.00000,
 	1.00000,	1.00000,	0.961240,	0.918478,	0.765240,	0.0297619,	0.00000,
 	1.00000,	1.00000,	1.00000,	0.972826,	0.797278,	0.119048,	0.00000,
 	1.00000,	1.00000,	0.832041,	0.782609,	0.634250,	0.0297619,	0.00000,
 	1.00000,	1.00000,	0.813953,	0.673913,	0.552878,	0.119048,	0.00000,
 	1.00000,	1.00000,	0.702842,	0.619565,	0.565920,	0.00000,	0.00000,
 	1.00000,	1.00000,	0.857881,	0.565217,	0.609016,	0.0892857,	0.00000,
 	1.00000,	1.00000,	1.00000,	0.972826,	0.417635,	0.119048,	0.00000,
 	1.00000,	0.200000,	0.116279,	0.266304,	0.215197,	0.416667,	0.00000,
 	1.00000,	0.600000,	0.335917,	0.266304,	0.345903,	0.446429,	0.00000,
 	1.00000,	0.600000,	0.338501,	0.277174,	0.329175,	0.446429,	0.00000,
 	1.00000,	0.600000,	0.341085,	0.211957,	0.276155,	0.476190,	0.00000,
 	1.00000,	0.200000,	0.0749354,	0.228261,	0.146583,	0.386905,	0.00000,
 	1.00000,	0.200000,	0.0749354,	0.00000,	0.0629430,	0.744048,	0.00000,
 	1.00000,	0.200000,	0.108527,	0.222826,	0.300255,	0.565476,	0.00000,
 	1.00000,	0.200000,	0.100775,	0.239130,	0.231642,	0.386905,	0.00000,
 	1.00000,	0.200000,	0.0930233,	0.266304,	0.216048,	0.565476,	0.00000,
 	1.00000,	0.200000,	0.136951,	0.364130,	0.176070,	0.267857,	0.00000,
 	1.00000,	0.600000,	0.338501,	0.239130,	0.293451,	0.416667,	0.00000,
 	1.00000,	1.00000,	0.754522,	0.918478,	0.851148,	0.357143,	0.00000,
 	1.00000,	1.00000,	0.617571,	0.836957,	0.783385,	0.416667,	0.00000,
 	1.00000,	1.00000,	0.645995,	0.891304,	0.785086,	0.327381,	0.00000,
 	1.00000,	1.00000,	0.609819,	0.798913,	0.884321,	0.625000,	0.00000,
 	1.00000,	0.200000,	0.0749354,	0.228261,	0.146583,	0.386905,	0.0833333,
 	1.00000,	0.200000,	0.186047,	0.239130,	0.184576,	0.446429,	0.0833333,
 	1.00000,	0.200000,	0.116279,	0.266304,	0.174369,	0.357143,	0.0833333,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.289481,	0.297619,	0.0833333,
 	1.00000,	0.600000,	0.405685,	0.320652,	0.517720,	0.446429,	0.0833333,
 	1.00000,	0.600000,	0.470284,	0.293478,	0.486532,	0.446429,	0.0833333,
 	1.00000,	0.600000,	0.470284,	0.228261,	0.478877,	0.446429,	0.0833333,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.474908,	0.446429,	0.0833333,
 	1.00000,	1.00000,	0.728682,	0.646739,	0.736036,	0.238095,	0.0833333,
 	1.00000,	1.00000,	0.857881,	0.701087,	0.808336,	0.208333,	0.0833333,
 	1.00000,	1.00000,	0.731266,	0.581522,	0.720442,	0.327381,	0.0833333,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.703998,	0.297619,	0.0833333,
 	1.00000,	1.00000,	0.813953,	0.728261,	0.947547,	0.208333,	0.0833333,
 	1.00000,	1.00000,	0.857881,	0.673913,	0.888290,	0.238095,	0.0833333,
 	1.00000,	1.00000,	0.857881,	0.701087,	1.00000,	0.238095,	0.0833333,
 	1.00000,	0.600000,	0.490956,	0.347826,	0.382478,	0.327381,	0.0833333,
 	1.00000,	0.200000,	0.186047,	0.141304,	0.225404,	0.654762,	0.0833333,
 	1.00000,	0.600000,	0.470284,	0.293478,	0.473207,	0.416667,	0.0833333,
 	1.00000,	0.600000,	0.470284,	0.228261,	0.432662,	0.386905,	0.0833333,
 	1.00000,	0.200000,	0.139535,	0.217391,	0.172101,	0.357143,	0.0833333,
 	1.00000,	0.200000,	0.124031,	0.239130,	0.144599,	0.357143,	0.0833333,
 	1.00000,	0.200000,	0.0284238,	0.130435,	0.130706,	0.684524,	0.0833333,
 	1.00000,	0.200000,	0.0516796,	0.163043,	0.128154,	0.386905,	0.0833333,
 	1.00000,	0.200000,	0.00775194,	0.103261,	0.0453643,	0.654762,	0.0833333,
 	1.00000,	0.200000,	0.0103359,	0.125000,	0.00000,	0.595238,	0.0833333,
 	1.00000,	0.200000,	0.0749354,	0.0760870,	0.0626595,	0.654762,	0.0833333,
 	1.00000,	0.200000,	0.0594315,	0.130435,	0.0969663,	0.744048,	0.0833333,
 	1.00000,	0.200000,	0.116279,	0.266304,	0.188546,	0.446429,	0.166667,
 	1.00000,	0.200000,	0.0762274,	0.184783,	0.145449,	0.535714,	0.166667,
 	1.00000,	0.200000,	0.0749354,	0.0434783,	0.181741,	0.922619,	0.166667,
 	1.00000,	0.200000,	0.186047,	0.239130,	0.225404,	0.684524,	0.166667,
 	1.00000,	0.200000,	0.139535,	0.217391,	0.173802,	0.505952,	0.166667,
 	1.00000,	1.00000,	0.728682,	0.646739,	0.754466,	0.238095,	0.166667,
 	1.00000,	1.00000,	0.857881,	0.701087,	0.785937,	0.238095,	0.166667,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.715055,	0.327381,	0.166667,
 	1.00000,	1.00000,	0.731266,	0.581522,	0.713354,	0.297619,	0.166667,
 	1.00000,	1.00000,	0.609819,	0.565217,	0.583782,	0.208333,	0.166667,
 	1.00000,	1.00000,	0.932817,	0.880435,	0.856252,	0.178571,	0.166667,
 	1.00000,	1.00000,	0.728682,	0.592391,	0.819110,	0.327381,	0.166667,
 	1.00000,	1.00000,	0.728682,	0.619565,	0.806067,	0.327381,	0.166667,
 	1.00000,	1.00000,	0.857881,	0.782609,	0.796428,	0.267857,	0.166667,
 	1.00000,	0.00000,	0.00516796,	0.277174,	0.203289,	0.327381,	0.166667,
 	1.00000,	1.00000,	0.609819,	0.565217,	0.646158,	0.267857,	0.166667,
 	1.00000,	1.00000,	0.617571,	0.456522,	0.704565,	0.357143,	0.166667,
 	1.00000,	1.00000,	0.604651,	0.510870,	0.760136,	0.476190,	0.166667,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.698611,	0.357143,	0.166667,
 	1.00000,	0.200000,	0.136951,	0.358696,	0.374256,	0.386905,	0.166667,
 	1.00000,	0.200000,	0.136951,	0.163043,	0.254607,	0.595238,	0.166667,
 	1.00000,	0.200000,	0.134367,	0.222826,	0.387298,	0.684524,	0.166667,
 	1.00000,	0.200000,	0.0723514,	0.125000,	0.163312,	0.595238,	0.166667,
 	1.00000,	0.200000,	0.139535,	0.217391,	0.221718,	0.476190,	0.166667,
 	1.00000,	0.200000,	0.0749354,	0.250000,	0.191381,	0.535714,	0.166667,
 	1.00000,	0.200000,	0.134367,	0.277174,	0.253190,	0.386905,	0.166667,
 	1.00000,	0.200000,	0.0775194,	0.184783,	0.156223,	0.416667,	0.166667,
 	1.00000,	0.200000,	0.0749354,	0.228261,	0.138078,	0.505952,	0.166667,
 	1.00000,	1.00000,	0.728682,	0.701087,	0.705132,	0.297619,	0.250000,
 	1.00000,	1.00000,	0.609819,	0.565217,	0.583782,	0.208333,	0.250000,
 	1.00000,	1.00000,	0.728682,	0.538043,	0.673377,	0.297619,	0.250000,
 	1.00000,	1.00000,	0.604651,	0.494565,	0.688687,	0.386905,	0.250000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.613553,	0.267857,	0.250000,
 	1.00000,	1.00000,	0.932817,	0.826087,	0.946697,	0.208333,	0.250000,
 	1.00000,	1.00000,	0.857881,	0.565217,	0.808336,	0.238095,	0.250000,
 	1.00000,	1.00000,	0.731266,	0.608696,	0.779699,	0.297619,	0.250000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.743975,	0.386905,	0.250000,
 	1.00000,	1.00000,	0.961240,	0.918478,	0.885172,	0.178571,	0.250000,
 	1.00000,	1.00000,	1.00000,	0.972826,	0.946413,	0.178571,	0.250000,
 	1.00000,	1.00000,	0.754522,	0.701087,	0.626028,	0.178571,	0.250000,
 	1.00000,	0.600000,	0.405685,	0.320652,	0.427559,	0.505952,	0.250000,
 	1.00000,	0.600000,	0.470284,	0.293478,	0.472073,	0.595238,	0.250000,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.377658,	0.476190,	0.250000,
 	1.00000,	0.600000,	0.470284,	0.228261,	0.399206,	0.505952,	0.250000,
 	1.00000,	0.600000,	0.335917,	0.266304,	0.366033,	0.476190,	0.250000,
 	1.00000,	0.200000,	0.0749354,	0.00000,	0.0955486,	0.773810,	0.250000,
 	1.00000,	1.00000,	0.857881,	0.565217,	0.959456,	0.357143,	0.250000,
 	1.00000,	1.00000,	0.857881,	0.657609,	0.933655,	0.267857,	0.250000,
 	1.00000,	1.00000,	0.754522,	0.673913,	0.862206,	0.297619,	0.250000,
 	1.00000,	1.00000,	0.728682,	0.728261,	0.818259,	0.267857,	0.250000,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.333428,	0.416667,	0.250000,
 	1.00000,	0.200000,	0.0749354,	0.228261,	0.188829,	0.654762,	0.250000,
 	1.00000,	0.200000,	0.186047,	0.141304,	0.223419,	0.684524,	0.250000,
 	1.00000,	0.200000,	0.103359,	0.260870,	0.217182,	0.505952,	0.250000,
 	1.00000,	0.00000,	0.00516796,	0.239130,	0.144882,	0.327381,	0.250000,
 	1.00000,	0.200000,	0.139535,	0.211957,	0.197618,	0.625000,	0.250000,
 	1.00000,	0.600000,	0.224806,	0.331522,	0.243550,	0.357143,	0.250000,
 	1.00000,	0.200000,	0.0775194,	0.239130,	0.184860,	0.446429,	0.250000,
 	1.00000,	1.00000,	0.728682,	0.538043,	0.700028,	0.297619,	0.250000,
 	1.00000,	1.00000,	0.857881,	1.00000,	0.755600,	0.0892857,	0.250000,
 	1.00000,	0.200000,	0.00000,	0.0163043,	0.0720159,	0.684524,	0.250000,
 	1.00000,	0.200000,	0.124031,	0.157609,	0.154522,	0.446429,	0.250000,
 	1.00000,	0.200000,	0.118863,	0.244565,	0.274738,	0.357143,	0.250000,
 	1.00000,	0.200000,	0.136951,	0.358696,	0.355826,	0.446429,	0.250000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.506379,	0.178571,	0.250000,
 	1.00000,	0.200000,	0.136951,	0.347826,	0.296853,	0.357143,	0.250000,
 	1.00000,	0.600000,	0.227390,	0.413043,	0.338531,	0.327381,	0.250000,
 	1.00000,	1.00000,	0.728682,	0.728261,	0.581514,	0.178571,	0.250000,
 	1.00000,	0.600000,	0.335917,	0.266304,	0.422172,	0.505952,	0.333333,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.365183,	0.476190,	0.333333,
 	1.00000,	0.600000,	0.470284,	0.293478,	0.488517,	0.535714,	0.333333,
 	1.00000,	0.200000,	0.0284238,	0.114130,	0.0955486,	0.654762,	0.333333,
 	1.00000,	0.200000,	0.139535,	0.184783,	0.237596,	0.505952,	0.333333,
 	1.00000,	0.200000,	0.00775194,	0.103261,	0.0632265,	0.773810,	0.333333,
 	1.00000,	0.200000,	0.186047,	0.157609,	0.263397,	0.535714,	0.333333,
 	1.00000,	0.600000,	0.470284,	0.293478,	0.614687,	0.535714,	0.333333,
 	1.00000,	0.600000,	0.490956,	0.347826,	0.572441,	0.595238,	0.333333,
 	1.00000,	0.600000,	0.405685,	0.320652,	0.567054,	0.505952,	0.333333,
 	1.00000,	1.00000,	0.604651,	0.510870,	0.716756,	0.357143,	0.333333,
 	1.00000,	1.00000,	0.728682,	0.565217,	0.874965,	0.386905,	0.333333,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.806351,	0.327381,	0.333333,
 	1.00000,	1.00000,	0.604651,	0.510870,	0.857669,	0.476190,	0.333333,
 	1.00000,	1.00000,	0.609819,	0.565217,	0.749646,	0.446429,	0.333333,
 	1.00000,	0.200000,	0.0775194,	0.201087,	0.171817,	0.505952,	0.333333,
 	1.00000,	0.200000,	0.0284238,	0.114130,	0.0992345,	0.446429,	0.333333,
 	1.00000,	0.200000,	0.0749354,	0.173913,	0.194783,	0.386905,	0.333333,
 	1.00000,	0.200000,	0.0206718,	0.0326087,	0.0102070,	0.505952,	0.333333,
 	1.00000,	0.200000,	0.0387597,	0.0815217,	0.110576,	0.654762,	0.333333,
 	1.00000,	0.200000,	0.0568475,	0.157609,	0.145166,	0.386905,	0.333333,
 	1.00000,	0.200000,	0.0568475,	0.157609,	0.140346,	0.446429,	0.333333,
 	1.00000,	0.200000,	0.124031,	0.157609,	0.179473,	0.357143,	0.333333,
 	1.00000,	0.200000,	0.134367,	0.277174,	0.248370,	0.416667,	0.333333,
 	1.00000,	0.200000,	0.103359,	0.255435,	0.220584,	0.446429,	0.333333,
 	1.00000,	0.200000,	0.0284238,	0.114130,	0.109725,	0.476190,	0.333333,
 	1.00000,	0.600000,	0.405685,	0.266304,	0.468103,	0.476190,	0.416667,
 	1.00000,	0.600000,	0.470284,	0.320652,	0.523391,	0.476190,	0.416667,
 	1.00000,	0.600000,	0.470284,	0.141304,	0.515736,	0.773810,	0.416667,
 	1.00000,	0.600000,	0.470284,	0.141304,	0.438049,	0.684524,	0.416667,
 	1.00000,	1.00000,	0.857881,	0.673913,	0.866175,	0.208333,	0.416667,
 	1.00000,	1.00000,	0.728682,	0.538043,	0.801531,	0.357143,	0.416667,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.817976,	0.386905,	0.416667,
 	1.00000,	1.00000,	0.731266,	0.554348,	0.863056,	0.327381,	0.416667,
 	1.00000,	0.600000,	0.421189,	0.347826,	0.650411,	0.773810,	0.416667,
 	1.00000,	0.600000,	0.470284,	0.320652,	0.647576,	0.625000,	0.416667,
 	1.00000,	0.600000,	0.490956,	0.347826,	0.600227,	0.654762,	0.416667,
 	1.00000,	0.600000,	0.405685,	0.266304,	0.615821,	0.654762,	0.416667,
 	1.00000,	0.600000,	0.421189,	0.347826,	0.404310,	0.416667,	0.416667,
 	1.00000,	1.00000,	0.501292,	0.347826,	0.455912,	0.327381,	0.416667,
 	1.00000,	1.00000,	0.604651,	0.451087,	0.441168,	0.238095,	0.416667,
 	1.00000,	0.200000,	0.0749354,	0.157609,	0.158208,	0.476190,	0.416667,
 	1.00000,	0.200000,	0.186047,	0.201087,	0.290899,	0.535714,	0.416667,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.368869,	0.476190,	0.416667,
 	1.00000,	0.200000,	0.186047,	0.173913,	0.277573,	0.625000,	0.416667,
 	1.00000,	0.200000,	0.170543,	0.271739,	0.308761,	0.327381,	0.416667,
 	1.00000,	0.200000,	0.0568475,	0.135870,	0.172952,	0.505952,	0.416667,
 	1.00000,	0.200000,	0.131783,	0.277174,	0.264247,	0.535714,	0.416667,
 	1.00000,	0.600000,	0.266150,	0.277174,	0.388716,	0.386905,	0.416667,
 	1.00000,	0.200000,	0.0568475,	0.130435,	0.0918628,	0.357143,	0.416667,
 	1.00000,	0.600000,	0.423773,	0.239130,	0.453076,	0.535714,	0.416667,
 	1.00000,	0.200000,	0.121447,	0.266304,	0.306493,	0.416667,	0.416667,
 	1.00000,	0.200000,	0.134367,	0.228261,	0.381060,	0.535714,	0.416667,
 	1.00000,	0.200000,	0.136951,	0.282609,	0.377658,	0.386905,	0.416667,
 	1.00000,	0.200000,	0.136951,	0.375000,	0.299972,	0.327381,	0.416667,
 	1.00000,	0.200000,	0.0594315,	0.0380435,	0.0516019,	0.565476,	0.416667,
 	1.00000,	0.200000,	0.100775,	0.217391,	0.241282,	0.446429,	0.500000,
 	1.00000,	0.200000,	0.124031,	0.190217,	0.172101,	0.529762,	0.500000,
 	1.00000,	0.200000,	0.186047,	0.250000,	0.271902,	0.410714,	0.500000,
 	1.00000,	0.200000,	0.0775194,	0.179348,	0.182024,	0.577381,	0.500000,
 	1.00000,	0.200000,	0.0852713,	0.201087,	0.166997,	0.434524,	0.500000,
 	1.00000,	1.00000,	0.612403,	0.510870,	0.737737,	0.297619,	0.500000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.730649,	0.297619,	0.500000,
 	1.00000,	1.00000,	0.609819,	0.402174,	0.666005,	0.351190,	0.500000,
 	1.00000,	1.00000,	0.731266,	0.576087,	0.737737,	0.285714,	0.500000,
 	1.00000,	0.600000,	0.405685,	0.293478,	0.459314,	0.440476,	0.500000,
 	1.00000,	0.600000,	0.470284,	0.320652,	0.493337,	0.386905,	0.500000,
 	1.00000,	0.600000,	0.341085,	0.190217,	0.396654,	0.571429,	0.500000,
 	1.00000,	0.600000,	0.423773,	0.239130,	0.417352,	0.571429,	0.500000,
 	1.00000,	0.200000,	0.0439276,	0.0326087,	0.119648,	0.845238,	0.500000,
 	1.00000,	0.200000,	0.0775194,	0.0760870,	0.156223,	0.839286,	0.500000,
 	1.00000,	0.200000,	0.0568475,	0.130435,	0.0918628,	0.369048,	0.500000,
 	1.00000,	0.200000,	0.0594315,	0.0380435,	0.0516019,	0.559524,	0.500000,
 	1.00000,	0.600000,	0.405685,	0.293478,	0.577828,	0.577381,	0.500000,
 	1.00000,	0.600000,	0.470284,	0.173913,	0.555997,	0.773810,	0.500000,
 	1.00000,	0.600000,	0.470284,	0.347826,	0.576127,	0.488095,	0.500000,
 	1.00000,	0.600000,	0.490956,	0.266304,	0.447973,	0.583333,	0.500000,
 	1.00000,	0.200000,	0.0749354,	0.135870,	0.0601077,	0.250000,	0.500000,
 	1.00000,	0.200000,	0.0439276,	0.130435,	0.106890,	0.535714,	0.500000,
 	1.00000,	0.200000,	0.0749354,	0.157609,	0.153672,	0.500000,	0.500000,
 	1.00000,	0.200000,	0.186047,	0.141304,	0.269918,	0.333333,	0.500000,
 	1.00000,	0.200000,	0.160207,	0.304348,	0.435781,	0.458333,	0.500000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.659768,	0.309524,	0.500000,
 	1.00000,	0.200000,	0.134367,	0.228261,	0.469804,	0.827381,	0.500000,
 	1.00000,	0.600000,	0.227390,	0.336957,	0.373405,	0.446429,	0.500000,
 	1.00000,	0.600000,	0.258398,	0.402174,	0.625744,	0.517857,	0.500000,
 	1.00000,	1.00000,	0.728682,	0.728261,	0.784519,	0.244048,	0.500000,
 	1.00000,	1.00000,	0.728682,	0.538043,	0.692373,	0.238095,	0.500000,
 	1.00000,	1.00000,	0.604651,	0.456522,	0.639921,	0.416667,	0.500000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.607315,	0.357143,	0.500000,
 	1.00000,	0.200000,	0.0775194,	0.119565,	0.122484,	0.625000,	0.583333,
 	1.00000,	0.200000,	0.111111,	0.184783,	0.153672,	0.404762,	0.583333,
 	1.00000,	0.200000,	0.0284238,	0.0652174,	0.0601077,	0.630952,	0.583333,
 	1.00000,	0.200000,	0.139535,	0.271739,	0.194783,	0.446429,	0.583333,
 	1.00000,	0.200000,	0.0439276,	0.130435,	0.0941310,	0.523810,	0.583333,
 	1.00000,	1.00000,	0.612403,	0.538043,	0.642756,	0.267857,	0.583333,
 	1.00000,	1.00000,	0.496124,	0.347826,	0.693791,	0.654762,	0.583333,
 	1.00000,	1.00000,	0.645995,	0.538043,	0.716473,	0.339286,	0.583333,
 	1.00000,	1.00000,	0.604651,	0.456522,	0.760420,	0.410714,	0.583333,
 	1.00000,	0.600000,	0.470284,	0.347826,	0.540686,	0.500000,	0.583333,
 	1.00000,	0.600000,	0.421189,	0.320652,	0.513751,	0.529762,	0.583333,
 	1.00000,	0.600000,	0.405685,	0.293478,	0.571874,	0.577381,	0.583333,
 	1.00000,	0.600000,	0.470284,	0.282609,	0.542104,	0.654762,	0.583333,
 	1.00000,	1.00000,	0.857881,	0.728261,	0.739155,	0.184524,	0.583333,
 	1.00000,	1.00000,	0.728682,	0.673913,	0.723561,	0.202381,	0.583333,
 	1.00000,	1.00000,	0.857881,	0.782609,	0.768925,	0.250000,	0.583333,
 	1.00000,	1.00000,	0.731266,	0.559783,	0.771761,	0.386905,	0.583333,
 	1.00000,	0.200000,	0.0749354,	0.173913,	0.0927134,	0.386905,	0.583333,
 	1.00000,	0.200000,	0.214470,	0.228261,	0.319535,	0.476190,	0.583333,
 	1.00000,	0.200000,	0.0749354,	0.157609,	0.184860,	0.607143,	0.583333,
 	1.00000,	0.200000,	0.186047,	0.233696,	0.323788,	0.464286,	0.583333,
 	1.00000,	0.200000,	0.0775194,	0.0923913,	0.124185,	0.535714,	0.583333,
 	1.00000,	0.200000,	0.0775194,	0.201087,	0.130990,	0.470238,	0.583333,
 	1.00000,	0.200000,	0.0749354,	0.114130,	0.105472,	0.500000,	0.583333,
 	1.00000,	0.200000,	0.0749354,	0.173913,	0.163595,	0.363095,	0.583333,
 	1.00000,	0.600000,	0.201550,	0.277174,	0.340800,	0.386905,	0.583333,
 	1.00000,	0.200000,	0.136951,	0.347826,	0.279841,	0.285714,	0.583333,
 	1.00000,	0.00000,	0.0310078,	0.347826,	0.313864,	0.327381,	0.583333,
 	1.00000,	0.200000,	0.0568475,	0.0108696,	0.105472,	0.803571,	0.666667,
 	1.00000,	0.200000,	0.0775194,	0.108696,	0.0530196,	0.380952,	0.666667,
 	1.00000,	0.200000,	0.0258398,	0.0326087,	0.105472,	0.678571,	0.666667,
 	1.00000,	0.200000,	0.0439276,	0.130435,	0.129572,	0.630952,	0.666667,
 	1.00000,	0.200000,	0.0594315,	0.0760870,	0.0530196,	0.500000,	0.666667,
 	1.00000,	1.00000,	0.496124,	0.347826,	0.496739,	0.446429,	0.666667,
 	1.00000,	1.00000,	0.645995,	0.510870,	0.601644,	0.309524,	0.666667,
 	1.00000,	1.00000,	0.604651,	0.505435,	0.554862,	0.285714,	0.666667,
 	1.00000,	0.600000,	0.421189,	0.320652,	0.544939,	0.666667,	0.666667,
 	1.00000,	0.600000,	0.341085,	0.266304,	0.437199,	0.607143,	0.666667,
 	1.00000,	0.600000,	0.341085,	0.211957,	0.383329,	0.464286,	0.666667,
 	1.00000,	0.200000,	0.186047,	0.228261,	0.313864,	0.440476,	0.666667,
 	1.00000,	0.600000,	0.405685,	0.293478,	0.515169,	0.547619,	0.666667,
 	1.00000,	0.600000,	0.423773,	0.239130,	0.452793,	0.547619,	0.666667,
 	1.00000,	0.600000,	0.421189,	0.320652,	0.500992,	0.464286,	0.666667,
 	1.00000,	0.600000,	0.341085,	0.211957,	0.413099,	0.517857,	0.666667,
 	1.00000,	0.600000,	0.405685,	0.347826,	0.569039,	0.636905,	0.666667,
 	1.00000,	0.600000,	0.490956,	0.402174,	0.509498,	0.422619,	0.666667,
 	1.00000,	1.00000,	0.612403,	0.538043,	0.513751,	0.309524,	0.666667,
 	1.00000,	0.600000,	0.421189,	0.646739,	0.519422,	0.321429,	0.666667,
 	1.00000,	1.00000,	0.604651,	0.505435,	0.451375,	0.190476,	0.666667,
 	1.00000,	1.00000,	0.645995,	0.510870,	0.699461,	0.339286,	0.666667,
 	1.00000,	0.200000,	0.0775194,	0.119565,	0.153672,	0.505952,	0.666667,
 	1.00000,	0.200000,	0.170543,	0.266304,	0.268500,	0.369048,	0.666667,
 	1.00000,	0.200000,	0.131783,	0.277174,	0.194783,	0.398810,	0.666667,
 	1.00000,	0.200000,	0.0956072,	0.157609,	0.174936,	0.386905,	0.666667,
 	1.00000,	0.200000,	0.170543,	0.266304,	0.255741,	0.404762,	0.666667,
 	1.00000,	0.200000,	0.227390,	0.320652,	0.320953,	0.517857,	0.666667,
 	1.00000,	0.200000,	0.214470,	0.211957,	0.352141,	0.571429,	0.666667,
 	1.00000,	0.200000,	0.131783,	0.277174,	0.224553,	0.410714,	0.666667,
 	1.00000,	0.400000,	0.162791,	0.309783,	0.345052,	0.470238,	0.666667,
 	1.00000,	0.600000,	0.245478,	0.429348,	0.432946,	0.333333,	0.666667,
 	1.00000,	0.200000,	0.136951,	0.375000,	0.335129,	0.458333,	0.666667,
 	1.00000,	0.600000,	0.245478,	0.472826,	0.509498,	0.464286,	0.666667,
 	1.00000,	0.200000,	0.0542636,	0.135870,	0.106890,	0.410714,	0.666667,
 	1.00000,	0.200000,	0.0775194,	0.119565,	0.148001,	0.511905,	0.666667,
 	1.00000,	0.600000,	0.421189,	0.375000,	0.462716,	0.440476,	0.750000,
 	1.00000,	0.600000,	0.341085,	0.211957,	0.390417,	0.607143,	0.750000,
 	1.00000,	0.200000,	0.186047,	0.228261,	0.362064,	0.553571,	0.750000,
 	1.00000,	0.600000,	0.423773,	0.239130,	0.468387,	0.607143,	0.750000,
 	1.00000,	0.600000,	0.405685,	0.347826,	0.495322,	0.511905,	0.750000,
 	1.00000,	1.00000,	0.612403,	0.456522,	0.631415,	0.440476,	0.750000,
 	1.00000,	1.00000,	0.604651,	0.451087,	0.598809,	0.321429,	0.750000,
 	1.00000,	1.00000,	0.731266,	0.500000,	0.664020,	0.309524,	0.750000,
 	1.00000,	1.00000,	0.645995,	0.483696,	0.628580,	0.428571,	0.750000,
 	1.00000,	1.00000,	0.728682,	0.592391,	0.778849,	0.410714,	0.750000,
 	1.00000,	1.00000,	0.731266,	0.521739,	0.692090,	0.375000,	0.750000,
 	1.00000,	1.00000,	0.514212,	0.429348,	0.564786,	0.416667,	0.750000,
 	1.00000,	1.00000,	0.754522,	0.565217,	0.659768,	0.297619,	0.750000,
 	1.00000,	0.200000,	0.0542636,	0.135870,	0.0884604,	0.357143,	0.750000,
 	1.00000,	0.200000,	0.0465116,	0.103261,	0.102637,	0.428571,	0.750000,
 	1.00000,	0.200000,	0.0775194,	0.184783,	0.0856252,	0.380952,	0.750000,
 	1.00000,	0.200000,	0.136951,	0.184783,	0.299688,	0.416667,	0.750000,
 	1.00000,	0.400000,	0.297158,	0.168478,	0.543521,	0.720238,	0.750000,
 	1.00000,	1.00000,	0.728682,	0.429348,	0.648426,	0.559524,	0.750000,
 	1.00000,	0.200000,	0.188630,	0.135870,	0.447122,	1.00000,	0.750000,
 	1.00000,	1.00000,	0.496124,	0.239130,	0.512333,	0.845238,	0.750000,
 	1.00000,	0.200000,	0.0956072,	0.130435,	0.166430,	0.309524,	0.750000,
 	1.00000,	0.200000,	0.0956072,	0.130435,	0.152254,	0.410714,	0.750000,
 	1.00000,	0.200000,	0.0439276,	0.103261,	0.115396,	0.666667,	0.750000,
 	1.00000,	0.200000,	0.0594315,	0.125000,	0.146583,	0.398810,	0.750000,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.299688,	0.476190,	0.750000,
 	1.00000,	0.600000,	0.271318,	0.375000,	0.278424,	0.196429,	0.750000,
 	1.00000,	0.600000,	0.271318,	0.375000,	0.308194,	0.291667,	0.750000,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.267366,	0.309524,	0.750000,
 	1.00000,	0.200000,	0.0775194,	0.163043,	0.150553,	0.398810,	0.833333,
 	1.00000,	0.200000,	0.0542636,	0.0760870,	0.100652,	0.642857,	0.833333,
 	1.00000,	0.200000,	0.0775194,	0.130435,	0.143748,	0.446429,	0.833333,
 	1.00000,	0.200000,	0.0465116,	0.103261,	0.115112,	0.500000,	0.833333,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.301956,	0.505952,	0.833333,
 	1.00000,	0.200000,	0.186047,	0.228261,	0.356394,	0.601190,	0.833333,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.394103,	0.720238,	0.833333,
 	1.00000,	0.600000,	0.405685,	0.239130,	0.501276,	0.636905,	0.833333,
 	1.00000,	0.200000,	0.0749354,	0.173913,	0.163028,	0.464286,	0.833333,
 	1.00000,	0.200000,	0.170543,	0.239130,	0.311313,	0.446429,	0.833333,
 	1.00000,	0.200000,	0.134367,	0.157609,	0.263397,	0.565476,	0.833333,
 	1.00000,	0.200000,	0.131783,	0.250000,	0.232776,	0.416667,	0.833333,
 	1.00000,	0.200000,	0.103359,	0.157609,	0.184860,	0.428571,	0.833333,
 	1.00000,	0.200000,	0.0465116,	0.103261,	0.140913,	0.589286,	0.833333,
 	1.00000,	0.200000,	0.227390,	0.320652,	0.336547,	0.380952,	0.833333,
 	1.00000,	0.200000,	0.0439276,	0.103261,	0.140913,	0.666667,	0.833333,
 	1.00000,	0.200000,	0.0568475,	0.0108696,	0.133825,	0.815476,	0.833333,
 	1.00000,	0.200000,	0.0568475,	0.0108696,	0.204707,	0.934524,	0.833333,
 	1.00000,	0.400000,	0.136951,	0.114130,	0.379076,	0.708333,	0.833333,
 	1.00000,	0.200000,	0.201550,	0.114130,	0.464134,	0.821429,	0.833333,
 	1.00000,	0.200000,	0.0594315,	0.114130,	0.0671959,	0.345238,	0.833333,
 	1.00000,	0.200000,	0.0749354,	0.114130,	0.150836,	0.595238,	0.833333,
 	1.00000,	0.200000,	0.0542636,	0.0869565,	0.0657783,	0.434524,	0.833333,
 	1.00000,	0.600000,	0.258398,	0.467391,	0.367735,	0.202381,	0.833333,
 	1.00000,	0.00000,	0.00516796,	0.293478,	0.228806,	0.267857,	0.833333,
 	1.00000,	0.200000,	0.139535,	0.228261,	0.251489,	0.422619,	0.833333,
 	1.00000,	0.200000,	0.100775,	0.141304,	0.191948,	0.535714,	0.833333,
 	1.00000,	0.200000,	0.173127,	0.206522,	0.248653,	0.458333,	0.916667,
 	1.00000,	0.200000,	0.214470,	0.206522,	0.289765,	0.500000,	0.916667,
 	1.00000,	0.200000,	0.227390,	0.250000,	0.285512,	0.380952,	0.916667,
 	1.00000,	0.600000,	0.271318,	0.347826,	0.315282,	0.273810,	0.916667,
 	1.00000,	0.200000,	0.173127,	0.206522,	0.218883,	0.291667,	0.916667,
 	1.00000,	0.200000,	0.0284238,	0.0652174,	0.0402608,	0.529762,	0.916667,
 	1.00000,	0.200000,	0.0465116,	0.0978261,	0.0742841,	0.500000,	0.916667,
 	1.00000,	0.200000,	0.0335917,	0.0760870,	0.0416785,	0.482143,	0.916667,
 	1.00000,	0.200000,	0.0749354,	0.114130,	0.128154,	0.583333,	0.916667,
 	1.00000,	0.200000,	0.0439276,	0.103261,	0.102637,	0.678571,	0.916667,
 	1.00000,	0.200000,	0.0542636,	0.0869565,	0.123901,	0.553571,	0.916667,
 	1.00000,	0.200000,	0.0594315,	0.119565,	0.105472,	0.476190,	0.916667,
 	1.00000,	0.200000,	0.0956072,	0.0923913,	0.170683,	0.410714,	0.916667,
 	1.00000,	0.200000,	0.0775194,	0.103261,	0.122484,	0.488095,	0.916667,
 	1.00000,	0.200000,	0.0775194,	0.103261,	0.217465,	0.755952,	0.916667,
 	1.00000,	0.200000,	0.0956072,	0.152174,	0.163595,	0.369048,	0.916667,
 	1.00000,	0.200000,	0.100775,	0.157609,	0.169266,	0.380952,	0.916667,
 	1.00000,	0.200000,	0.103359,	0.157609,	0.208959,	0.523810,	0.916667,
 	1.00000,	0.200000,	0.131783,	0.293478,	0.284094,	0.404762,	0.916667,
 	1.00000,	0.200000,	0.134367,	0.152174,	0.289765,	0.613095,	0.916667,
 	1.00000,	0.200000,	0.188630,	0.184783,	0.458463,	0.738095,	0.916667,
 	1.00000,	0.600000,	0.198966,	0.163043,	0.438616,	0.690476,	0.916667,
 	1.00000,	0.600000,	0.258398,	0.380435,	0.364899,	0.273810,	0.916667,
 	1.00000,	0.600000,	0.201550,	0.402174,	0.373405,	0.345238,	0.916667,
 	1.00000,	0.600000,	0.421189,	0.347826,	0.510916,	0.464286,	0.916667,
 	1.00000,	1.00000,	0.728682,	0.320652,	0.598809,	0.654762,	0.916667,
 	1.00000,	0.600000,	0.341085,	0.228261,	0.410264,	0.541667,	0.916667,
 	1.00000,	0.600000,	0.405685,	0.211957,	0.525092,	0.511905,	0.916667,
 	1.00000,	0.200000,	0.113695,	0.228261,	0.281259,	0.690476,	1.00000,
 	1.00000,	0.200000,	0.113695,	0.228261,	0.291182,	0.630952,	1.00000,
 	1.00000,	0.200000,	0.113695,	0.228261,	0.221718,	0.595238,	1.00000,
 	1.00000,	0.200000,	0.113695,	0.211957,	0.272753,	0.488095,	1.00000,
 	1.00000,	0.200000,	0.173127,	0.206522,	0.258577,	0.476190,	1.00000,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.318117,	0.595238,	1.00000,
 	1.00000,	0.200000,	0.186047,	0.250000,	0.354976,	0.500000,	1.00000,
 	1.00000,	0.200000,	0.0956072,	0.152174,	0.104054,	0.434524,	1.00000,
 	1.00000,	0.200000,	0.0594315,	0.119565,	0.116813,	0.607143,	1.00000,
 	1.00000,	0.200000,	0.0594315,	0.119565,	0.101219,	0.571429,	1.00000,
 	1.00000,	0.200000,	0.0956072,	0.0923913,	0.145166,	0.398810,	1.00000,
 	1.00000,	0.200000,	0.0775194,	0.130435,	0.145166,	0.553571,	1.00000,
 	1.00000,	0.200000,	0.134367,	0.228261,	0.155089,	0.386905,	1.00000,
 	1.00000,	0.200000,	0.100775,	0.157609,	0.167848,	0.386905,	1.00000,
 	1.00000,	0.200000,	0.103359,	0.130435,	0.179189,	0.529762,	1.00000,
 	1.00000,	0.200000,	0.0594315,	0.114130,	0.0998015,	0.416667,	1.00000,
 	1.00000,	0.200000,	0.0594315,	0.114130,	0.0998015,	0.458333,	1.00000,
 	1.00000,	0.200000,	0.0594315,	0.114130,	0.108307,	0.488095,	1.00000,
 	1.00000,	0.600000,	0.291990,	0.347826,	0.377658,	0.500000,	1.00000,
 	1.00000,	0.600000,	0.501292,	0.211957,	0.397505,	0.535714,	1.00000,
 	1.00000,	0.200000,	0.227390,	0.250000,	0.275588,	0.386905,	1.00000,
 	1.00000,	0.600000,	0.423773,	0.358696,	0.346470,	0.398810,	1.00000,
 	1.00000,	0.200000,	0.196382,	0.271739,	0.298270,	0.351190,	1.00000,
 	1.00000,	0.200000,	0.173127,	0.206522,	0.214630,	0.297619,	1.00000,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.379076,	0.553571,	1.00000,
 	1.00000,	0.200000,	0.186047,	0.217391,	0.333711,	0.452381,	1.00000,
 	1.00000,	0.200000,	0.0749354,	0.0326087,	0.146583,	0.988095,	1.00000,
 	1.00000,	0.200000,	0.173127,	0.206522,	0.193365,	0.214286,	1.00000,
 	1.00000,	0.200000,	0.134367,	0.179348,	0.286929,	0.630952,	1.00000,
 	1.00000,	0.200000,	0.131783,	0.195652,	0.313864,	0.678571,	1.00000) 
 scaled y = 
MatrixD(18.0000,
 	15.0000,
 	18.0000,
 	16.0000,
 	17.0000,
 	15.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	15.0000,
 	15.0000,
 	14.0000,
 	15.0000,
 	14.0000,
 	24.0000,
 	22.0000,
 	18.0000,
 	21.0000,
 	27.0000,
 	26.0000,
 	25.0000,
 	24.0000,
 	25.0000,
 	26.0000,
 	21.0000,
 	10.0000,
 	10.0000,
 	11.0000,
 	9.00000,
 	27.0000,
 	28.0000,
 	25.0000,
 	19.0000,
 	16.0000,
 	17.0000,
 	19.0000,
 	18.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	12.0000,
 	13.0000,
 	13.0000,
 	18.0000,
 	22.0000,
 	19.0000,
 	18.0000,
 	23.0000,
 	28.0000,
 	30.0000,
 	30.0000,
 	31.0000,
 	35.0000,
 	27.0000,
 	26.0000,
 	24.0000,
 	25.0000,
 	23.0000,
 	20.0000,
 	21.0000,
 	13.0000,
 	14.0000,
 	15.0000,
 	14.0000,
 	17.0000,
 	11.0000,
 	13.0000,
 	12.0000,
 	13.0000,
 	19.0000,
 	15.0000,
 	13.0000,
 	13.0000,
 	14.0000,
 	18.0000,
 	22.0000,
 	21.0000,
 	26.0000,
 	22.0000,
 	28.0000,
 	23.0000,
 	28.0000,
 	27.0000,
 	13.0000,
 	14.0000,
 	13.0000,
 	14.0000,
 	15.0000,
 	12.0000,
 	13.0000,
 	13.0000,
 	14.0000,
 	13.0000,
 	12.0000,
 	13.0000,
 	18.0000,
 	16.0000,
 	18.0000,
 	18.0000,
 	23.0000,
 	26.0000,
 	11.0000,
 	12.0000,
 	13.0000,
 	12.0000,
 	18.0000,
 	20.0000,
 	21.0000,
 	22.0000,
 	18.0000,
 	19.0000,
 	21.0000,
 	26.0000,
 	15.0000,
 	16.0000,
 	29.0000,
 	24.0000,
 	20.0000,
 	19.0000,
 	15.0000,
 	24.0000,
 	20.0000,
 	11.0000,
 	20.0000,
 	19.0000,
 	15.0000,
 	31.0000,
 	26.0000,
 	32.0000,
 	25.0000,
 	16.0000,
 	16.0000,
 	18.0000,
 	16.0000,
 	13.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	29.0000,
 	26.0000,
 	26.0000,
 	31.0000,
 	32.0000,
 	28.0000,
 	24.0000,
 	26.0000,
 	24.0000,
 	26.0000,
 	31.0000,
 	19.0000,
 	18.0000,
 	15.0000,
 	15.0000,
 	16.0000,
 	15.0000,
 	16.0000,
 	14.0000,
 	17.0000,
 	16.0000,
 	15.0000,
 	18.0000,
 	21.0000,
 	20.0000,
 	13.0000,
 	29.0000,
 	23.0000,
 	20.0000,
 	23.0000,
 	24.0000,
 	25.0000,
 	24.0000,
 	18.0000,
 	29.0000,
 	19.0000,
 	23.0000,
 	23.0000,
 	22.0000,
 	25.0000,
 	33.0000,
 	28.0000,
 	25.0000,
 	25.0000,
 	26.0000,
 	27.0000,
 	17.5000,
 	16.0000,
 	15.5000,
 	14.5000,
 	22.0000,
 	22.0000,
 	24.0000,
 	22.5000,
 	29.0000,
 	24.5000,
 	29.0000,
 	33.0000,
 	20.0000,
 	18.0000,
 	18.5000,
 	17.5000,
 	29.5000,
 	32.0000,
 	28.0000,
 	26.5000,
 	20.0000,
 	13.0000,
 	19.0000,
 	19.0000,
 	16.5000,
 	16.5000,
 	13.0000,
 	13.0000,
 	13.0000,
 	31.5000,
 	30.0000,
 	36.0000,
 	25.5000,
 	33.5000,
 	17.5000,
 	17.0000,
 	15.5000,
 	15.0000,
 	17.5000,
 	20.5000,
 	19.0000,
 	18.5000,
 	16.0000,
 	15.5000,
 	15.5000,
 	16.0000,
 	29.0000,
 	24.5000,
 	26.0000,
 	25.5000,
 	30.5000,
 	33.5000,
 	30.0000,
 	30.5000,
 	22.0000,
 	21.5000,
 	21.5000,
 	43.1000,
 	36.1000,
 	32.8000,
 	39.4000,
 	36.1000,
 	19.9000,
 	19.4000,
 	20.2000,
 	19.2000,
 	20.5000,
 	20.2000,
 	25.1000,
 	20.5000,
 	19.4000,
 	20.6000,
 	20.8000,
 	18.6000,
 	18.1000,
 	19.2000,
 	17.7000,
 	18.1000,
 	17.5000,
 	30.0000,
 	27.5000,
 	27.2000,
 	30.9000,
 	21.1000,
 	23.2000,
 	23.8000,
 	23.9000,
 	20.3000,
 	17.0000,
 	21.6000,
 	16.2000,
 	31.5000,
 	29.5000,
 	21.5000,
 	19.8000,
 	22.3000,
 	20.2000,
 	20.6000,
 	17.0000,
 	17.6000,
 	16.5000,
 	18.2000,
 	16.9000,
 	15.5000,
 	19.2000,
 	18.5000,
 	31.9000,
 	34.1000,
 	35.7000,
 	27.4000,
 	25.4000,
 	23.0000,
 	27.2000,
 	23.9000,
 	34.2000,
 	34.5000,
 	31.8000,
 	37.3000,
 	28.4000,
 	28.8000,
 	26.8000,
 	33.5000,
 	41.5000,
 	38.1000,
 	32.1000,
 	37.2000,
 	28.0000,
 	26.4000,
 	24.3000,
 	19.1000,
 	34.3000,
 	29.8000,
 	31.3000,
 	37.0000,
 	32.2000,
 	46.6000,
 	27.9000,
 	40.8000,
 	44.3000,
 	43.4000,
 	36.4000,
 	30.0000,
 	44.6000,
 	33.8000,
 	29.8000,
 	32.7000,
 	23.7000,
 	35.0000,
 	32.4000,
 	27.2000,
 	26.6000,
 	25.8000,
 	23.5000,
 	30.0000,
 	39.1000,
 	39.0000,
 	35.1000,
 	32.3000,
 	37.0000,
 	37.7000,
 	34.1000,
 	34.7000,
 	34.4000,
 	29.9000,
 	33.0000,
 	33.7000,
 	32.4000,
 	32.9000,
 	31.6000,
 	28.1000,
 	30.7000,
 	25.4000,
 	24.2000,
 	22.4000,
 	26.6000,
 	20.2000,
 	17.6000,
 	28.0000,
 	27.0000,
 	34.0000,
 	31.0000,
 	29.0000,
 	27.0000,
 	24.0000,
 	36.0000,
 	37.0000,
 	31.0000,
 	38.0000,
 	36.0000,
 	36.0000,
 	36.0000,
 	34.0000,
 	38.0000,
 	32.0000,
 	38.0000,
 	25.0000,
 	38.0000,
 	26.0000,
 	22.0000,
 	32.0000,
 	36.0000,
 	27.0000,
 	27.0000,
 	44.0000,
 	32.0000,
 	28.0000,
 	31.0000)
auto_optimize: etaI = (0.025,0.4)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.025, result = (2917.8570352933157,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0484375, result = (2701.4171654937977,388)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.071875, result = (2701.4171654937977,-3)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0953125, result = (2471.8058513512756,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.11875, result = (2419.960012661861,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.1421875, result = (2386.2769613249257,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.165625, result = (2450.802276114617,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.1890625, result = (2406.4832026260783,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.2125, result = (2300.6851251737985,145)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.2359375, result = (2300.6851251737985,-3)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.259375, result = (2326.6544603319016,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.2828125, result = (2254.2117546343798,340)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.30625, result = (2254.2117546343798,-3)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.3296875, result = (2254.2117546343798,182)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.353125, result = (2254.2117546343798,-3)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.3765625, result = (2163.439022488467,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.4, result = (2547.5886929434423,400)
ending epoch = (2163.439022488467,400)

REPORT
    ----------------------------------------------------------------------------
    modelName  mn  = NeuralNet_3L_sigmoid
    ----------------------------------------------------------------------------
    hparameter hp  = HyperParameter (HashMap(lambda -> (0.01,0.01), maxEpochs -> (400,400), eta -> (0.1,0.1), nu -> (0.9,0.9), upLimit -> (4,4), beta -> (0.9,0.9), bSize -> (20,20)))
    ----------------------------------------------------------------------------
    features   fn  = Array(intercept, cylinders, displacement, horsepower, weight, acceleration, modelyear)
    ----------------------------------------------------------------------------
    parameter  bb  = Array(b.w = 
MatrixD(3.32499,	6.46733,	-3.58542,	-2.35607,	-4.80658,	-3.15560,	-2.96924,	2.28394,	1.12121,	-3.64104,	0.439821,	-2.88637,	-7.66855,	-3.28798,	5.91689,
 	-0.600262,	-2.37822,	1.16979,	0.432260,	1.67161,	1.57846,	1.51691,	-3.27647,	5.80973,	-1.51944,	3.70524,	1.15413,	3.34229,	1.80950,	-3.33800,
 	-0.187262,	-6.24840,	-3.20540,	-0.805301,	-3.27467,	-3.83686,	-3.80967,	-2.49069,	-7.16409,	-1.73712,	-5.88710,	-3.67987,	0.970507,	4.28786,	-10.7105,
 	-1.61169,	-5.27589,	-5.79815,	-5.42078,	-8.51475,	-5.08793,	-6.16250,	-3.04016,	-10.4494,	-3.75395,	-4.44901,	-4.49645,	-9.41441,	-5.74910,	-2.83104,
 	-3.81841,	-4.33933,	-0.435494,	-6.21727,	0.961354,	-1.37261,	-2.65077,	-3.16846,	-11.3645,	-8.53649,	-5.05309,	-1.69454,	2.78874,	-2.36060,	-13.6242,
 	-8.18822,	-6.09959,	4.88690,	0.947820,	7.33460,	3.92383,	3.98262,	2.40089,	-0.620096,	-1.45214,	3.47059,	3.46713,	9.88073,	-0.598497,	-14.3443,
 	4.14523,	-7.08028,	2.64294,	8.31579,	4.39455,	1.88190,	1.98762,	4.42577,	1.91512,	17.0369,	-3.96893,	1.47351,	7.54063,	13.3153,	0.699266) 
 b.b = VectorD(4.87956,	7.82462,	-3.65403,	-2.33297,	-4.80362,	-3.28498,	-3.29150,	2.12052,	1.35952,	-3.85564,	-0.285414,	-3.02737,	-7.26795,	-4.14612,	7.47966), b.w = 
MatrixD(6.04027,
 	3.11309,
 	3.87696,
 	1.08163,
 	5.33247,
 	3.70417,
 	3.56827,
 	2.57951,
 	4.19067,
 	3.87024,
 	3.27532,
 	3.36197,
 	6.11317,
 	3.08226,
 	3.72733) 
 b.b = VectorD(8.15866))
    ----------------------------------------------------------------------------
    fitMap     qof = 
		rSq 	 -> VectorD(0.893044) 
		rSqBar 	 -> VectorD(0.891099) 
		sst 	 -> VectorD(23819.0) 
		sse 	 -> VectorD(2547.59) 
		mse0 	 -> VectorD(6.49895) 
		rmse 	 -> VectorD(2.54930) 
		mae 	 -> VectorD(1.87964) 
		dfm 	 -> VectorD(7.00000) 
		df 	 -> VectorD(385.000) 
		fStat 	 -> VectorD(459.229) 
		aic 	 -> VectorD(-907.912) 
		bic 	 -> VectorD(-876.142) 
		mape 	 -> VectorD(8.46857) 
		smape 	 -> VectorD(8.07732) 

    ----------------------------------------------------------------------------
        
Run + title
--------------------
| Cross-Validation |
--------------------
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1578.4190600663471,300)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.53065,
 	4.98494,
 	3.01071,
 	2.79864,
 	4.68678,
 	3.33558,
 	4.05339,
 	5.51319,
 	3.61210,
 	3.68982,
 	2.74295,
 	2.84130,
 	3.71878,
 	2.24304,
 	5.56370) 
 b.b = VectorD(6.85167)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.891335,
 	0.889359,
 	4731.23,
 	514.120,
 	6.59128,
 	2.56735,
 	1.87136,
 	7.00000,
 	385.000,
 	451.143,
 	-168.447,
 	-149.593,
 	8.31141,
 	8.04655)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1578.4190600663471,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.53065,
 	4.98494,
 	3.01071,
 	2.79864,
 	4.68678,
 	3.33558,
 	4.05339,
 	5.51319,
 	3.61210,
 	3.68982,
 	2.74295,
 	2.84130,
 	3.71878,
 	2.24304,
 	5.56370) 
 b.b = VectorD(6.85167)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.861759,
 	0.859246,
 	4472.51,
 	618.284,
 	7.92671,
 	2.81544,
 	2.10507,
 	7.00000,
 	385.000,
 	342.857,
 	-177.229,
 	-158.375,
 	9.89119,
 	9.24157)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1578.4190600663471,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.53065,
 	4.98494,
 	3.01071,
 	2.79864,
 	4.68678,
 	3.33558,
 	4.05339,
 	5.51319,
 	3.61210,
 	3.68982,
 	2.74295,
 	2.84130,
 	3.71878,
 	2.24304,
 	5.56370) 
 b.b = VectorD(6.85167)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.889209,
 	0.887194,
 	4664.26,
 	516.760,
 	6.62513,
 	2.57393,
 	1.91720,
 	7.00000,
 	385.000,
 	441.428,
 	-168.669,
 	-149.816,
 	8.47356,
 	8.08200)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1578.4190600663471,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.53065,
 	4.98494,
 	3.01071,
 	2.79864,
 	4.68678,
 	3.33558,
 	4.05339,
 	5.51319,
 	3.61210,
 	3.68982,
 	2.74295,
 	2.84130,
 	3.71878,
 	2.24304,
 	5.56370) 
 b.b = VectorD(6.85167)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.877697,
 	0.875473,
 	3962.82,
 	484.665,
 	6.21365,
 	2.49272,
 	1.86600,
 	7.00000,
 	385.000,
 	394.703,
 	-165.963,
 	-147.110,
 	8.81550,
 	8.30325)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1578.4190600663471,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.53065,
 	4.98494,
 	3.01071,
 	2.79864,
 	4.68678,
 	3.33558,
 	4.05339,
 	5.51319,
 	3.61210,
 	3.68982,
 	2.74295,
 	2.84130,
 	3.71878,
 	2.24304,
 	5.56370) 
 b.b = VectorD(6.85167)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.927598,
 	0.926282,
 	5671.58,
 	410.634,
 	5.26453,
 	2.29446,
 	1.65988,
 	7.00000,
 	385.000,
 	704.648,
 	-159.722,
 	-140.868,
 	6.91598,
 	6.76014)
-----------------------------------------------
| showQofStatTable: Statistical Table for QoF |
-----------------------------------------------
|        name |   num |        min |        max |       mean |      stdev |   interval |
----------------------------------------------------------------------------------------
|         rSq |     5 |      0.862 |      0.928 |      0.890 |      0.024 |      0.030 |
|      rSqBar |     5 |      0.859 |      0.926 |      0.888 |      0.025 |      0.031 |
|         sst |     5 |   3962.818 |   5671.580 |   4700.481 |    620.767 |    770.935 |
|         sse |     5 |    410.634 |    618.284 |    508.892 |     74.662 |     92.723 |
|        mse0 |     5 |      5.265 |      7.927 |      6.524 |      0.957 |      1.189 |
|        rmse |     5 |      2.294 |      2.815 |      2.549 |      0.187 |      0.232 |
|         mae |     5 |      1.660 |      2.105 |      1.884 |      0.159 |      0.197 |
|         dfm |     5 |      7.000 |      7.000 |      7.000 |      0.000 |      0.000 |
|          df |     5 |    385.000 |    385.000 |    385.000 |      0.000 |      0.000 |
|       fStat |     5 |    342.857 |    704.648 |    466.956 |    139.660 |    173.445 |
|         aic |     5 |   -177.229 |   -159.722 |   -168.006 |      6.295 |      7.817 |
|         bic |     5 |   -158.375 |   -140.868 |   -149.152 |      6.295 |      7.817 |
|        mape |     5 |      6.916 |      9.891 |      8.482 |      1.070 |      1.329 |
|       smape |     5 |      6.760 |      9.242 |      8.087 |      0.886 |      1.101 |
----------------------------------------------------------------------------------------
----------------------------------------
| Feature Selection Technique: Forward |
----------------------------------------
-------------------------------------------------------------------------------------
| forwardSelAll: (l = 0) INITIAL variable (0, intercept) => cols = LinkedHashSet(0) |
-------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (8864.176661154683,261)
optimize3: bSize = 20, nB = 19
ending epoch = (7441.182637744446,20)
optimize3: bSize = 20, nB = 19
ending epoch = (7544.326707812347,400)
optimize3: bSize = 20, nB = 19
ending epoch = (6744.250372674193,400)
optimize3: bSize = 20, nB = 19
ending epoch = (18777.361189177238,400)
optimize3: bSize = 20, nB = 19
ending epoch = (14796.766279148684,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (5448.997253269805,64)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.20766,
 	3.41444,
 	4.70732,
 	7.46363,
 	5.42898) 
 b.b = VectorD(8.78411)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.725928,
 	0.724523,
 	4731.23,
 	1296.70,
 	16.6243,
 	4.07729,
 	2.83884,
 	2.00000,
 	390.000,
 	516.493,
 	-214.322,
 	-207.252,
 	11.8965,
 	11.9115)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (5448.997253269805,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.20766,
 	3.41444,
 	4.70732,
 	7.46363,
 	5.42898) 
 b.b = VectorD(8.66108)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.730130,
 	0.728746,
 	4472.51,
 	1207.00,
 	15.4743,
 	3.93374,
 	3.12870,
 	2.00000,
 	390.000,
 	527.569,
 	-211.712,
 	-204.642,
 	13.6902,
 	13.4269)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (4941.388662422469,223)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(7.36076,
 	3.25886,
 	4.20193,
 	8.04209,
 	5.38774) 
 b.b = VectorD(7.44652)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.612444,
 	0.610456,
 	4664.26,
 	1807.66,
 	23.1752,
 	4.81406,
 	3.57272,
 	2.00000,
 	390.000,
 	308.152,
 	-229.192,
 	-222.121,
 	15.0722,
 	14.2373)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (4941.388662422469,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(7.36076,
 	3.25886,
 	4.20193,
 	8.04209,
 	5.38774) 
 b.b = VectorD(7.44038)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.715125,
 	0.713664,
 	3962.82,
 	1128.91,
 	14.4732,
 	3.80436,
 	3.02305,
 	2.00000,
 	390.000,
 	489.511,
 	-209.439,
 	-202.369,
 	13.6890,
 	13.1470)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (5288.598595957268,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.71557,
 	3.02898,
 	4.65591,
 	9.89440,
 	4.90760) 
 b.b = VectorD(7.40252)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.726867,
 	0.725466,
 	5671.58,
 	1549.10,
 	19.8602,
 	4.45648,
 	2.93265,
 	2.00000,
 	390.000,
 	518.937,
 	-221.667,
 	-214.597,
 	10.8813,
 	11.3379)
------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 1) ADD variable (4, weight) => cols = LinkedHashSet(0, 4) @ 0.7154020684907016 |
------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (6396.841213468612,400)
optimize3: bSize = 20, nB = 19
ending epoch = (6431.0888643561,400)
optimize3: bSize = 20, nB = 19
ending epoch = (5799.280608683065,193)
optimize3: bSize = 20, nB = 19
ending epoch = (6377.497254616888,400)
optimize3: bSize = 20, nB = 19
ending epoch = (2991.470374241013,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2363.585079746655,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.02535,
 	3.94809,
 	6.17709,
 	3.95440,
 	6.26844,
 	2.63636,
 	2.28871) 
 b.b = VectorD(8.07698)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.868072,
 	0.867055,
 	4731.23,
 	624.183,
 	8.00234,
 	2.82884,
 	1.90535,
 	3.00000,
 	389.000,
 	853.192,
 	-183.833,
 	-174.406,
 	8.12732,
 	8.15982)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2308.7321452987458,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.43998,
 	4.54893,
 	7.01766,
 	3.24419,
 	6.27373,
 	2.37835,
 	3.93636) 
 b.b = VectorD(8.65049)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.870402,
 	0.869403,
 	4472.51,
 	579.629,
 	7.43114,
 	2.72601,
 	2.12985,
 	3.00000,
 	389.000,
 	870.864,
 	-180.911,
 	-171.485,
 	9.99516,
 	9.49958)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2232.1275473152396,50)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.52740,
 	4.45412,
 	6.48077,
 	3.59992,
 	6.43994,
 	2.72663,
 	4.20071) 
 b.b = VectorD(8.53330)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.858623,
 	0.857533,
 	4664.26,
 	659.419,
 	8.45409,
 	2.90759,
 	2.12153,
 	3.00000,
 	389.000,
 	787.502,
 	-186.144,
 	-176.717,
 	9.06831,
 	8.87252)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2232.1275473152396,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.52740,
 	4.45412,
 	6.48077,
 	3.59992,
 	6.43994,
 	2.72663,
 	4.20071) 
 b.b = VectorD(8.44058)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.885238,
 	0.884353,
 	3962.82,
 	454.782,
 	5.83054,
 	2.41465,
 	1.83435,
 	3.00000,
 	389.000,
 	1000.21,
 	-172.724,
 	-163.297,
 	8.44207,
 	8.20248)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2116.0708250432976,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(7.05331,
 	5.00122,
 	5.71745,
 	3.26632,
 	6.58322,
 	3.76282,
 	7.44001) 
 b.b = VectorD(7.42030)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.874084,
 	0.873113,
 	5671.58,
 	714.140,
 	9.15565,
 	3.02583,
 	2.19879,
 	3.00000,
 	389.000,
 	900.124,
 	-189.733,
 	-180.306,
 	8.57835,
 	8.68245)
------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 2) ADD variable (6, modelyear) => cols = LinkedHashSet(0, 4, 6) @ 0.8734396210433315 |
------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (3126.956965944485,400)
optimize3: bSize = 20, nB = 19
ending epoch = (2895.716040975786,400)
optimize3: bSize = 20, nB = 19
ending epoch = (2822.0342323520977,400)
optimize3: bSize = 20, nB = 19
ending epoch = (2769.9678823367462,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2038.6753883305284,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.43037,
 	3.50904,
 	5.78774,
 	6.83039,
 	8.82362,
 	4.43231,
 	4.36432,
 	7.10755,
 	5.15275) 
 b.b = VectorD(6.69277)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.881617,
 	0.880396,
 	4731.23,
 	560.099,
 	7.18076,
 	2.67969,
 	1.83418,
 	4.00000,
 	388.000,
 	722.372,
 	-177.594,
 	-165.811,
 	7.64921,
 	7.68569)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1854.7500409295708,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.97545,
 	3.51530,
 	7.10462,
 	6.35446,
 	9.93387,
 	5.15228,
 	5.07041,
 	8.00828,
 	4.91870) 
 b.b = VectorD(5.06024)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.851364,
 	0.849832,
 	4472.51,
 	664.777,
 	8.52278,
 	2.91938,
 	2.26500,
 	4.00000,
 	388.000,
 	555.601,
 	-185.184,
 	-173.401,
 	10.2039,
 	9.71565)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1846.5569035636101,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(4.62747,
 	3.93829,
 	6.12592,
 	7.88799,
 	11.1880,
 	6.06791,
 	4.85614,
 	7.20567,
 	5.05360) 
 b.b = VectorD(5.92387)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.873500,
 	0.872196,
 	4664.26,
 	590.027,
 	7.56445,
 	2.75035,
 	1.90450,
 	4.00000,
 	388.000,
 	669.801,
 	-179.764,
 	-167.981,
 	8.00043,
 	7.86627)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1855.9776271367575,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(4.34022,
 	3.29357,
 	7.11786,
 	7.14583,
 	10.4871,
 	7.14102,
 	5.57635,
 	7.72929,
 	2.90334) 
 b.b = VectorD(5.18294)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.861108,
 	0.859676,
 	3962.82,
 	550.406,
 	7.05648,
 	2.65640,
 	1.96476,
 	4.00000,
 	388.000,
 	601.382,
 	-176.892,
 	-165.108,
 	9.20261,
 	8.74030)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1840.0686696253606,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(4.43501,
 	3.38495,
 	5.85865,
 	6.83429,
 	12.4801,
 	7.96200,
 	5.97135,
 	7.47289,
 	5.20282) 
 b.b = VectorD(5.41955)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.898454,
 	0.897407,
 	5671.58,
 	575.927,
 	7.38369,
 	2.71729,
 	1.99499,
 	4.00000,
 	388.000,
 	858.230,
 	-178.742,
 	-166.958,
 	7.88440,
 	7.96626)
------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 3) ADD variable (5, acceleration) => cols = LinkedHashSet(0, 4, 6, 5) @ 0.8825087107121291 |
------------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (2720.7564752963517,400)
optimize3: bSize = 20, nB = 19
ending epoch = (2674.464120735081,400)
optimize3: bSize = 20, nB = 19
ending epoch = (2600.287269964567,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1900.3276825723287,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(4.58844,
 	2.45883,
 	4.16579,
 	3.29783,
 	9.99576,
 	3.48194,
 	5.28334,
 	6.19991,
 	6.67622,
 	3.78314,
 	6.58155) 
 b.b = VectorD(6.26480)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.878230,
 	0.876657,
 	4731.23,
 	576.120,
 	7.38616,
 	2.71775,
 	1.90556,
 	5.00000,
 	387.000,
 	558.227,
 	-177.047,
 	-162.907,
 	7.96950,
 	7.94698)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1758.1426314363468,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(4.47175,
 	4.79001,
 	3.65114,
 	4.55539,
 	11.1562,
 	3.35869,
 	5.16601,
 	5.25207,
 	7.51223,
 	3.69950,
 	7.05371) 
 b.b = VectorD(5.56065)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.859012,
 	0.857191,
 	4472.51,
 	630.570,
 	8.08423,
 	2.84328,
 	2.25119,
 	5.00000,
 	387.000,
 	471.584,
 	-181.276,
 	-167.135,
 	10.1705,
 	9.95061)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1731.6453949402182,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(4.47417,
 	4.78320,
 	3.64100,
 	4.57114,
 	11.1563,
 	3.34295,
 	5.16819,
 	5.26313,
 	7.50612,
 	3.70240,
 	7.03783) 
 b.b = VectorD(5.59017)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.893371,
 	0.891993,
 	4664.26,
 	497.347,
 	6.37625,
 	2.52512,
 	1.78024,
 	5.00000,
 	387.000,
 	648.478,
 	-170.930,
 	-156.789,
 	7.59310,
 	7.44998)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1731.6453949402182,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(4.47417,
 	4.78320,
 	3.64100,
 	4.57114,
 	11.1563,
 	3.34295,
 	5.16819,
 	5.26313,
 	7.50612,
 	3.70240,
 	7.03783) 
 b.b = VectorD(5.58909)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.896023,
 	0.894679,
 	3962.82,
 	412.043,
 	5.28261,
 	2.29839,
 	1.70988,
 	5.00000,
 	387.000,
 	666.993,
 	-164.305,
 	-150.165,
 	7.88718,
 	7.62561)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1731.6453949402182,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(4.47417,
 	4.78320,
 	3.64100,
 	4.57114,
 	11.1563,
 	3.34295,
 	5.16819,
 	5.26313,
 	7.50612,
 	3.70240,
 	7.03783) 
 b.b = VectorD(5.49811)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.927506,
 	0.926570,
 	5671.58,
 	411.155,
 	5.27121,
 	2.29591,
 	1.77140,
 	5.00000,
 	387.000,
 	990.277,
 	-164.236,
 	-150.096,
 	7.23700,
 	7.28614)
-------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 4) ADD variable (3, horsepower) => cols = LinkedHashSet(0, 4, 6, 5, 3) @ 0.8894209062144443 |
-------------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (2556.713212762116,400)
optimize3: bSize = 20, nB = 19
ending epoch = (2504.1843254855257,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1788.0650220436996,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(8.78973,
 	3.96305,
 	2.78324,
 	2.46659,
 	4.93878,
 	3.72446,
 	7.87038,
 	5.81257,
 	4.03848,
 	5.26400,
 	3.21964,
 	5.80196,
 	3.09865) 
 b.b = VectorD(5.32479)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.870185,
 	0.868167,
 	4731.23,
 	614.186,
 	7.87419,
 	2.80610,
 	1.87197,
 	6.00000,
 	386.000,
 	431.243,
 	-178.111,
 	-161.614,
 	7.75954,
 	7.83128)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1701.4649733537187,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(9.30228,
 	4.40926,
 	3.62542,
 	2.23706,
 	4.87954,
 	7.21896,
 	7.62458,
 	4.05185,
 	4.03939,
 	5.14968,
 	3.92389,
 	4.86243,
 	4.72488) 
 b.b = VectorD(4.68801)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.868143,
 	0.866094,
 	4472.51,
 	589.731,
 	7.56065,
 	2.74966,
 	2.10264,
 	6.00000,
 	386.000,
 	423.570,
 	-176.189,
 	-159.692,
 	9.40682,
 	9.25611)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1653.6420969478331,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(11.0917,
 	4.13474,
 	4.13880,
 	2.21919,
 	4.89978,
 	5.23193,
 	8.02366,
 	4.32656,
 	3.58507,
 	5.21115,
 	4.71656,
 	6.02972,
 	4.31748) 
 b.b = VectorD(5.26803)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.889763,
 	0.888049,
 	4664.26,
 	514.174,
 	6.59198,
 	2.56748,
 	1.89812,
 	6.00000,
 	386.000,
 	519.257,
 	-170.250,
 	-153.754,
 	8.27529,
 	8.06684)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1559.896878569454,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(12.7807,
 	6.09262,
 	4.12745,
 	2.04493,
 	4.88754,
 	6.71963,
 	7.68707,
 	4.42081,
 	2.43432,
 	4.98415,
 	6.37488,
 	5.21601,
 	4.81694) 
 b.b = VectorD(4.52085)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.866956,
 	0.864888,
 	3962.82,
 	527.231,
 	6.75937,
 	2.59988,
 	1.81700,
 	6.00000,
 	386.000,
 	419.215,
 	-171.277,
 	-154.780,
 	8.34897,
 	7.97110)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1570.4165297438337,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(13.3573,
 	6.50923,
 	4.88381,
 	2.22827,
 	4.86408,
 	5.80329,
 	7.68236,
 	4.41371,
 	2.73805,
 	3.86018,
 	6.99551,
 	5.35705,
 	4.80456) 
 b.b = VectorD(4.10521)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.914322,
 	0.912990,
 	5671.58,
 	485.929,
 	6.22986,
 	2.49597,
 	1.88907,
 	6.00000,
 	386.000,
 	686.541,
 	-168.030,
 	-151.534,
 	7.45661,
 	7.53806)
------------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 5) ADD variable (2, displacement) => cols = LinkedHashSet(0, 4, 6, 5, 3, 2) @ 0.8932318666735573 |
------------------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (2564.6775282597378,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1739.8597903612895,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(2.17711,
 	3.31493,
 	6.40421,
 	5.61861,
 	3.30817,
 	2.74224,
 	3.58884,
 	7.68763,
 	4.52771,
 	8.64231,
 	3.76234,
 	2.84385,
 	2.40142,
 	4.69765,
 	3.64170) 
 b.b = VectorD(3.80909)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.870162,
 	0.867801,
 	4731.23,
 	614.296,
 	7.87559,
 	2.80635,
 	1.85209,
 	7.00000,
 	385.000,
 	368.603,
 	-176.225,
 	-157.371,
 	7.57278,
 	7.68223)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1550.5234502206308,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.15173,
 	4.73738,
 	5.21684,
 	5.76795,
 	4.49071,
 	3.75291,
 	0.859202,
 	6.81354,
 	5.32979,
 	8.21841,
 	4.12715,
 	2.74570,
 	2.38142,
 	4.60898,
 	4.11484) 
 b.b = VectorD(1.59163)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.870139,
 	0.867778,
 	4472.51,
 	580.803,
 	7.44620,
 	2.72877,
 	2.04690,
 	7.00000,
 	385.000,
 	368.531,
 	-173.563,
 	-154.710,
 	9.23947,
 	8.91199)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1495.5009741373858,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(7.06604,
 	5.13264,
 	4.78391,
 	5.43639,
 	6.34121,
 	4.25312,
 	1.69043,
 	7.76382,
 	5.16565,
 	9.51253,
 	5.10187,
 	2.71386,
 	2.26593,
 	4.74731,
 	4.12481) 
 b.b = VectorD(-1.58426)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.905476,
 	0.903757,
 	4664.26,
 	440.886,
 	5.65238,
 	2.37747,
 	1.69795,
 	7.00000,
 	385.000,
 	526.861,
 	-162.444,
 	-143.591,
 	6.95432,
 	6.89362)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1475.386042262786,166)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.73383,
 	4.61700,
 	4.81752,
 	6.10549,
 	7.26139,
 	4.79437,
 	1.22009,
 	7.45093,
 	5.54396,
 	8.99238,
 	4.72293,
 	2.67480,
 	2.19479,
 	4.72760,
 	4.35213) 
 b.b = VectorD(-2.08959)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.901379,
 	0.899586,
 	3962.82,
 	390.817,
 	5.01047,
 	2.23841,
 	1.63694,
 	7.00000,
 	385.000,
 	502.691,
 	-158.465,
 	-139.612,
 	7.52551,
 	7.27694)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1321.9394152086356,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(9.86434,
 	3.83158,
 	4.24249,
 	6.91172,
 	7.53472,
 	6.41787,
 	1.02600,
 	7.45201,
 	5.17477,
 	11.2508,
 	4.70642,
 	2.67285,
 	2.39942,
 	4.77969,
 	4.55161) 
 b.b = VectorD(-4.80570)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.911579,
 	0.909971,
 	5671.58,
 	501.488,
 	6.42933,
 	2.53561,
 	1.87089,
 	7.00000,
 	385.000,
 	567.023,
 	-167.260,
 	-148.407,
 	7.32490,
 	7.37786)
------------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 6) ADD variable (1, cylinders) => cols = LinkedHashSet(0, 4, 6, 5, 3, 2, 1) @ 0.8903686659921373 |
------------------------------------------------------------------------------------------------------------------------
k = 7, n = 7
Run + title
x-axis: minX = 0.0, maxX = 6.0
y-axis: minY = 70.0, maxY = 90.0
rSq = 
MatrixD(71.6854,	71.5402,	70.2099,
 	87.4408,	87.3440,	87.1284,
 	88.3708,	88.2509,	87.3208,
 	89.0831,	88.9421,	89.0828,
 	89.4866,	89.3232,	88.1874,
 	89.2326,	89.0369,	89.1747)
