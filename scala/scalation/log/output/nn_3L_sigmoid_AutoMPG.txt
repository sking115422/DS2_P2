readFileIntoArray: C:\Users\spenc\Desktop\UGA_projects\data_science\DS2_P2\scala\scalation\data\auto_mpg_fixed_cleaned.csv
load: read 99 data rows so far ...
load: read 199 data rows so far ...
load: read 299 data rows so far ...
load: read in an 392-by-8 matrix from auto_mpg_fixed_cleaned.csv
ox_fname = Array(intercept, cylinders, displacement, horsepower, weight, acceleration, modelyear)
-----------------------------------------
| NeuralNet_3L for AutoMPG with sigmoid |
-----------------------------------------
 scaled: x = 
MatrixD(1.00000,	1.00000,	0.617571,	0.456522,	0.536150,	0.238095,	0.00000,
 	1.00000,	1.00000,	0.728682,	0.646739,	0.589736,	0.208333,	0.00000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.516870,	0.178571,	0.00000,
 	1.00000,	1.00000,	0.609819,	0.565217,	0.516019,	0.238095,	0.00000,
 	1.00000,	1.00000,	0.604651,	0.510870,	0.520556,	0.148810,	0.00000,
 	1.00000,	1.00000,	0.932817,	0.826087,	0.773462,	0.119048,	0.00000,
 	1.00000,	1.00000,	0.997416,	0.945652,	0.777148,	0.0595238,	0.00000,
 	1.00000,	1.00000,	0.961240,	0.918478,	0.765240,	0.0297619,	0.00000,
 	1.00000,	1.00000,	1.00000,	0.972826,	0.797278,	0.119048,	0.00000,
 	1.00000,	1.00000,	0.832041,	0.782609,	0.634250,	0.0297619,	0.00000,
 	1.00000,	1.00000,	0.813953,	0.673913,	0.552878,	0.119048,	0.00000,
 	1.00000,	1.00000,	0.702842,	0.619565,	0.565920,	0.00000,	0.00000,
 	1.00000,	1.00000,	0.857881,	0.565217,	0.609016,	0.0892857,	0.00000,
 	1.00000,	1.00000,	1.00000,	0.972826,	0.417635,	0.119048,	0.00000,
 	1.00000,	0.200000,	0.116279,	0.266304,	0.215197,	0.416667,	0.00000,
 	1.00000,	0.600000,	0.335917,	0.266304,	0.345903,	0.446429,	0.00000,
 	1.00000,	0.600000,	0.338501,	0.277174,	0.329175,	0.446429,	0.00000,
 	1.00000,	0.600000,	0.341085,	0.211957,	0.276155,	0.476190,	0.00000,
 	1.00000,	0.200000,	0.0749354,	0.228261,	0.146583,	0.386905,	0.00000,
 	1.00000,	0.200000,	0.0749354,	0.00000,	0.0629430,	0.744048,	0.00000,
 	1.00000,	0.200000,	0.108527,	0.222826,	0.300255,	0.565476,	0.00000,
 	1.00000,	0.200000,	0.100775,	0.239130,	0.231642,	0.386905,	0.00000,
 	1.00000,	0.200000,	0.0930233,	0.266304,	0.216048,	0.565476,	0.00000,
 	1.00000,	0.200000,	0.136951,	0.364130,	0.176070,	0.267857,	0.00000,
 	1.00000,	0.600000,	0.338501,	0.239130,	0.293451,	0.416667,	0.00000,
 	1.00000,	1.00000,	0.754522,	0.918478,	0.851148,	0.357143,	0.00000,
 	1.00000,	1.00000,	0.617571,	0.836957,	0.783385,	0.416667,	0.00000,
 	1.00000,	1.00000,	0.645995,	0.891304,	0.785086,	0.327381,	0.00000,
 	1.00000,	1.00000,	0.609819,	0.798913,	0.884321,	0.625000,	0.00000,
 	1.00000,	0.200000,	0.0749354,	0.228261,	0.146583,	0.386905,	0.0833333,
 	1.00000,	0.200000,	0.186047,	0.239130,	0.184576,	0.446429,	0.0833333,
 	1.00000,	0.200000,	0.116279,	0.266304,	0.174369,	0.357143,	0.0833333,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.289481,	0.297619,	0.0833333,
 	1.00000,	0.600000,	0.405685,	0.320652,	0.517720,	0.446429,	0.0833333,
 	1.00000,	0.600000,	0.470284,	0.293478,	0.486532,	0.446429,	0.0833333,
 	1.00000,	0.600000,	0.470284,	0.228261,	0.478877,	0.446429,	0.0833333,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.474908,	0.446429,	0.0833333,
 	1.00000,	1.00000,	0.728682,	0.646739,	0.736036,	0.238095,	0.0833333,
 	1.00000,	1.00000,	0.857881,	0.701087,	0.808336,	0.208333,	0.0833333,
 	1.00000,	1.00000,	0.731266,	0.581522,	0.720442,	0.327381,	0.0833333,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.703998,	0.297619,	0.0833333,
 	1.00000,	1.00000,	0.813953,	0.728261,	0.947547,	0.208333,	0.0833333,
 	1.00000,	1.00000,	0.857881,	0.673913,	0.888290,	0.238095,	0.0833333,
 	1.00000,	1.00000,	0.857881,	0.701087,	1.00000,	0.238095,	0.0833333,
 	1.00000,	0.600000,	0.490956,	0.347826,	0.382478,	0.327381,	0.0833333,
 	1.00000,	0.200000,	0.186047,	0.141304,	0.225404,	0.654762,	0.0833333,
 	1.00000,	0.600000,	0.470284,	0.293478,	0.473207,	0.416667,	0.0833333,
 	1.00000,	0.600000,	0.470284,	0.228261,	0.432662,	0.386905,	0.0833333,
 	1.00000,	0.200000,	0.139535,	0.217391,	0.172101,	0.357143,	0.0833333,
 	1.00000,	0.200000,	0.124031,	0.239130,	0.144599,	0.357143,	0.0833333,
 	1.00000,	0.200000,	0.0284238,	0.130435,	0.130706,	0.684524,	0.0833333,
 	1.00000,	0.200000,	0.0516796,	0.163043,	0.128154,	0.386905,	0.0833333,
 	1.00000,	0.200000,	0.00775194,	0.103261,	0.0453643,	0.654762,	0.0833333,
 	1.00000,	0.200000,	0.0103359,	0.125000,	0.00000,	0.595238,	0.0833333,
 	1.00000,	0.200000,	0.0749354,	0.0760870,	0.0626595,	0.654762,	0.0833333,
 	1.00000,	0.200000,	0.0594315,	0.130435,	0.0969663,	0.744048,	0.0833333,
 	1.00000,	0.200000,	0.116279,	0.266304,	0.188546,	0.446429,	0.166667,
 	1.00000,	0.200000,	0.0762274,	0.184783,	0.145449,	0.535714,	0.166667,
 	1.00000,	0.200000,	0.0749354,	0.0434783,	0.181741,	0.922619,	0.166667,
 	1.00000,	0.200000,	0.186047,	0.239130,	0.225404,	0.684524,	0.166667,
 	1.00000,	0.200000,	0.139535,	0.217391,	0.173802,	0.505952,	0.166667,
 	1.00000,	1.00000,	0.728682,	0.646739,	0.754466,	0.238095,	0.166667,
 	1.00000,	1.00000,	0.857881,	0.701087,	0.785937,	0.238095,	0.166667,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.715055,	0.327381,	0.166667,
 	1.00000,	1.00000,	0.731266,	0.581522,	0.713354,	0.297619,	0.166667,
 	1.00000,	1.00000,	0.609819,	0.565217,	0.583782,	0.208333,	0.166667,
 	1.00000,	1.00000,	0.932817,	0.880435,	0.856252,	0.178571,	0.166667,
 	1.00000,	1.00000,	0.728682,	0.592391,	0.819110,	0.327381,	0.166667,
 	1.00000,	1.00000,	0.728682,	0.619565,	0.806067,	0.327381,	0.166667,
 	1.00000,	1.00000,	0.857881,	0.782609,	0.796428,	0.267857,	0.166667,
 	1.00000,	0.00000,	0.00516796,	0.277174,	0.203289,	0.327381,	0.166667,
 	1.00000,	1.00000,	0.609819,	0.565217,	0.646158,	0.267857,	0.166667,
 	1.00000,	1.00000,	0.617571,	0.456522,	0.704565,	0.357143,	0.166667,
 	1.00000,	1.00000,	0.604651,	0.510870,	0.760136,	0.476190,	0.166667,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.698611,	0.357143,	0.166667,
 	1.00000,	0.200000,	0.136951,	0.358696,	0.374256,	0.386905,	0.166667,
 	1.00000,	0.200000,	0.136951,	0.163043,	0.254607,	0.595238,	0.166667,
 	1.00000,	0.200000,	0.134367,	0.222826,	0.387298,	0.684524,	0.166667,
 	1.00000,	0.200000,	0.0723514,	0.125000,	0.163312,	0.595238,	0.166667,
 	1.00000,	0.200000,	0.139535,	0.217391,	0.221718,	0.476190,	0.166667,
 	1.00000,	0.200000,	0.0749354,	0.250000,	0.191381,	0.535714,	0.166667,
 	1.00000,	0.200000,	0.134367,	0.277174,	0.253190,	0.386905,	0.166667,
 	1.00000,	0.200000,	0.0775194,	0.184783,	0.156223,	0.416667,	0.166667,
 	1.00000,	0.200000,	0.0749354,	0.228261,	0.138078,	0.505952,	0.166667,
 	1.00000,	1.00000,	0.728682,	0.701087,	0.705132,	0.297619,	0.250000,
 	1.00000,	1.00000,	0.609819,	0.565217,	0.583782,	0.208333,	0.250000,
 	1.00000,	1.00000,	0.728682,	0.538043,	0.673377,	0.297619,	0.250000,
 	1.00000,	1.00000,	0.604651,	0.494565,	0.688687,	0.386905,	0.250000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.613553,	0.267857,	0.250000,
 	1.00000,	1.00000,	0.932817,	0.826087,	0.946697,	0.208333,	0.250000,
 	1.00000,	1.00000,	0.857881,	0.565217,	0.808336,	0.238095,	0.250000,
 	1.00000,	1.00000,	0.731266,	0.608696,	0.779699,	0.297619,	0.250000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.743975,	0.386905,	0.250000,
 	1.00000,	1.00000,	0.961240,	0.918478,	0.885172,	0.178571,	0.250000,
 	1.00000,	1.00000,	1.00000,	0.972826,	0.946413,	0.178571,	0.250000,
 	1.00000,	1.00000,	0.754522,	0.701087,	0.626028,	0.178571,	0.250000,
 	1.00000,	0.600000,	0.405685,	0.320652,	0.427559,	0.505952,	0.250000,
 	1.00000,	0.600000,	0.470284,	0.293478,	0.472073,	0.595238,	0.250000,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.377658,	0.476190,	0.250000,
 	1.00000,	0.600000,	0.470284,	0.228261,	0.399206,	0.505952,	0.250000,
 	1.00000,	0.600000,	0.335917,	0.266304,	0.366033,	0.476190,	0.250000,
 	1.00000,	0.200000,	0.0749354,	0.00000,	0.0955486,	0.773810,	0.250000,
 	1.00000,	1.00000,	0.857881,	0.565217,	0.959456,	0.357143,	0.250000,
 	1.00000,	1.00000,	0.857881,	0.657609,	0.933655,	0.267857,	0.250000,
 	1.00000,	1.00000,	0.754522,	0.673913,	0.862206,	0.297619,	0.250000,
 	1.00000,	1.00000,	0.728682,	0.728261,	0.818259,	0.267857,	0.250000,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.333428,	0.416667,	0.250000,
 	1.00000,	0.200000,	0.0749354,	0.228261,	0.188829,	0.654762,	0.250000,
 	1.00000,	0.200000,	0.186047,	0.141304,	0.223419,	0.684524,	0.250000,
 	1.00000,	0.200000,	0.103359,	0.260870,	0.217182,	0.505952,	0.250000,
 	1.00000,	0.00000,	0.00516796,	0.239130,	0.144882,	0.327381,	0.250000,
 	1.00000,	0.200000,	0.139535,	0.211957,	0.197618,	0.625000,	0.250000,
 	1.00000,	0.600000,	0.224806,	0.331522,	0.243550,	0.357143,	0.250000,
 	1.00000,	0.200000,	0.0775194,	0.239130,	0.184860,	0.446429,	0.250000,
 	1.00000,	1.00000,	0.728682,	0.538043,	0.700028,	0.297619,	0.250000,
 	1.00000,	1.00000,	0.857881,	1.00000,	0.755600,	0.0892857,	0.250000,
 	1.00000,	0.200000,	0.00000,	0.0163043,	0.0720159,	0.684524,	0.250000,
 	1.00000,	0.200000,	0.124031,	0.157609,	0.154522,	0.446429,	0.250000,
 	1.00000,	0.200000,	0.118863,	0.244565,	0.274738,	0.357143,	0.250000,
 	1.00000,	0.200000,	0.136951,	0.358696,	0.355826,	0.446429,	0.250000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.506379,	0.178571,	0.250000,
 	1.00000,	0.200000,	0.136951,	0.347826,	0.296853,	0.357143,	0.250000,
 	1.00000,	0.600000,	0.227390,	0.413043,	0.338531,	0.327381,	0.250000,
 	1.00000,	1.00000,	0.728682,	0.728261,	0.581514,	0.178571,	0.250000,
 	1.00000,	0.600000,	0.335917,	0.266304,	0.422172,	0.505952,	0.333333,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.365183,	0.476190,	0.333333,
 	1.00000,	0.600000,	0.470284,	0.293478,	0.488517,	0.535714,	0.333333,
 	1.00000,	0.200000,	0.0284238,	0.114130,	0.0955486,	0.654762,	0.333333,
 	1.00000,	0.200000,	0.139535,	0.184783,	0.237596,	0.505952,	0.333333,
 	1.00000,	0.200000,	0.00775194,	0.103261,	0.0632265,	0.773810,	0.333333,
 	1.00000,	0.200000,	0.186047,	0.157609,	0.263397,	0.535714,	0.333333,
 	1.00000,	0.600000,	0.470284,	0.293478,	0.614687,	0.535714,	0.333333,
 	1.00000,	0.600000,	0.490956,	0.347826,	0.572441,	0.595238,	0.333333,
 	1.00000,	0.600000,	0.405685,	0.320652,	0.567054,	0.505952,	0.333333,
 	1.00000,	1.00000,	0.604651,	0.510870,	0.716756,	0.357143,	0.333333,
 	1.00000,	1.00000,	0.728682,	0.565217,	0.874965,	0.386905,	0.333333,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.806351,	0.327381,	0.333333,
 	1.00000,	1.00000,	0.604651,	0.510870,	0.857669,	0.476190,	0.333333,
 	1.00000,	1.00000,	0.609819,	0.565217,	0.749646,	0.446429,	0.333333,
 	1.00000,	0.200000,	0.0775194,	0.201087,	0.171817,	0.505952,	0.333333,
 	1.00000,	0.200000,	0.0284238,	0.114130,	0.0992345,	0.446429,	0.333333,
 	1.00000,	0.200000,	0.0749354,	0.173913,	0.194783,	0.386905,	0.333333,
 	1.00000,	0.200000,	0.0206718,	0.0326087,	0.0102070,	0.505952,	0.333333,
 	1.00000,	0.200000,	0.0387597,	0.0815217,	0.110576,	0.654762,	0.333333,
 	1.00000,	0.200000,	0.0568475,	0.157609,	0.145166,	0.386905,	0.333333,
 	1.00000,	0.200000,	0.0568475,	0.157609,	0.140346,	0.446429,	0.333333,
 	1.00000,	0.200000,	0.124031,	0.157609,	0.179473,	0.357143,	0.333333,
 	1.00000,	0.200000,	0.134367,	0.277174,	0.248370,	0.416667,	0.333333,
 	1.00000,	0.200000,	0.103359,	0.255435,	0.220584,	0.446429,	0.333333,
 	1.00000,	0.200000,	0.0284238,	0.114130,	0.109725,	0.476190,	0.333333,
 	1.00000,	0.600000,	0.405685,	0.266304,	0.468103,	0.476190,	0.416667,
 	1.00000,	0.600000,	0.470284,	0.320652,	0.523391,	0.476190,	0.416667,
 	1.00000,	0.600000,	0.470284,	0.141304,	0.515736,	0.773810,	0.416667,
 	1.00000,	0.600000,	0.470284,	0.141304,	0.438049,	0.684524,	0.416667,
 	1.00000,	1.00000,	0.857881,	0.673913,	0.866175,	0.208333,	0.416667,
 	1.00000,	1.00000,	0.728682,	0.538043,	0.801531,	0.357143,	0.416667,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.817976,	0.386905,	0.416667,
 	1.00000,	1.00000,	0.731266,	0.554348,	0.863056,	0.327381,	0.416667,
 	1.00000,	0.600000,	0.421189,	0.347826,	0.650411,	0.773810,	0.416667,
 	1.00000,	0.600000,	0.470284,	0.320652,	0.647576,	0.625000,	0.416667,
 	1.00000,	0.600000,	0.490956,	0.347826,	0.600227,	0.654762,	0.416667,
 	1.00000,	0.600000,	0.405685,	0.266304,	0.615821,	0.654762,	0.416667,
 	1.00000,	0.600000,	0.421189,	0.347826,	0.404310,	0.416667,	0.416667,
 	1.00000,	1.00000,	0.501292,	0.347826,	0.455912,	0.327381,	0.416667,
 	1.00000,	1.00000,	0.604651,	0.451087,	0.441168,	0.238095,	0.416667,
 	1.00000,	0.200000,	0.0749354,	0.157609,	0.158208,	0.476190,	0.416667,
 	1.00000,	0.200000,	0.186047,	0.201087,	0.290899,	0.535714,	0.416667,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.368869,	0.476190,	0.416667,
 	1.00000,	0.200000,	0.186047,	0.173913,	0.277573,	0.625000,	0.416667,
 	1.00000,	0.200000,	0.170543,	0.271739,	0.308761,	0.327381,	0.416667,
 	1.00000,	0.200000,	0.0568475,	0.135870,	0.172952,	0.505952,	0.416667,
 	1.00000,	0.200000,	0.131783,	0.277174,	0.264247,	0.535714,	0.416667,
 	1.00000,	0.600000,	0.266150,	0.277174,	0.388716,	0.386905,	0.416667,
 	1.00000,	0.200000,	0.0568475,	0.130435,	0.0918628,	0.357143,	0.416667,
 	1.00000,	0.600000,	0.423773,	0.239130,	0.453076,	0.535714,	0.416667,
 	1.00000,	0.200000,	0.121447,	0.266304,	0.306493,	0.416667,	0.416667,
 	1.00000,	0.200000,	0.134367,	0.228261,	0.381060,	0.535714,	0.416667,
 	1.00000,	0.200000,	0.136951,	0.282609,	0.377658,	0.386905,	0.416667,
 	1.00000,	0.200000,	0.136951,	0.375000,	0.299972,	0.327381,	0.416667,
 	1.00000,	0.200000,	0.0594315,	0.0380435,	0.0516019,	0.565476,	0.416667,
 	1.00000,	0.200000,	0.100775,	0.217391,	0.241282,	0.446429,	0.500000,
 	1.00000,	0.200000,	0.124031,	0.190217,	0.172101,	0.529762,	0.500000,
 	1.00000,	0.200000,	0.186047,	0.250000,	0.271902,	0.410714,	0.500000,
 	1.00000,	0.200000,	0.0775194,	0.179348,	0.182024,	0.577381,	0.500000,
 	1.00000,	0.200000,	0.0852713,	0.201087,	0.166997,	0.434524,	0.500000,
 	1.00000,	1.00000,	0.612403,	0.510870,	0.737737,	0.297619,	0.500000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.730649,	0.297619,	0.500000,
 	1.00000,	1.00000,	0.609819,	0.402174,	0.666005,	0.351190,	0.500000,
 	1.00000,	1.00000,	0.731266,	0.576087,	0.737737,	0.285714,	0.500000,
 	1.00000,	0.600000,	0.405685,	0.293478,	0.459314,	0.440476,	0.500000,
 	1.00000,	0.600000,	0.470284,	0.320652,	0.493337,	0.386905,	0.500000,
 	1.00000,	0.600000,	0.341085,	0.190217,	0.396654,	0.571429,	0.500000,
 	1.00000,	0.600000,	0.423773,	0.239130,	0.417352,	0.571429,	0.500000,
 	1.00000,	0.200000,	0.0439276,	0.0326087,	0.119648,	0.845238,	0.500000,
 	1.00000,	0.200000,	0.0775194,	0.0760870,	0.156223,	0.839286,	0.500000,
 	1.00000,	0.200000,	0.0568475,	0.130435,	0.0918628,	0.369048,	0.500000,
 	1.00000,	0.200000,	0.0594315,	0.0380435,	0.0516019,	0.559524,	0.500000,
 	1.00000,	0.600000,	0.405685,	0.293478,	0.577828,	0.577381,	0.500000,
 	1.00000,	0.600000,	0.470284,	0.173913,	0.555997,	0.773810,	0.500000,
 	1.00000,	0.600000,	0.470284,	0.347826,	0.576127,	0.488095,	0.500000,
 	1.00000,	0.600000,	0.490956,	0.266304,	0.447973,	0.583333,	0.500000,
 	1.00000,	0.200000,	0.0749354,	0.135870,	0.0601077,	0.250000,	0.500000,
 	1.00000,	0.200000,	0.0439276,	0.130435,	0.106890,	0.535714,	0.500000,
 	1.00000,	0.200000,	0.0749354,	0.157609,	0.153672,	0.500000,	0.500000,
 	1.00000,	0.200000,	0.186047,	0.141304,	0.269918,	0.333333,	0.500000,
 	1.00000,	0.200000,	0.160207,	0.304348,	0.435781,	0.458333,	0.500000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.659768,	0.309524,	0.500000,
 	1.00000,	0.200000,	0.134367,	0.228261,	0.469804,	0.827381,	0.500000,
 	1.00000,	0.600000,	0.227390,	0.336957,	0.373405,	0.446429,	0.500000,
 	1.00000,	0.600000,	0.258398,	0.402174,	0.625744,	0.517857,	0.500000,
 	1.00000,	1.00000,	0.728682,	0.728261,	0.784519,	0.244048,	0.500000,
 	1.00000,	1.00000,	0.728682,	0.538043,	0.692373,	0.238095,	0.500000,
 	1.00000,	1.00000,	0.604651,	0.456522,	0.639921,	0.416667,	0.500000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.607315,	0.357143,	0.500000,
 	1.00000,	0.200000,	0.0775194,	0.119565,	0.122484,	0.625000,	0.583333,
 	1.00000,	0.200000,	0.111111,	0.184783,	0.153672,	0.404762,	0.583333,
 	1.00000,	0.200000,	0.0284238,	0.0652174,	0.0601077,	0.630952,	0.583333,
 	1.00000,	0.200000,	0.139535,	0.271739,	0.194783,	0.446429,	0.583333,
 	1.00000,	0.200000,	0.0439276,	0.130435,	0.0941310,	0.523810,	0.583333,
 	1.00000,	1.00000,	0.612403,	0.538043,	0.642756,	0.267857,	0.583333,
 	1.00000,	1.00000,	0.496124,	0.347826,	0.693791,	0.654762,	0.583333,
 	1.00000,	1.00000,	0.645995,	0.538043,	0.716473,	0.339286,	0.583333,
 	1.00000,	1.00000,	0.604651,	0.456522,	0.760420,	0.410714,	0.583333,
 	1.00000,	0.600000,	0.470284,	0.347826,	0.540686,	0.500000,	0.583333,
 	1.00000,	0.600000,	0.421189,	0.320652,	0.513751,	0.529762,	0.583333,
 	1.00000,	0.600000,	0.405685,	0.293478,	0.571874,	0.577381,	0.583333,
 	1.00000,	0.600000,	0.470284,	0.282609,	0.542104,	0.654762,	0.583333,
 	1.00000,	1.00000,	0.857881,	0.728261,	0.739155,	0.184524,	0.583333,
 	1.00000,	1.00000,	0.728682,	0.673913,	0.723561,	0.202381,	0.583333,
 	1.00000,	1.00000,	0.857881,	0.782609,	0.768925,	0.250000,	0.583333,
 	1.00000,	1.00000,	0.731266,	0.559783,	0.771761,	0.386905,	0.583333,
 	1.00000,	0.200000,	0.0749354,	0.173913,	0.0927134,	0.386905,	0.583333,
 	1.00000,	0.200000,	0.214470,	0.228261,	0.319535,	0.476190,	0.583333,
 	1.00000,	0.200000,	0.0749354,	0.157609,	0.184860,	0.607143,	0.583333,
 	1.00000,	0.200000,	0.186047,	0.233696,	0.323788,	0.464286,	0.583333,
 	1.00000,	0.200000,	0.0775194,	0.0923913,	0.124185,	0.535714,	0.583333,
 	1.00000,	0.200000,	0.0775194,	0.201087,	0.130990,	0.470238,	0.583333,
 	1.00000,	0.200000,	0.0749354,	0.114130,	0.105472,	0.500000,	0.583333,
 	1.00000,	0.200000,	0.0749354,	0.173913,	0.163595,	0.363095,	0.583333,
 	1.00000,	0.600000,	0.201550,	0.277174,	0.340800,	0.386905,	0.583333,
 	1.00000,	0.200000,	0.136951,	0.347826,	0.279841,	0.285714,	0.583333,
 	1.00000,	0.00000,	0.0310078,	0.347826,	0.313864,	0.327381,	0.583333,
 	1.00000,	0.200000,	0.0568475,	0.0108696,	0.105472,	0.803571,	0.666667,
 	1.00000,	0.200000,	0.0775194,	0.108696,	0.0530196,	0.380952,	0.666667,
 	1.00000,	0.200000,	0.0258398,	0.0326087,	0.105472,	0.678571,	0.666667,
 	1.00000,	0.200000,	0.0439276,	0.130435,	0.129572,	0.630952,	0.666667,
 	1.00000,	0.200000,	0.0594315,	0.0760870,	0.0530196,	0.500000,	0.666667,
 	1.00000,	1.00000,	0.496124,	0.347826,	0.496739,	0.446429,	0.666667,
 	1.00000,	1.00000,	0.645995,	0.510870,	0.601644,	0.309524,	0.666667,
 	1.00000,	1.00000,	0.604651,	0.505435,	0.554862,	0.285714,	0.666667,
 	1.00000,	0.600000,	0.421189,	0.320652,	0.544939,	0.666667,	0.666667,
 	1.00000,	0.600000,	0.341085,	0.266304,	0.437199,	0.607143,	0.666667,
 	1.00000,	0.600000,	0.341085,	0.211957,	0.383329,	0.464286,	0.666667,
 	1.00000,	0.200000,	0.186047,	0.228261,	0.313864,	0.440476,	0.666667,
 	1.00000,	0.600000,	0.405685,	0.293478,	0.515169,	0.547619,	0.666667,
 	1.00000,	0.600000,	0.423773,	0.239130,	0.452793,	0.547619,	0.666667,
 	1.00000,	0.600000,	0.421189,	0.320652,	0.500992,	0.464286,	0.666667,
 	1.00000,	0.600000,	0.341085,	0.211957,	0.413099,	0.517857,	0.666667,
 	1.00000,	0.600000,	0.405685,	0.347826,	0.569039,	0.636905,	0.666667,
 	1.00000,	0.600000,	0.490956,	0.402174,	0.509498,	0.422619,	0.666667,
 	1.00000,	1.00000,	0.612403,	0.538043,	0.513751,	0.309524,	0.666667,
 	1.00000,	0.600000,	0.421189,	0.646739,	0.519422,	0.321429,	0.666667,
 	1.00000,	1.00000,	0.604651,	0.505435,	0.451375,	0.190476,	0.666667,
 	1.00000,	1.00000,	0.645995,	0.510870,	0.699461,	0.339286,	0.666667,
 	1.00000,	0.200000,	0.0775194,	0.119565,	0.153672,	0.505952,	0.666667,
 	1.00000,	0.200000,	0.170543,	0.266304,	0.268500,	0.369048,	0.666667,
 	1.00000,	0.200000,	0.131783,	0.277174,	0.194783,	0.398810,	0.666667,
 	1.00000,	0.200000,	0.0956072,	0.157609,	0.174936,	0.386905,	0.666667,
 	1.00000,	0.200000,	0.170543,	0.266304,	0.255741,	0.404762,	0.666667,
 	1.00000,	0.200000,	0.227390,	0.320652,	0.320953,	0.517857,	0.666667,
 	1.00000,	0.200000,	0.214470,	0.211957,	0.352141,	0.571429,	0.666667,
 	1.00000,	0.200000,	0.131783,	0.277174,	0.224553,	0.410714,	0.666667,
 	1.00000,	0.400000,	0.162791,	0.309783,	0.345052,	0.470238,	0.666667,
 	1.00000,	0.600000,	0.245478,	0.429348,	0.432946,	0.333333,	0.666667,
 	1.00000,	0.200000,	0.136951,	0.375000,	0.335129,	0.458333,	0.666667,
 	1.00000,	0.600000,	0.245478,	0.472826,	0.509498,	0.464286,	0.666667,
 	1.00000,	0.200000,	0.0542636,	0.135870,	0.106890,	0.410714,	0.666667,
 	1.00000,	0.200000,	0.0775194,	0.119565,	0.148001,	0.511905,	0.666667,
 	1.00000,	0.600000,	0.421189,	0.375000,	0.462716,	0.440476,	0.750000,
 	1.00000,	0.600000,	0.341085,	0.211957,	0.390417,	0.607143,	0.750000,
 	1.00000,	0.200000,	0.186047,	0.228261,	0.362064,	0.553571,	0.750000,
 	1.00000,	0.600000,	0.423773,	0.239130,	0.468387,	0.607143,	0.750000,
 	1.00000,	0.600000,	0.405685,	0.347826,	0.495322,	0.511905,	0.750000,
 	1.00000,	1.00000,	0.612403,	0.456522,	0.631415,	0.440476,	0.750000,
 	1.00000,	1.00000,	0.604651,	0.451087,	0.598809,	0.321429,	0.750000,
 	1.00000,	1.00000,	0.731266,	0.500000,	0.664020,	0.309524,	0.750000,
 	1.00000,	1.00000,	0.645995,	0.483696,	0.628580,	0.428571,	0.750000,
 	1.00000,	1.00000,	0.728682,	0.592391,	0.778849,	0.410714,	0.750000,
 	1.00000,	1.00000,	0.731266,	0.521739,	0.692090,	0.375000,	0.750000,
 	1.00000,	1.00000,	0.514212,	0.429348,	0.564786,	0.416667,	0.750000,
 	1.00000,	1.00000,	0.754522,	0.565217,	0.659768,	0.297619,	0.750000,
 	1.00000,	0.200000,	0.0542636,	0.135870,	0.0884604,	0.357143,	0.750000,
 	1.00000,	0.200000,	0.0465116,	0.103261,	0.102637,	0.428571,	0.750000,
 	1.00000,	0.200000,	0.0775194,	0.184783,	0.0856252,	0.380952,	0.750000,
 	1.00000,	0.200000,	0.136951,	0.184783,	0.299688,	0.416667,	0.750000,
 	1.00000,	0.400000,	0.297158,	0.168478,	0.543521,	0.720238,	0.750000,
 	1.00000,	1.00000,	0.728682,	0.429348,	0.648426,	0.559524,	0.750000,
 	1.00000,	0.200000,	0.188630,	0.135870,	0.447122,	1.00000,	0.750000,
 	1.00000,	1.00000,	0.496124,	0.239130,	0.512333,	0.845238,	0.750000,
 	1.00000,	0.200000,	0.0956072,	0.130435,	0.166430,	0.309524,	0.750000,
 	1.00000,	0.200000,	0.0956072,	0.130435,	0.152254,	0.410714,	0.750000,
 	1.00000,	0.200000,	0.0439276,	0.103261,	0.115396,	0.666667,	0.750000,
 	1.00000,	0.200000,	0.0594315,	0.125000,	0.146583,	0.398810,	0.750000,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.299688,	0.476190,	0.750000,
 	1.00000,	0.600000,	0.271318,	0.375000,	0.278424,	0.196429,	0.750000,
 	1.00000,	0.600000,	0.271318,	0.375000,	0.308194,	0.291667,	0.750000,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.267366,	0.309524,	0.750000,
 	1.00000,	0.200000,	0.0775194,	0.163043,	0.150553,	0.398810,	0.833333,
 	1.00000,	0.200000,	0.0542636,	0.0760870,	0.100652,	0.642857,	0.833333,
 	1.00000,	0.200000,	0.0775194,	0.130435,	0.143748,	0.446429,	0.833333,
 	1.00000,	0.200000,	0.0465116,	0.103261,	0.115112,	0.500000,	0.833333,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.301956,	0.505952,	0.833333,
 	1.00000,	0.200000,	0.186047,	0.228261,	0.356394,	0.601190,	0.833333,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.394103,	0.720238,	0.833333,
 	1.00000,	0.600000,	0.405685,	0.239130,	0.501276,	0.636905,	0.833333,
 	1.00000,	0.200000,	0.0749354,	0.173913,	0.163028,	0.464286,	0.833333,
 	1.00000,	0.200000,	0.170543,	0.239130,	0.311313,	0.446429,	0.833333,
 	1.00000,	0.200000,	0.134367,	0.157609,	0.263397,	0.565476,	0.833333,
 	1.00000,	0.200000,	0.131783,	0.250000,	0.232776,	0.416667,	0.833333,
 	1.00000,	0.200000,	0.103359,	0.157609,	0.184860,	0.428571,	0.833333,
 	1.00000,	0.200000,	0.0465116,	0.103261,	0.140913,	0.589286,	0.833333,
 	1.00000,	0.200000,	0.227390,	0.320652,	0.336547,	0.380952,	0.833333,
 	1.00000,	0.200000,	0.0439276,	0.103261,	0.140913,	0.666667,	0.833333,
 	1.00000,	0.200000,	0.0568475,	0.0108696,	0.133825,	0.815476,	0.833333,
 	1.00000,	0.200000,	0.0568475,	0.0108696,	0.204707,	0.934524,	0.833333,
 	1.00000,	0.400000,	0.136951,	0.114130,	0.379076,	0.708333,	0.833333,
 	1.00000,	0.200000,	0.201550,	0.114130,	0.464134,	0.821429,	0.833333,
 	1.00000,	0.200000,	0.0594315,	0.114130,	0.0671959,	0.345238,	0.833333,
 	1.00000,	0.200000,	0.0749354,	0.114130,	0.150836,	0.595238,	0.833333,
 	1.00000,	0.200000,	0.0542636,	0.0869565,	0.0657783,	0.434524,	0.833333,
 	1.00000,	0.600000,	0.258398,	0.467391,	0.367735,	0.202381,	0.833333,
 	1.00000,	0.00000,	0.00516796,	0.293478,	0.228806,	0.267857,	0.833333,
 	1.00000,	0.200000,	0.139535,	0.228261,	0.251489,	0.422619,	0.833333,
 	1.00000,	0.200000,	0.100775,	0.141304,	0.191948,	0.535714,	0.833333,
 	1.00000,	0.200000,	0.173127,	0.206522,	0.248653,	0.458333,	0.916667,
 	1.00000,	0.200000,	0.214470,	0.206522,	0.289765,	0.500000,	0.916667,
 	1.00000,	0.200000,	0.227390,	0.250000,	0.285512,	0.380952,	0.916667,
 	1.00000,	0.600000,	0.271318,	0.347826,	0.315282,	0.273810,	0.916667,
 	1.00000,	0.200000,	0.173127,	0.206522,	0.218883,	0.291667,	0.916667,
 	1.00000,	0.200000,	0.0284238,	0.0652174,	0.0402608,	0.529762,	0.916667,
 	1.00000,	0.200000,	0.0465116,	0.0978261,	0.0742841,	0.500000,	0.916667,
 	1.00000,	0.200000,	0.0335917,	0.0760870,	0.0416785,	0.482143,	0.916667,
 	1.00000,	0.200000,	0.0749354,	0.114130,	0.128154,	0.583333,	0.916667,
 	1.00000,	0.200000,	0.0439276,	0.103261,	0.102637,	0.678571,	0.916667,
 	1.00000,	0.200000,	0.0542636,	0.0869565,	0.123901,	0.553571,	0.916667,
 	1.00000,	0.200000,	0.0594315,	0.119565,	0.105472,	0.476190,	0.916667,
 	1.00000,	0.200000,	0.0956072,	0.0923913,	0.170683,	0.410714,	0.916667,
 	1.00000,	0.200000,	0.0775194,	0.103261,	0.122484,	0.488095,	0.916667,
 	1.00000,	0.200000,	0.0775194,	0.103261,	0.217465,	0.755952,	0.916667,
 	1.00000,	0.200000,	0.0956072,	0.152174,	0.163595,	0.369048,	0.916667,
 	1.00000,	0.200000,	0.100775,	0.157609,	0.169266,	0.380952,	0.916667,
 	1.00000,	0.200000,	0.103359,	0.157609,	0.208959,	0.523810,	0.916667,
 	1.00000,	0.200000,	0.131783,	0.293478,	0.284094,	0.404762,	0.916667,
 	1.00000,	0.200000,	0.134367,	0.152174,	0.289765,	0.613095,	0.916667,
 	1.00000,	0.200000,	0.188630,	0.184783,	0.458463,	0.738095,	0.916667,
 	1.00000,	0.600000,	0.198966,	0.163043,	0.438616,	0.690476,	0.916667,
 	1.00000,	0.600000,	0.258398,	0.380435,	0.364899,	0.273810,	0.916667,
 	1.00000,	0.600000,	0.201550,	0.402174,	0.373405,	0.345238,	0.916667,
 	1.00000,	0.600000,	0.421189,	0.347826,	0.510916,	0.464286,	0.916667,
 	1.00000,	1.00000,	0.728682,	0.320652,	0.598809,	0.654762,	0.916667,
 	1.00000,	0.600000,	0.341085,	0.228261,	0.410264,	0.541667,	0.916667,
 	1.00000,	0.600000,	0.405685,	0.211957,	0.525092,	0.511905,	0.916667,
 	1.00000,	0.200000,	0.113695,	0.228261,	0.281259,	0.690476,	1.00000,
 	1.00000,	0.200000,	0.113695,	0.228261,	0.291182,	0.630952,	1.00000,
 	1.00000,	0.200000,	0.113695,	0.228261,	0.221718,	0.595238,	1.00000,
 	1.00000,	0.200000,	0.113695,	0.211957,	0.272753,	0.488095,	1.00000,
 	1.00000,	0.200000,	0.173127,	0.206522,	0.258577,	0.476190,	1.00000,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.318117,	0.595238,	1.00000,
 	1.00000,	0.200000,	0.186047,	0.250000,	0.354976,	0.500000,	1.00000,
 	1.00000,	0.200000,	0.0956072,	0.152174,	0.104054,	0.434524,	1.00000,
 	1.00000,	0.200000,	0.0594315,	0.119565,	0.116813,	0.607143,	1.00000,
 	1.00000,	0.200000,	0.0594315,	0.119565,	0.101219,	0.571429,	1.00000,
 	1.00000,	0.200000,	0.0956072,	0.0923913,	0.145166,	0.398810,	1.00000,
 	1.00000,	0.200000,	0.0775194,	0.130435,	0.145166,	0.553571,	1.00000,
 	1.00000,	0.200000,	0.134367,	0.228261,	0.155089,	0.386905,	1.00000,
 	1.00000,	0.200000,	0.100775,	0.157609,	0.167848,	0.386905,	1.00000,
 	1.00000,	0.200000,	0.103359,	0.130435,	0.179189,	0.529762,	1.00000,
 	1.00000,	0.200000,	0.0594315,	0.114130,	0.0998015,	0.416667,	1.00000,
 	1.00000,	0.200000,	0.0594315,	0.114130,	0.0998015,	0.458333,	1.00000,
 	1.00000,	0.200000,	0.0594315,	0.114130,	0.108307,	0.488095,	1.00000,
 	1.00000,	0.600000,	0.291990,	0.347826,	0.377658,	0.500000,	1.00000,
 	1.00000,	0.600000,	0.501292,	0.211957,	0.397505,	0.535714,	1.00000,
 	1.00000,	0.200000,	0.227390,	0.250000,	0.275588,	0.386905,	1.00000,
 	1.00000,	0.600000,	0.423773,	0.358696,	0.346470,	0.398810,	1.00000,
 	1.00000,	0.200000,	0.196382,	0.271739,	0.298270,	0.351190,	1.00000,
 	1.00000,	0.200000,	0.173127,	0.206522,	0.214630,	0.297619,	1.00000,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.379076,	0.553571,	1.00000,
 	1.00000,	0.200000,	0.186047,	0.217391,	0.333711,	0.452381,	1.00000,
 	1.00000,	0.200000,	0.0749354,	0.0326087,	0.146583,	0.988095,	1.00000,
 	1.00000,	0.200000,	0.173127,	0.206522,	0.193365,	0.214286,	1.00000,
 	1.00000,	0.200000,	0.134367,	0.179348,	0.286929,	0.630952,	1.00000,
 	1.00000,	0.200000,	0.131783,	0.195652,	0.313864,	0.678571,	1.00000) 
 scaled y = 
MatrixD(18.0000,
 	15.0000,
 	18.0000,
 	16.0000,
 	17.0000,
 	15.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	15.0000,
 	15.0000,
 	14.0000,
 	15.0000,
 	14.0000,
 	24.0000,
 	22.0000,
 	18.0000,
 	21.0000,
 	27.0000,
 	26.0000,
 	25.0000,
 	24.0000,
 	25.0000,
 	26.0000,
 	21.0000,
 	10.0000,
 	10.0000,
 	11.0000,
 	9.00000,
 	27.0000,
 	28.0000,
 	25.0000,
 	19.0000,
 	16.0000,
 	17.0000,
 	19.0000,
 	18.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	12.0000,
 	13.0000,
 	13.0000,
 	18.0000,
 	22.0000,
 	19.0000,
 	18.0000,
 	23.0000,
 	28.0000,
 	30.0000,
 	30.0000,
 	31.0000,
 	35.0000,
 	27.0000,
 	26.0000,
 	24.0000,
 	25.0000,
 	23.0000,
 	20.0000,
 	21.0000,
 	13.0000,
 	14.0000,
 	15.0000,
 	14.0000,
 	17.0000,
 	11.0000,
 	13.0000,
 	12.0000,
 	13.0000,
 	19.0000,
 	15.0000,
 	13.0000,
 	13.0000,
 	14.0000,
 	18.0000,
 	22.0000,
 	21.0000,
 	26.0000,
 	22.0000,
 	28.0000,
 	23.0000,
 	28.0000,
 	27.0000,
 	13.0000,
 	14.0000,
 	13.0000,
 	14.0000,
 	15.0000,
 	12.0000,
 	13.0000,
 	13.0000,
 	14.0000,
 	13.0000,
 	12.0000,
 	13.0000,
 	18.0000,
 	16.0000,
 	18.0000,
 	18.0000,
 	23.0000,
 	26.0000,
 	11.0000,
 	12.0000,
 	13.0000,
 	12.0000,
 	18.0000,
 	20.0000,
 	21.0000,
 	22.0000,
 	18.0000,
 	19.0000,
 	21.0000,
 	26.0000,
 	15.0000,
 	16.0000,
 	29.0000,
 	24.0000,
 	20.0000,
 	19.0000,
 	15.0000,
 	24.0000,
 	20.0000,
 	11.0000,
 	20.0000,
 	19.0000,
 	15.0000,
 	31.0000,
 	26.0000,
 	32.0000,
 	25.0000,
 	16.0000,
 	16.0000,
 	18.0000,
 	16.0000,
 	13.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	29.0000,
 	26.0000,
 	26.0000,
 	31.0000,
 	32.0000,
 	28.0000,
 	24.0000,
 	26.0000,
 	24.0000,
 	26.0000,
 	31.0000,
 	19.0000,
 	18.0000,
 	15.0000,
 	15.0000,
 	16.0000,
 	15.0000,
 	16.0000,
 	14.0000,
 	17.0000,
 	16.0000,
 	15.0000,
 	18.0000,
 	21.0000,
 	20.0000,
 	13.0000,
 	29.0000,
 	23.0000,
 	20.0000,
 	23.0000,
 	24.0000,
 	25.0000,
 	24.0000,
 	18.0000,
 	29.0000,
 	19.0000,
 	23.0000,
 	23.0000,
 	22.0000,
 	25.0000,
 	33.0000,
 	28.0000,
 	25.0000,
 	25.0000,
 	26.0000,
 	27.0000,
 	17.5000,
 	16.0000,
 	15.5000,
 	14.5000,
 	22.0000,
 	22.0000,
 	24.0000,
 	22.5000,
 	29.0000,
 	24.5000,
 	29.0000,
 	33.0000,
 	20.0000,
 	18.0000,
 	18.5000,
 	17.5000,
 	29.5000,
 	32.0000,
 	28.0000,
 	26.5000,
 	20.0000,
 	13.0000,
 	19.0000,
 	19.0000,
 	16.5000,
 	16.5000,
 	13.0000,
 	13.0000,
 	13.0000,
 	31.5000,
 	30.0000,
 	36.0000,
 	25.5000,
 	33.5000,
 	17.5000,
 	17.0000,
 	15.5000,
 	15.0000,
 	17.5000,
 	20.5000,
 	19.0000,
 	18.5000,
 	16.0000,
 	15.5000,
 	15.5000,
 	16.0000,
 	29.0000,
 	24.5000,
 	26.0000,
 	25.5000,
 	30.5000,
 	33.5000,
 	30.0000,
 	30.5000,
 	22.0000,
 	21.5000,
 	21.5000,
 	43.1000,
 	36.1000,
 	32.8000,
 	39.4000,
 	36.1000,
 	19.9000,
 	19.4000,
 	20.2000,
 	19.2000,
 	20.5000,
 	20.2000,
 	25.1000,
 	20.5000,
 	19.4000,
 	20.6000,
 	20.8000,
 	18.6000,
 	18.1000,
 	19.2000,
 	17.7000,
 	18.1000,
 	17.5000,
 	30.0000,
 	27.5000,
 	27.2000,
 	30.9000,
 	21.1000,
 	23.2000,
 	23.8000,
 	23.9000,
 	20.3000,
 	17.0000,
 	21.6000,
 	16.2000,
 	31.5000,
 	29.5000,
 	21.5000,
 	19.8000,
 	22.3000,
 	20.2000,
 	20.6000,
 	17.0000,
 	17.6000,
 	16.5000,
 	18.2000,
 	16.9000,
 	15.5000,
 	19.2000,
 	18.5000,
 	31.9000,
 	34.1000,
 	35.7000,
 	27.4000,
 	25.4000,
 	23.0000,
 	27.2000,
 	23.9000,
 	34.2000,
 	34.5000,
 	31.8000,
 	37.3000,
 	28.4000,
 	28.8000,
 	26.8000,
 	33.5000,
 	41.5000,
 	38.1000,
 	32.1000,
 	37.2000,
 	28.0000,
 	26.4000,
 	24.3000,
 	19.1000,
 	34.3000,
 	29.8000,
 	31.3000,
 	37.0000,
 	32.2000,
 	46.6000,
 	27.9000,
 	40.8000,
 	44.3000,
 	43.4000,
 	36.4000,
 	30.0000,
 	44.6000,
 	33.8000,
 	29.8000,
 	32.7000,
 	23.7000,
 	35.0000,
 	32.4000,
 	27.2000,
 	26.6000,
 	25.8000,
 	23.5000,
 	30.0000,
 	39.1000,
 	39.0000,
 	35.1000,
 	32.3000,
 	37.0000,
 	37.7000,
 	34.1000,
 	34.7000,
 	34.4000,
 	29.9000,
 	33.0000,
 	33.7000,
 	32.4000,
 	32.9000,
 	31.6000,
 	28.1000,
 	30.7000,
 	25.4000,
 	24.2000,
 	22.4000,
 	26.6000,
 	20.2000,
 	17.6000,
 	28.0000,
 	27.0000,
 	34.0000,
 	31.0000,
 	29.0000,
 	27.0000,
 	24.0000,
 	36.0000,
 	37.0000,
 	31.0000,
 	38.0000,
 	36.0000,
 	36.0000,
 	36.0000,
 	34.0000,
 	38.0000,
 	32.0000,
 	38.0000,
 	25.0000,
 	38.0000,
 	26.0000,
 	22.0000,
 	32.0000,
 	36.0000,
 	27.0000,
 	27.0000,
 	44.0000,
 	32.0000,
 	28.0000,
 	31.0000)
auto_optimize: etaI = (2.5E-4,0.004)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 2.5E-4, result = (6790.057555315017,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 4.84375E-4, result = (5039.060813617127,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 7.1875E-4, result = (4454.207547075182,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 9.53125E-4, result = (4087.4665546295587,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0011875, result = (3843.8915282738594,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.001421875, result = (3672.026167096395,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.00165625, result = (3545.7208539658122,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.001890625, result = (3446.449868444913,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.002125, result = (3368.715603745801,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0023593750000000004, result = (3305.0747794224917,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0025937499999999997, result = (3252.871662948601,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.002828125, result = (3210.246993474013,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0030625, result = (3175.4698761770205,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0032968750000000003, result = (3147.0042137115597,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0035312499999999997, result = (3123.7177164690534,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.003765625, result = (3103.911726416264,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.004, result = (3088.1650736845563,400)
ending epoch = (3088.1650736845563,400)

REPORT
    ----------------------------------------------------------------------------
    modelName  mn  = NeuralNet_3L_sigmoid
    ----------------------------------------------------------------------------
    hparameter hp  = HyperParameter (HashMap(lambda -> (0.01,0.01), maxEpochs -> (400,400), eta -> (0.1,0.1), nu -> (0.9,0.9), upLimit -> (4,4), beta -> (0.9,0.9), bSize -> (20,20)))
    ----------------------------------------------------------------------------
    features   fn  = Array(intercept, cylinders, displacement, horsepower, weight, acceleration, modelyear)
    ----------------------------------------------------------------------------
    parameter  bb  = Array(b.w = 
MatrixD(0.607606,	0.367239,	-0.143658,	-0.00902287,	-0.235258,	-0.216303,	-0.229298,	1.01810,	-0.197059,	-0.0644869,	-0.115605,	0.00194194,	-0.258315,	-0.0460514,	0.203913,
 	0.552055,	0.696074,	-0.0237151,	0.0818692,	-0.371734,	-0.297983,	-0.384389,	0.248677,	-0.672976,	-0.558589,	-0.277242,	0.441867,	-0.507114,	-0.245378,	0.738029,
 	-0.00391118,	0.158418,	-0.621784,	-0.845878,	-1.04282,	-1.23231,	-1.27482,	0.189495,	-1.52455,	-1.11494,	-1.27387,	-0.394490,	-1.11333,	-0.922090,	-0.432587,
 	-0.140999,	-0.511086,	-1.01512,	-1.06354,	-1.47012,	-1.42733,	-1.44041,	0.134132,	-1.54598,	-1.46985,	-1.26231,	-0.634267,	-1.40341,	-1.02039,	-0.901539,
 	-0.679861,	-1.11110,	-1.83217,	-1.76218,	-2.25704,	-2.21910,	-2.23984,	-0.347625,	-2.42217,	-2.44525,	-2.27598,	-1.56618,	-2.13313,	-1.91787,	-1.65304,
 	-0.0872370,	-0.368221,	0.0995828,	0.0657810,	0.284643,	0.391689,	0.320544,	0.193598,	0.371661,	0.0553625,	0.131857,	0.0187240,	0.225500,	-0.112107,	-0.339251,
 	0.642944,	0.510804,	1.05331,	0.810255,	1.25723,	1.05385,	1.22225,	0.604549,	1.25144,	1.20437,	1.11114,	0.795398,	1.30105,	1.08422,	0.744416) 
 b.b = VectorD(0.508925,	0.281494,	-0.165757,	-0.0954728,	-0.284732,	-0.235630,	-0.297994,	0.891444,	-0.309504,	-0.171580,	-0.174850,	-0.0164427,	-0.291815,	-0.127977,	0.0987836), b.w = 
MatrixD(3.14674,
 	3.20159,
 	3.12077,
 	3.29574,
 	3.66642,
 	3.52087,
 	3.73877,
 	3.08299,
 	4.05188,
 	3.88882,
 	3.62481,
 	2.91483,
 	3.55169,
 	3.36799,
 	3.44758) 
 b.b = VectorD(4.22145))
    ----------------------------------------------------------------------------
    fitMap     qof = 
		rSq 	 -> VectorD(0.870349) 
		rSqBar 	 -> VectorD(0.867991) 
		sst 	 -> VectorD(23819.0) 
		sse 	 -> VectorD(3088.17) 
		mse0 	 -> VectorD(7.87797) 
		rmse 	 -> VectorD(2.80677) 
		mae 	 -> VectorD(2.02914) 
		dfm 	 -> VectorD(7.00000) 
		df 	 -> VectorD(385.000) 
		fStat 	 -> VectorD(369.215) 
		aic 	 -> VectorD(-944.782) 
		bic 	 -> VectorD(-913.012) 
		mape 	 -> VectorD(8.79643) 
		smape 	 -> VectorD(8.66439) 

    ----------------------------------------------------------------------------
        
Run + title
--------------------
| Cross-Validation |
--------------------
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2424.258197299425,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.14674,
 	3.20159,
 	3.12077,
 	3.29574,
 	3.66642,
 	3.52087,
 	3.73877,
 	3.08299,
 	4.05188,
 	3.88882,
 	3.62481,
 	2.91483,
 	3.55169,
 	3.36799,
 	3.44758) 
 b.b = VectorD(4.22145)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.866173,
 	0.863740,
 	4731.23,
 	633.168,
 	8.11754,
 	2.84913,
 	1.91751,
 	7.00000,
 	385.000,
 	355.978,
 	-176.362,
 	-157.508,
 	8.29575,
 	8.30265)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2344.3174077527283,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.14674,
 	3.20159,
 	3.12077,
 	3.29574,
 	3.66642,
 	3.52087,
 	3.73877,
 	3.08299,
 	4.05188,
 	3.88882,
 	3.62481,
 	2.91483,
 	3.55169,
 	3.36799,
 	3.44758) 
 b.b = VectorD(4.22145)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.848807,
 	0.846058,
 	4472.51,
 	676.214,
 	8.66941,
 	2.94439,
 	2.28884,
 	7.00000,
 	385.000,
 	308.773,
 	-179.094,
 	-160.241,
 	10.4349,
 	10.0382)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2374.8508661154306,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.14674,
 	3.20159,
 	3.12077,
 	3.29574,
 	3.66642,
 	3.52087,
 	3.73877,
 	3.08299,
 	4.05188,
 	3.88882,
 	3.62481,
 	2.91483,
 	3.55169,
 	3.36799,
 	3.44758) 
 b.b = VectorD(4.22145)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.861934,
 	0.859424,
 	4664.26,
 	643.975,
 	8.25610,
 	2.87334,
 	2.09356,
 	7.00000,
 	385.000,
 	343.360,
 	-177.048,
 	-158.194,
 	8.89720,
 	8.68770)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2552.6643604959427,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.14674,
 	3.20159,
 	3.12077,
 	3.29574,
 	3.66642,
 	3.52087,
 	3.73877,
 	3.08299,
 	4.05188,
 	3.88882,
 	3.62481,
 	2.91483,
 	3.55169,
 	3.36799,
 	3.44758) 
 b.b = VectorD(4.22145)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.875352,
 	0.873086,
 	3962.82,
 	493.956,
 	6.33276,
 	2.51650,
 	1.83534,
 	7.00000,
 	385.000,
 	386.244,
 	-167.526,
 	-148.672,
 	8.48382,
 	8.29068)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2385.59954713658,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.14674,
 	3.20159,
 	3.12077,
 	3.29574,
 	3.66642,
 	3.52087,
 	3.73877,
 	3.08299,
 	4.05188,
 	3.88882,
 	3.62481,
 	2.91483,
 	3.55169,
 	3.36799,
 	3.44758) 
 b.b = VectorD(4.22145)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.888195,
 	0.886162,
 	5671.58,
 	634.110,
 	8.12961,
 	2.85125,
 	2.01591,
 	7.00000,
 	385.000,
 	436.929,
 	-176.422,
 	-157.568,
 	7.89403,
 	8.01408)
-----------------------------------------------
| showQofStatTable: Statistical Table for QoF |
-----------------------------------------------
|        name |   num |        min |        max |       mean |      stdev |   interval |
----------------------------------------------------------------------------------------
|         rSq |     5 |      0.849 |      0.888 |      0.868 |      0.015 |      0.018 |
|      rSqBar |     5 |      0.846 |      0.886 |      0.866 |      0.015 |      0.019 |
|         sst |     5 |   3962.818 |   5671.580 |   4700.481 |    620.767 |    770.935 |
|         sse |     5 |    493.956 |    676.214 |    616.284 |     70.579 |     87.652 |
|        mse0 |     5 |      6.333 |      8.669 |      7.901 |      0.905 |      1.124 |
|        rmse |     5 |      2.516 |      2.944 |      2.807 |      0.167 |      0.207 |
|         mae |     5 |      1.835 |      2.289 |      2.030 |      0.174 |      0.217 |
|         dfm |     5 |      7.000 |      7.000 |      7.000 |      0.000 |      0.000 |
|          df |     5 |    385.000 |    385.000 |    385.000 |      0.000 |      0.000 |
|       fStat |     5 |    308.773 |    436.929 |    366.257 |     48.292 |     59.974 |
|         aic |     5 |   -179.094 |   -167.526 |   -175.290 |      4.480 |      5.563 |
|         bic |     5 |   -160.241 |   -148.672 |   -156.437 |      4.480 |      5.563 |
|        mape |     5 |      7.894 |     10.435 |      8.801 |      0.982 |      1.220 |
|       smape |     5 |      8.014 |     10.038 |      8.667 |      0.803 |      0.998 |
----------------------------------------------------------------------------------------
----------------------------------------
| Feature Selection Technique: Forward |
----------------------------------------
-------------------------------------------------------------------------------------
| forwardSelAll: (l = 0) INITIAL variable (0, intercept) => cols = LinkedHashSet(0) |
-------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (9586.694902721261,400)
optimize3: bSize = 20, nB = 19
ending epoch = (8820.992159752219,400)
optimize3: bSize = 20, nB = 19
ending epoch = (13119.755735447794,400)
optimize3: bSize = 20, nB = 19
ending epoch = (9624.057585934012,400)
optimize3: bSize = 20, nB = 19
ending epoch = (20179.450295741208,400)
optimize3: bSize = 20, nB = 19
ending epoch = (15805.338363274283,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (6089.923039701047,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(10.9778,
 	7.59420,
 	3.90401,
 	4.45453,
 	4.52738) 
 b.b = VectorD(5.08464)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.696942,
 	0.695387,
 	4731.23,
 	1433.84,
 	18.3826,
 	4.28749,
 	3.02763,
 	2.00000,
 	390.000,
 	448.440,
 	-218.968,
 	-211.898,
 	13.4915,
 	13.1902)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (6076.516376195034,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(11.3740,
 	7.92927,
 	4.06057,
 	4.57870,
 	4.75583) 
 b.b = VectorD(5.21227)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.694240,
 	0.692672,
 	4472.51,
 	1367.52,
 	17.5323,
 	4.18716,
 	3.14582,
 	2.00000,
 	390.000,
 	442.754,
 	-217.494,
 	-210.424,
 	13.4251,
 	12.9735)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (5810.646203479383,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(11.7074,
 	8.20411,
 	4.20586,
 	4.69314,
 	4.95388) 
 b.b = VectorD(5.32638)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.656155,
 	0.654391,
 	4664.26,
 	1603.78,
 	20.5613,
 	4.53446,
 	3.33029,
 	2.00000,
 	390.000,
 	372.115,
 	-222.744,
 	-215.674,
 	14.3695,
 	13.5113)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (5884.548401420347,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(11.8501,
 	8.33164,
 	4.25862,
 	4.72355,
 	5.04112) 
 b.b = VectorD(5.35208)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.612175,
 	0.610186,
 	3962.82,
 	1536.88,
 	19.7036,
 	4.43887,
 	3.30356,
 	2.00000,
 	390.000,
 	307.804,
 	-221.257,
 	-214.187,
 	15.1158,
 	14.1181)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (5848.8781029593665,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(11.8461,
 	8.32090,
 	4.24417,
 	4.70940,
 	5.02989) 
 b.b = VectorD(5.32946)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.724136,
 	0.722721,
 	5671.58,
 	1564.59,
 	20.0588,
 	4.47871,
 	3.11466,
 	2.00000,
 	390.000,
 	511.869,
 	-221.873,
 	-214.803,
 	11.7227,
 	11.9952)
------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 1) ADD variable (2, displacement) => cols = LinkedHashSet(0, 2) @ 0.6277664701333152 |
------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (8243.403619221956,400)
optimize3: bSize = 20, nB = 19
ending epoch = (6760.256012279335,400)
optimize3: bSize = 20, nB = 19
ending epoch = (6871.310588489017,400)
optimize3: bSize = 20, nB = 19
ending epoch = (7973.013404302011,400)
optimize3: bSize = 20, nB = 19
ending epoch = (5262.98236483318,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3711.343349377311,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.45005,
 	5.34604,
 	5.51165,
 	5.91471,
 	6.53044,
 	5.99938,
 	5.74709) 
 b.b = VectorD(5.91033)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.789522,
 	0.787899,
 	4731.23,
 	995.822,
 	12.7669,
 	3.57309,
 	2.45626,
 	3.00000,
 	389.000,
 	486.391,
 	-202.051,
 	-192.624,
 	11.0814,
 	10.9696)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3594.5736307923453,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.67536,
 	5.53290,
 	5.77359,
 	6.19402,
 	6.87828,
 	6.31458,
 	6.01109) 
 b.b = VectorD(6.15771)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.784572,
 	0.782910,
 	4472.51,
 	963.506,
 	12.3526,
 	3.51463,
 	2.76918,
 	3.00000,
 	389.000,
 	472.235,
 	-200.846,
 	-191.419,
 	12.5251,
 	11.8626)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3707.9156605426315,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.80648,
 	5.66971,
 	5.94528,
 	6.39000,
 	7.11980,
 	6.53004,
 	6.19254) 
 b.b = VectorD(6.28359)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.836205,
 	0.834942,
 	4664.26,
 	763.983,
 	9.79466,
 	3.12964,
 	2.11967,
 	3.00000,
 	389.000,
 	661.972,
 	-193.406,
 	-183.979,
 	9.47721,
 	9.09835)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3471.0208615477886,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.91645,
 	5.78418,
 	6.10067,
 	6.55922,
 	7.33064,
 	6.71874,
 	6.35082) 
 b.b = VectorD(6.39171)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.756216,
 	0.754336,
 	3962.82,
 	966.073,
 	12.3856,
 	3.51931,
 	2.43163,
 	3.00000,
 	389.000,
 	402.224,
 	-200.942,
 	-191.515,
 	11.3199,
 	10.6961)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3576.445274059927,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.93268,
 	5.85234,
 	6.16392,
 	6.62497,
 	7.41503,
 	6.79220,
 	6.41147) 
 b.b = VectorD(6.39229)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.851441,
 	0.850295,
 	5671.58,
 	842.565,
 	10.8021,
 	3.28666,
 	2.36100,
 	3.00000,
 	389.000,
 	743.162,
 	-196.336,
 	-186.909,
 	9.14863,
 	9.43032)
------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 2) ADD variable (6, modelyear) => cols = LinkedHashSet(0, 2, 6) @ 0.7773385796258979 |
------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (5580.481246554671,400)
optimize3: bSize = 20, nB = 19
ending epoch = (4337.996956565113,400)
optimize3: bSize = 20, nB = 19
ending epoch = (3799.0037206846328,400)
optimize3: bSize = 20, nB = 19
ending epoch = (5389.8712257497245,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2753.791393911217,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(4.87033,
 	5.37618,
 	4.75483,
 	5.31556,
 	3.92704,
 	3.74358,
 	4.45082,
 	4.35562,
 	5.74350) 
 b.b = VectorD(4.69572)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.846227,
 	0.844642,
 	4731.23,
 	727.537,
 	9.32739,
 	3.05408,
 	2.03396,
 	4.00000,
 	388.000,
 	533.800,
 	-187.790,
 	-176.006,
 	8.92153,
 	8.90107)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2757.507393056914,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.03704,
 	5.56222,
 	4.91309,
 	5.49410,
 	4.06172,
 	3.89079,
 	4.61038,
 	4.47263,
 	5.93952) 
 b.b = VectorD(4.81248)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.853252,
 	0.851739,
 	4472.51,
 	656.333,
 	8.41453,
 	2.90078,
 	2.27015,
 	4.00000,
 	388.000,
 	563.997,
 	-184.114,
 	-172.330,
 	10.4103,
 	9.92504)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2686.0432132468695,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.15035,
 	5.68417,
 	5.00517,
 	5.60764,
 	4.17634,
 	4.01714,
 	4.72928,
 	4.55861,
 	6.06630) 
 b.b = VectorD(4.88574)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.854243,
 	0.852740,
 	4664.26,
 	679.851,
 	8.71603,
 	2.95229,
 	2.02245,
 	4.00000,
 	388.000,
 	568.489,
 	-185.328,
 	-173.544,
 	8.65567,
 	8.41552)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2737.3651193405576,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.18050,
 	5.71547,
 	5.03217,
 	5.63761,
 	4.21677,
 	4.06406,
 	4.76498,
 	4.58196,
 	6.10174) 
 b.b = VectorD(4.91025)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.844959,
 	0.843361,
 	3962.82,
 	614.398,
 	7.87690,
 	2.80658,
 	2.02325,
 	4.00000,
 	388.000,
 	528.642,
 	-181.949,
 	-170.165,
 	9.39818,
 	9.05816)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2575.067876365723,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.22236,
 	5.74970,
 	5.05471,
 	5.66718,
 	4.26532,
 	4.12346,
 	4.81815,
 	4.59780,
 	6.13785) 
 b.b = VectorD(4.91260)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.865793,
 	0.864409,
 	5671.58,
 	761.167,
 	9.75855,
 	3.12387,
 	2.09823,
 	4.00000,
 	388.000,
 	625.763,
 	-189.526,
 	-177.742,
 	8.07504,
 	8.34166)
------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 3) ADD variable (4, weight) => cols = LinkedHashSet(0, 2, 6, 4) @ 0.8388610034076948 |
------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (4320.5628683154455,400)
optimize3: bSize = 20, nB = 19
ending epoch = (3620.8212577628015,400)
optimize3: bSize = 20, nB = 19
ending epoch = (3922.5244956089678,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2544.1179693847243,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.01667,
 	3.71360,
 	3.99829,
 	3.97866,
 	3.71002,
 	3.70338,
 	3.80098,
 	5.02802,
 	4.01766,
 	3.96827,
 	4.30193) 
 b.b = VectorD(4.52290)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.859010,
 	0.857189,
 	4731.23,
 	667.056,
 	8.55200,
 	2.92438,
 	1.97838,
 	5.00000,
 	387.000,
 	471.576,
 	-182.489,
 	-168.348,
 	8.58682,
 	8.60969)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2454.0225074850214,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.22458,
 	3.81447,
 	4.16075,
 	4.11106,
 	3.82271,
 	3.84462,
 	3.92731,
 	5.23084,
 	4.13382,
 	4.07777,
 	4.46754) 
 b.b = VectorD(4.65062)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.846631,
 	0.844649,
 	4472.51,
 	685.946,
 	8.79418,
 	2.96550,
 	2.30495,
 	5.00000,
 	387.000,
 	427.264,
 	-183.512,
 	-169.372,
 	10.5300,
 	10.1105)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2449.4077384823227,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.33339,
 	3.88917,
 	4.25015,
 	4.19016,
 	3.85887,
 	3.92827,
 	4.00327,
 	5.33234,
 	4.17978,
 	4.15406,
 	4.54883) 
 b.b = VectorD(4.69349)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.859906,
 	0.858096,
 	4664.26,
 	653.437,
 	8.37739,
 	2.89437,
 	2.10233,
 	5.00000,
 	387.000,
 	475.084,
 	-181.751,
 	-167.611,
 	8.89420,
 	8.66992)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2595.299533586158,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.35723,
 	3.91006,
 	4.26392,
 	4.20473,
 	3.86410,
 	3.94214,
 	4.01168,
 	5.36149,
 	4.19380,
 	4.17844,
 	4.57035) 
 b.b = VectorD(4.69399)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.876118,
 	0.874518,
 	3962.82,
 	490.920,
 	6.29385,
 	2.50875,
 	1.85590,
 	5.00000,
 	387.000,
 	547.390,
 	-172.949,
 	-158.808,
 	8.64727,
 	8.43865)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2424.919151465086,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.36386,
 	3.93645,
 	4.27334,
 	4.22323,
 	3.83616,
 	3.95993,
 	4.02243,
 	5.37192,
 	4.18182,
 	4.21151,
 	4.57874) 
 b.b = VectorD(4.65739)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.884908,
 	0.883421,
 	5671.58,
 	652.753,
 	8.36862,
 	2.89286,
 	2.02867,
 	5.00000,
 	387.000,
 	595.106,
 	-181.714,
 	-167.574,
 	7.93301,
 	8.10918)
-------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 4) ADD variable (3, horsepower) => cols = LinkedHashSet(0, 2, 6, 4, 3) @ 0.8460219614703024 |
-------------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (4029.287056150718,400)
optimize3: bSize = 20, nB = 19
ending epoch = (3690.651361664489,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2560.9612965595556,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.46640,
 	3.54548,
 	3.08940,
 	3.44960,
 	3.51487,
 	3.97714,
 	3.47497,
 	4.15295,
 	3.53940,
 	3.83356,
 	4.13346,
 	4.09282,
 	3.54548) 
 b.b = VectorD(4.02541)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.859731,
 	0.857551,
 	4731.23,
 	663.645,
 	8.50827,
 	2.91689,
 	1.96551,
 	6.00000,
 	386.000,
 	394.309,
 	-180.368,
 	-163.871,
 	8.52888,
 	8.55429)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2427.9739082390374,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.55841,
 	3.65481,
 	3.18321,
 	3.54647,
 	3.62210,
 	4.14037,
 	3.56517,
 	4.31459,
 	3.63049,
 	3.96609,
 	4.31037,
 	4.26452,
 	3.68387) 
 b.b = VectorD(4.12793)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.839983,
 	0.837495,
 	4472.51,
 	715.680,
 	9.17539,
 	3.02909,
 	2.37322,
 	6.00000,
 	386.000,
 	337.706,
 	-183.134,
 	-166.637,
 	10.7726,
 	10.3615)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2448.7073814809264,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.63362,
 	3.74381,
 	3.27000,
 	3.63968,
 	3.69780,
 	4.22515,
 	3.63565,
 	4.41143,
 	3.73329,
 	4.04875,
 	4.40203,
 	4.34766,
 	3.76404) 
 b.b = VectorD(4.22171)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.861281,
 	0.859125,
 	4664.26,
 	647.021,
 	8.29515,
 	2.88013,
 	2.09239,
 	6.00000,
 	386.000,
 	399.434,
 	-179.485,
 	-162.988,
 	8.85759,
 	8.62554)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2572.6620033303916,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.67608,
 	3.76646,
 	3.30409,
 	3.70174,
 	3.71694,
 	4.25421,
 	3.66082,
 	4.42965,
 	3.80257,
 	4.06309,
 	4.42596,
 	4.37832,
 	3.78006) 
 b.b = VectorD(4.26216)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.874015,
 	0.872056,
 	3962.82,
 	499.257,
 	6.40073,
 	2.52997,
 	1.85809,
 	6.00000,
 	386.000,
 	446.308,
 	-171.632,
 	-155.135,
 	8.63119,
 	8.41364)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2408.9138486387346,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.68863,
 	3.79891,
 	3.34954,
 	3.75092,
 	3.73637,
 	4.26706,
 	3.68975,
 	4.44229,
 	3.86239,
 	4.07415,
 	4.43238,
 	4.38532,
 	3.79191) 
 b.b = VectorD(4.27345)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.884456,
 	0.882660,
 	5671.58,
 	655.320,
 	8.40153,
 	2.89854,
 	2.02779,
 	6.00000,
 	386.000,
 	492.451,
 	-179.926,
 	-163.429,
 	7.89336,
 	8.07573)
------------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 5) ADD variable (5, acceleration) => cols = LinkedHashSet(0, 2, 6, 4, 3, 5) @ 0.8426457858419779 |
------------------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (4115.159580319137,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2749.419355160728,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.07340,
 	3.17177,
 	3.28415,
 	3.16179,
 	3.58564,
 	3.45828,
 	3.02463,
 	3.37154,
 	3.09862,
 	3.96664,
 	2.99738,
 	2.83703,
 	3.27256,
 	2.97142,
 	3.07463) 
 b.b = VectorD(3.60364)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.850100,
 	0.847375,
 	4731.23,
 	709.210,
 	9.09244,
 	3.01537,
 	2.05760,
 	7.00000,
 	385.000,
 	311.912,
 	-181.150,
 	-162.296,
 	8.85863,
 	8.87375)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2499.3181726474504,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.14046,
 	3.31864,
 	3.45407,
 	3.29582,
 	3.78863,
 	3.65465,
 	3.16360,
 	3.49760,
 	3.23117,
 	4.17833,
 	3.12773,
 	2.96003,
 	3.44071,
 	3.06400,
 	3.18513) 
 b.b = VectorD(3.66909)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.833521,
 	0.830494,
 	4472.51,
 	744.580,
 	9.54590,
 	3.08964,
 	2.43935,
 	7.00000,
 	385.000,
 	275.372,
 	-182.835,
 	-163.981,
 	11.1089,
 	10.6451)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2452.7874312799295,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.18900,
 	3.47100,
 	3.56095,
 	3.40238,
 	3.91450,
 	3.77663,
 	3.28894,
 	3.59606,
 	3.37860,
 	4.31524,
 	3.23812,
 	3.05190,
 	3.55486,
 	3.17162,
 	3.31089) 
 b.b = VectorD(3.72614)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.859589,
 	0.857036,
 	4664.26,
 	654.916,
 	8.39635,
 	2.89765,
 	2.10560,
 	7.00000,
 	385.000,
 	336.706,
 	-178.563,
 	-159.709,
 	8.95423,
 	8.71729)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2573.949997297903,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.19659,
 	3.53928,
 	3.60551,
 	3.43814,
 	3.96477,
 	3.81809,
 	3.33631,
 	3.63510,
 	3.44021,
 	4.36741,
 	3.27442,
 	3.08628,
 	3.59934,
 	3.22723,
 	3.37353) 
 b.b = VectorD(3.74174)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.876262,
 	0.874012,
 	3962.82,
 	490.352,
 	6.28657,
 	2.50730,
 	1.82624,
 	7.00000,
 	385.000,
 	389.487,
 	-170.723,
 	-151.869,
 	8.42733,
 	8.23108)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2403.4267194922413,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.18705,
 	3.60287,
 	3.62211,
 	3.46350,
 	3.98030,
 	3.82562,
 	3.38049,
 	3.65918,
 	3.49482,
 	4.37990,
 	3.30636,
 	3.11308,
 	3.61995,
 	3.27192,
 	3.42960) 
 b.b = VectorD(3.72743)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.885507,
 	0.883425,
 	5671.58,
 	649.356,
 	8.32508,
 	2.88532,
 	2.02209,
 	7.00000,
 	385.000,
 	425.379,
 	-178.298,
 	-159.445,
 	7.87332,
 	8.03722)
-----------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 6) ADD variable (1, cylinders) => cols = LinkedHashSet(0, 2, 6, 4, 3, 5, 1) @ 0.824090775750762 |
-----------------------------------------------------------------------------------------------------------------------
k = 7, n = 7
Run + title
x-axis: minX = 0.0, maxX = 6.0
y-axis: minY = 62.0, maxY = 87.0
rSq = 
MatrixD(62.9666,	62.7766,	67.6729,
 	77.9043,	77.7339,	80.3591,
 	84.0505,	83.8861,	85.2895,
 	84.7986,	84.6022,	86.5315,
 	84.5054,	84.2646,	86.3893,
 	82.7232,	82.4091,	86.0996)
