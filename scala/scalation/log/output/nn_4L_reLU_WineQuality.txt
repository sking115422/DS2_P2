readFileIntoArray: C:\Users\Tango\Desktop\Projects\DS2_P2\scala\scalation\data\winequality-white_fixed.csv
load: read 99 data rows so far ...
load: read 199 data rows so far ...
load: read 299 data rows so far ...
load: read 399 data rows so far ...
load: read 499 data rows so far ...
load: read 599 data rows so far ...
load: read 699 data rows so far ...
load: read 799 data rows so far ...
load: read 899 data rows so far ...
load: read 999 data rows so far ...
load: read 1099 data rows so far ...
load: read 1199 data rows so far ...
load: read 1299 data rows so far ...
load: read 1399 data rows so far ...
load: read 1499 data rows so far ...
load: read 1599 data rows so far ...
load: read 1699 data rows so far ...
load: read 1799 data rows so far ...
load: read 1899 data rows so far ...
load: read 1999 data rows so far ...
load: read 2099 data rows so far ...
load: read 2199 data rows so far ...
load: read 2299 data rows so far ...
load: read 2399 data rows so far ...
load: read 2499 data rows so far ...
load: read 2599 data rows so far ...
load: read 2699 data rows so far ...
load: read 2799 data rows so far ...
load: read 2899 data rows so far ...
load: read 2999 data rows so far ...
load: read 3099 data rows so far ...
load: read 3199 data rows so far ...
load: read 3299 data rows so far ...
load: read 3399 data rows so far ...
load: read 3499 data rows so far ...
load: read 3599 data rows so far ...
load: read 3699 data rows so far ...
load: read 3799 data rows so far ...
load: read 3899 data rows so far ...
load: read 3999 data rows so far ...
load: read 4099 data rows so far ...
load: read 4199 data rows so far ...
load: read 4299 data rows so far ...
load: read 4399 data rows so far ...
load: read 4499 data rows so far ...
load: read 4599 data rows so far ...
load: read 4699 data rows so far ...
load: read 4799 data rows so far ...
load: read in an 4898-by-12 matrix from winequality-white_fixed.csv
ox_fname = Array(intercept, fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, alcohol)
------------------------------------------
| NeuralNet_XL for WineQuality with reLU |
------------------------------------------
auto_optimize: etaI = (2.5E-4,0.004)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 2.5E-4, result = (2744.7401573798306,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 4.84375E-4, result = (2736.6797693915855,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 7.1875E-4, result = (2736.960191924173,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 9.53125E-4, result = (2732.461044359435,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.0011875, result = (2731.779141670489,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.001421875, result = (2729.4957891569675,92)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.00165625, result = (2729.4957891569675,-3)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.001890625, result = (2733.442999538875,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.002125, result = (2735.882396774736,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.0023593750000000004, result = (2729.4957891569675,279)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.0025937499999999997, result = (2729.4957891569675,-3)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.002828125, result = (2737.973042589744,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.0030625, result = (2735.978214759296,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.0032968750000000003, result = (2744.4428254189606,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.0035312499999999997, result = (2740.3474312923845,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.003765625, result = (2729.4957891569675,201)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.004, result = (2729.4957891569675,-3)
ending epoch = (2729.4957891569675,92)

REPORT
    ----------------------------------------------------------------------------
    modelName  mn  = NeuralNet_XL_reLU_reLU
    ----------------------------------------------------------------------------
    hparameter hp  = HyperParameter (HashMap(lambda -> (0.01,0.01), maxEpochs -> (400,400), eta -> (0.1,0.1), nu -> (0.9,0.9), upLimit -> (4,4), beta -> (0.9,0.9), bSize -> (20,20)))
    ----------------------------------------------------------------------------
    features   fn  = Array(intercept, fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, alcohol)
    ----------------------------------------------------------------------------
    parameter  bb  = Array(b.w = 
MatrixD(0.475256,	0.321888,	0.106258,	0.273146,	0.285002,	0.147608,	0.364795,	0.446222,	0.428026,	0.394649,	0.295720,	0.186494,	0.248353,	0.356229,	0.413392,	0.466269,	0.563479,	0.247004,	0.209237,	0.272803,	0.359024,	0.346135,	0.258527,	0.141176,	0.168260,
 	-0.00410165,	0.117713,	-0.000249375,	-0.0235610,	0.162340,	0.0571747,	0.145374,	0.124950,	-0.0437638,	0.115725,	-0.0579318,	-0.0273870,	0.154946,	-0.0862823,	0.0965645,	-0.143397,	-0.0649407,	0.0691151,	0.0704947,	-0.0516417,	0.0626990,	-0.0809296,	0.0456242,	0.107669,	-0.00180780,
 	-0.0852502,	0.0543154,	0.205664,	0.143222,	0.0498262,	0.140832,	0.105763,	0.0249177,	0.178029,	-0.0215343,	0.172182,	0.0485956,	-0.0184852,	0.104452,	-0.0754436,	-0.137108,	-0.0691696,	0.140270,	0.0670710,	-0.0919023,	-0.110309,	-0.0140702,	-0.00728296,	0.109808,	0.0545889,
 	0.0306709,	0.000276045,	0.120403,	0.175442,	0.108081,	0.199578,	0.122025,	0.00416261,	0.172428,	-0.0667283,	-0.0185052,	0.144601,	0.0299726,	-0.112377,	-0.0400880,	0.118538,	-0.00783356,	0.0473890,	0.00231523,	0.0761566,	-0.109608,	0.0358537,	-0.0774751,	0.0997628,	0.0311147,
 	0.0734014,	0.0257959,	0.108693,	0.107042,	0.0711174,	0.111260,	0.144892,	0.129955,	0.0657259,	0.170501,	0.184350,	0.143875,	0.155960,	0.0436759,	-0.0150529,	0.130397,	0.0130835,	0.121634,	0.0267802,	0.186842,	0.248364,	-0.0215119,	0.0581501,	0.0477378,	0.00324500,
 	0.0143688,	0.128357,	0.0833687,	0.191658,	0.0580288,	0.00615814,	0.0693420,	0.0190649,	0.104279,	0.143015,	0.0750892,	-0.0363092,	0.0802921,	0.0772238,	0.125954,	-0.0593067,	-0.138304,	-0.0929959,	0.124251,	0.146247,	-0.126645,	0.0590724,	0.00773982,	0.183872,	0.137481,
 	0.119684,	0.129835,	0.206718,	0.0701958,	0.0327425,	-0.0674654,	0.0775406,	-0.0136550,	0.104009,	0.0916349,	0.106642,	-0.0430432,	0.101509,	0.150844,	-0.0603311,	0.00567141,	0.0407102,	-0.0543170,	0.00757337,	-0.0142086,	-0.0332820,	0.147931,	-0.0569176,	0.0221893,	0.128629,
 	-0.00274248,	-0.0713013,	0.183775,	0.0369703,	-0.00830024,	0.174791,	0.0123272,	0.127730,	0.0761910,	0.0912600,	0.142046,	0.0642878,	0.0666131,	0.0135882,	0.0268936,	0.105024,	-0.0415101,	-0.00549349,	0.187550,	-0.0548287,	-0.0171056,	0.0965051,	-0.0889009,	0.0697539,	0.127154,
 	-0.0647723,	0.159954,	0.159550,	0.236018,	0.0798029,	0.159801,	-0.0274560,	0.0373517,	-0.0530641,	-0.116258,	-0.0676559,	-0.0585082,	-0.0669037,	-0.0667792,	-0.0870338,	-0.0719099,	-0.0685894,	-0.0122288,	0.250616,	-0.107807,	-0.149543,	-0.0246616,	-0.139689,	0.134376,	-0.0574912,
 	-0.0253929,	0.102310,	-0.00609640,	0.181781,	0.140642,	0.0156732,	-0.0593873,	0.0245795,	-0.00780289,	-0.000345920,	0.0247886,	0.0875142,	0.225037,	-0.0186426,	0.0860156,	0.0649388,	-0.103607,	0.150167,	0.253389,	0.228437,	0.116453,	0.191071,	-0.0742712,	-0.000407151,	0.00254470,
 	0.145564,	0.111451,	0.123109,	0.190594,	0.0404225,	0.106270,	0.0843325,	-0.0121850,	0.117684,	0.0949091,	0.131282,	-0.0165672,	0.0883460,	0.0316874,	0.0307881,	-0.0440972,	0.0600889,	-0.0440150,	0.0281920,	-0.00438135,	-0.0726354,	0.141792,	-0.0977896,	0.202814,	0.142446,
 	-0.0279472,	0.0845485,	0.227624,	0.286668,	-0.0159770,	0.217000,	0.178403,	0.215513,	0.0434695,	0.0733257,	0.171304,	0.0954001,	0.0784994,	0.156730,	0.0942309,	0.126264,	0.0241948,	0.136318,	0.261508,	0.0661350,	0.182579,	0.0659736,	0.0478374,	0.292234,	0.0849629) 
 b.b = VectorD(0.409976,	0.267291,	0.0963372,	0.215433,	0.252398,	0.137812,	0.317360,	0.359356,	0.346766,	0.319100,	0.256496,	0.181405,	0.227367,	0.301181,	0.344931,	0.395343,	0.479097,	0.214857,	0.166609,	0.236963,	0.307050,	0.301602,	0.236781,	0.125732,	0.167453), b.w = 
MatrixD(0.171573,	0.139004,	0.00156148,	0.152897,	0.0836528,	-0.000791821,	0.118507,	0.230131,	0.214432,	0.210179,	0.102038,	0.00163633,
 	-0.00412204,	0.0841612,	0.163094,	0.111960,	0.163881,	0.0852130,	0.0616890,	0.0114006,	0.0554696,	0.0302975,	0.0152013,	0.0364322,
 	-0.175694,	-0.0215552,	0.211460,	-0.140054,	-0.0751515,	0.269591,	-0.0258978,	-0.0585436,	-0.0629571,	-0.225925,	0.0318512,	0.0505762,
 	-0.0655425,	0.0894507,	0.0426948,	0.0452089,	-0.0543538,	0.121042,	0.0339174,	-0.0781228,	-0.106536,	-0.0276903,	-0.0485127,	0.126062,
 	0.0517290,	0.0202629,	0.0521435,	0.0559988,	0.163182,	0.154195,	0.0769952,	0.0835590,	0.104826,	0.0233068,	0.158241,	0.0491611,
 	0.100806,	0.0367389,	0.0902764,	0.0645290,	-0.0142559,	0.0360118,	0.0142690,	0.0353839,	-0.0250336,	-0.123338,	-0.0494069,	0.0873583,
 	0.0326800,	0.0828756,	0.117560,	0.0959008,	0.0463322,	0.135691,	0.134784,	0.0944885,	0.137535,	0.121534,	0.0512019,	0.195788,
 	0.0348996,	0.0752830,	0.176880,	0.118033,	0.0124211,	0.0605835,	0.201073,	0.144362,	0.116156,	0.0566401,	0.133496,	0.0169010,
 	0.116014,	0.0316441,	0.101010,	0.0977766,	0.0603541,	0.0380255,	0.128311,	0.115930,	0.0799676,	0.116830,	0.136269,	0.105608,
 	0.0912780,	0.149100,	0.148293,	0.152890,	0.161778,	0.0316519,	0.0141631,	0.135958,	0.0398092,	0.138578,	0.0739172,	0.141071,
 	0.127347,	-0.0217730,	0.0706298,	0.0281081,	0.0215363,	0.170014,	0.129959,	0.0284461,	0.110910,	0.0577289,	0.0300874,	0.164743,
 	0.0821759,	0.139124,	0.177153,	0.121234,	0.0538500,	0.150912,	0.136541,	0.164609,	0.0652068,	0.0417059,	-0.00184050,	0.125554,
 	0.119655,	-0.0306387,	0.167950,	0.0530542,	0.139816,	0.207200,	0.110620,	0.0499283,	0.110222,	-0.00292562,	0.0394750,	0.00439163,
 	0.116529,	0.0384099,	0.132980,	0.100404,	0.128550,	0.0376566,	0.130875,	0.149411,	0.00349650,	0.0587452,	0.102293,	0.0101806,
 	0.0761029,	0.0615677,	0.0192891,	0.203362,	0.0356953,	0.0426494,	0.175167,	0.126748,	0.0627865,	0.243049,	0.110378,	0.0716819,
 	0.226626,	0.135494,	0.148516,	0.157713,	0.141008,	0.169108,	0.146628,	0.188586,	0.124576,	0.138553,	0.179910,	0.0527379,
 	0.121752,	0.239336,	0.0134813,	0.115031,	0.187522,	-0.00771631,	0.159051,	0.264529,	0.203571,	0.273203,	0.155537,	0.183872,
 	0.156824,	0.161262,	0.0897690,	0.124337,	0.0628891,	0.00345436,	0.0445497,	0.0567292,	0.0516405,	0.0638046,	0.0550388,	0.0936345,
 	0.0529106,	0.00704042,	0.217690,	-0.0652190,	-0.0290306,	0.128918,	-0.0447711,	0.00420099,	-0.0675952,	-0.0781631,	0.0444238,	0.0216217,
 	0.127845,	0.125495,	0.0350291,	-0.00876807,	0.0507485,	0.0314600,	0.0256105,	0.0353823,	0.0818533,	0.174911,	0.0247607,	0.111181,
 	0.186473,	0.0695222,	0.113594,	0.263811,	0.235856,	0.105165,	0.230591,	0.109738,	0.108075,	0.146570,	0.239911,	0.130504,
 	0.0594138,	0.127462,	0.133457,	0.0552031,	0.106540,	0.0979185,	0.0983099,	0.0250811,	0.0698513,	-0.0526238,	0.0933722,	0.102541,
 	0.0696739,	0.0451612,	0.178476,	0.00193508,	0.0494837,	0.0958201,	0.0139602,	0.146768,	-0.0248713,	0.141547,	0.159841,	0.0762333,
 	0.0125915,	0.0675496,	0.156296,	-0.0425367,	0.110206,	0.138981,	0.145595,	-0.0240796,	0.0176196,	0.0637157,	0.0425258,	0.0569864,
 	0.0344123,	0.0376010,	0.208856,	0.0197221,	0.0610469,	0.211846,	0.00786896,	0.0317532,	-0.0709114,	-0.0791424,	0.0973162,	0.0758408) 
 b.b = VectorD(0.425856,	0.344858,	0.00208157,	0.384436,	0.211105,	-0.0102125,	0.296996,	0.569479,	0.525286,	0.528611,	0.260731,	0.00708398), b.w = 
MatrixD(0.359681,
 	0.231998,
 	-0.273549,
 	0.360478,
 	0.174880,
 	-0.310453,
 	0.212268,
 	0.459766,
 	0.447300,
 	0.582857,
 	0.181614,
 	-0.0969575) 
 b.b = VectorD(1.53171))
    ----------------------------------------------------------------------------
    fitMap     qof = 
		rSq 	 -> VectorD(0.289508) 
		rSqBar 	 -> VectorD(0.287763) 
		sst 	 -> VectorD(3840.99) 
		sse 	 -> VectorD(2728.99) 
		mse0 	 -> VectorD(0.557165) 
		rmse 	 -> VectorD(0.746435) 
		mae 	 -> VectorD(0.580674) 
		dfm 	 -> VectorD(12.0000) 
		df 	 -> VectorD(4886.00) 
		fStat 	 -> VectorD(165.910) 
		aic 	 -> VectorD(-5491.56) 
		bic 	 -> VectorD(-5407.10) 
		mape 	 -> VectorD(10.2894) 
		smape 	 -> VectorD(9.96457) 

    ----------------------------------------------------------------------------
        
Run + title
--------------------
| Cross-Validation |
--------------------
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2224.706872896406,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.294633,
 	0.292901,
 	713.957,
 	503.602,
 	0.514404,
 	0.717220,
 	0.551950,
 	12.0000,
 	4886.00,
 	170.075,
 	-1039.21,
 	-975.687,
 	9.68812,
 	9.48249)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2150.7192468880394,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.302465,
 	0.300752,
 	817.783,
 	570.432,
 	0.582668,
 	0.763327,
 	0.595737,
 	12.0000,
 	4886.00,
 	176.556,
 	-1099.28,
 	-1035.75,
 	10.5522,
 	10.2107)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2181.846978212107,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.262596,
 	0.260785,
 	724.415,
 	534.186,
 	0.545645,
 	0.738678,
 	0.580204,
 	12.0000,
 	4886.00,
 	144.996,
 	-1066.70,
 	-1003.17,
 	10.2270,
 	9.93757)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2179.221132506905,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.300643,
 	0.298926,
 	776.501,
 	543.051,
 	0.554700,
 	0.744782,
 	0.575916,
 	12.0000,
 	4886.00,
 	175.035,
 	-1074.67,
 	-1011.14,
 	10.3587,
 	9.97494)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2122.5314951778055,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.268529,
 	0.266732,
 	802.090,
 	586.706,
 	0.599291,
 	0.774139,
 	0.601910,
 	12.0000,
 	4886.00,
 	149.474,
 	-1113.90,
 	-1050.38,
 	10.6194,
 	10.2734)
-----------------------------------------------
| showQofStatTable: Statistical Table for QoF |
-----------------------------------------------
|        name |   num |        min |        max |       mean |      stdev |   interval |
----------------------------------------------------------------------------------------
|         rSq |     5 |      0.263 |      0.302 |      0.286 |      0.019 |      0.023 |
|      rSqBar |     5 |      0.261 |      0.301 |      0.284 |      0.019 |      0.023 |
|         sst |     5 |    713.957 |    817.783 |    766.949 |     46.172 |     57.342 |
|         sse |     5 |    503.602 |    586.706 |    547.595 |     32.354 |     40.180 |
|        mse0 |     5 |      0.514 |      0.599 |      0.559 |      0.033 |      0.041 |
|        rmse |     5 |      0.717 |      0.774 |      0.748 |      0.022 |      0.028 |
|         mae |     5 |      0.552 |      0.602 |      0.581 |      0.020 |      0.024 |
|         dfm |     5 |     12.000 |     12.000 |     12.000 |      0.000 |      0.000 |
|          df |     5 |   4886.000 |   4886.000 |   4886.000 |      0.000 |      0.000 |
|       fStat |     5 |    144.996 |    176.556 |    163.227 |     14.879 |     18.478 |
|         aic |     5 |  -1113.901 |  -1039.212 |  -1078.751 |     29.077 |     36.112 |
|         bic |     5 |  -1050.376 |   -975.687 |  -1015.226 |     29.077 |     36.112 |
|        mape |     5 |      9.688 |     10.619 |     10.289 |      0.370 |      0.460 |
|       smape |     5 |      9.482 |     10.273 |      9.976 |      0.312 |      0.387 |
----------------------------------------------------------------------------------------
----------------------------------------
| Feature Selection Technique: Forward |
----------------------------------------
-------------------------------------------------------------------------------------
| forwardSelAll: (l = 0) INITIAL variable (0, intercept) => cols = LinkedHashSet(0) |
-------------------------------------------------------------------------------------
optimize: bSize = 20, nB = 244
ending epoch = (3810.4389244957956,400)
optimize: bSize = 20, nB = 244
ending epoch = (3689.7138352866596,400)
optimize: bSize = 20, nB = 244
ending epoch = (3635.7719064004177,400)
optimize: bSize = 20, nB = 244
ending epoch = (3785.970599475877,400)
optimize: bSize = 20, nB = 244
ending epoch = (3518.3073296424423,400)
optimize: bSize = 20, nB = 244
ending epoch = (3636.5758227585075,400)
optimize: bSize = 20, nB = 244
ending epoch = (3637.121880957082,400)
optimize: bSize = 20, nB = 244
ending epoch = (3413.0550320889565,400)
optimize: bSize = 20, nB = 244
ending epoch = (3807.083138967699,400)
optimize: bSize = 20, nB = 244
ending epoch = (3806.5474404981283,400)
optimize: bSize = 20, nB = 244
ending epoch = (3091.13818348631,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2512.6305515039994,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.189751,
 	0.189420,
 	713.957,
 	578.483,
 	0.590891,
 	0.768695,
 	0.612872,
 	2.00000,
 	4896.00,
 	573.295,
 	-1126.60,
 	-1111.94,
 	10.8076,
 	10.5262)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2427.8946406714294,384)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.193612,
 	0.193283,
 	817.783,
 	659.451,
 	0.673596,
 	0.820729,
 	0.654768,
 	2.00000,
 	4896.00,
 	587.760,
 	-1190.83,
 	-1176.17,
 	11.7763,
 	11.2766)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2427.8946406714294,-3)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.178177,
 	0.177841,
 	724.415,
 	595.341,
 	0.608111,
 	0.779815,
 	0.620590,
 	2.00000,
 	4896.00,
 	530.743,
 	-1139.98,
 	-1125.32,
 	11.0328,
 	10.6566)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2427.8946406714294,-3)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.234528,
 	0.234215,
 	776.501,
 	594.389,
 	0.607139,
 	0.779191,
 	0.626064,
 	2.00000,
 	4896.00,
 	750.027,
 	-1139.22,
 	-1124.56,
 	11.3943,
 	10.8859)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2425.7104279254754,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.173638,
 	0.173301,
 	802.090,
 	662.816,
 	0.677034,
 	0.822821,
 	0.658938,
 	2.00000,
 	4896.00,
 	514.383,
 	-1193.50,
 	-1178.84,
 	11.6145,
 	11.2764)
----------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 1) ADD variable (11, alcohol) => cols = LinkedHashSet(0, 11) @ 0.19448551616017418 |
----------------------------------------------------------------------------------------------------------
optimize: bSize = 20, nB = 244
ending epoch = (3105.0132072535966,400)
optimize: bSize = 20, nB = 244
ending epoch = (2932.475909926577,400)
optimize: bSize = 20, nB = 244
ending epoch = (3105.610583988637,400)
optimize: bSize = 20, nB = 244
ending epoch = (3071.8282352368683,99)
optimize: bSize = 20, nB = 244
ending epoch = (3111.7831546142907,400)
optimize: bSize = 20, nB = 244
ending epoch = (3078.1907783099564,400)
optimize: bSize = 20, nB = 244
ending epoch = (3116.9489208104096,400)
optimize: bSize = 20, nB = 244
ending epoch = (3115.944186698165,400)
optimize: bSize = 20, nB = 244
ending epoch = (3071.7909994579904,267)
optimize: bSize = 20, nB = 244
ending epoch = (3100.8666998190715,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2391.4570195080396,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.242813,
 	0.242349,
 	713.957,
 	540.599,
 	0.552195,
 	0.743098,
 	0.577063,
 	3.00000,
 	4895.00,
 	523.240,
 	-1091.95,
 	-1072.40,
 	10.1034,
 	9.87087)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2308.971193808777,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.244013,
 	0.243550,
 	817.783,
 	618.233,
 	0.631495,
 	0.794667,
 	0.619074,
 	3.00000,
 	4895.00,
 	526.660,
 	-1156.89,
 	-1137.34,
 	10.9287,
 	10.6169)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2353.1574702267076,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.209502,
 	0.209018,
 	724.415,
 	572.648,
 	0.584932,
 	0.764808,
 	0.596682,
 	3.00000,
 	4895.00,
 	432.434,
 	-1118.76,
 	-1099.21,
 	10.3994,
 	10.2010)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2356.2310072600476,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.273461,
 	0.273016,
 	776.501,
 	564.158,
 	0.576259,
 	0.759117,
 	0.593265,
 	3.00000,
 	4895.00,
 	614.141,
 	-1111.65,
 	-1092.11,
 	10.6353,
 	10.2749)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2290.348010664263,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.211046,
 	0.210563,
 	802.090,
 	632.812,
 	0.646386,
 	0.803981,
 	0.626682,
 	3.00000,
 	4895.00,
 	436.473,
 	-1169.08,
 	-1149.54,
 	10.9822,
 	10.6918)
---------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 2) ADD variable (2, volatile acidity) => cols = LinkedHashSet(0, 11, 2) @ 0.23587757711337753 |
---------------------------------------------------------------------------------------------------------------------
optimize: bSize = 20, nB = 244
ending epoch = (2896.894961273586,400)
optimize: bSize = 20, nB = 244
ending epoch = (2913.2193833931738,400)
optimize: bSize = 20, nB = 244
ending epoch = (2854.9216951072017,204)
optimize: bSize = 20, nB = 244
ending epoch = (2925.8243952588573,400)
optimize: bSize = 20, nB = 244
ending epoch = (2863.571133648151,400)
optimize: bSize = 20, nB = 244
ending epoch = (2882.030405634697,400)
optimize: bSize = 20, nB = 244
ending epoch = (2904.1577339589926,400)
optimize: bSize = 20, nB = 244
ending epoch = (2882.0051497063223,400)
optimize: bSize = 20, nB = 244
ending epoch = (2906.9117569255377,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2337.8630491294384,198)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.272464,
 	0.271869,
 	713.957,
 	519.429,
 	0.530571,
 	0.728403,
 	0.565914,
 	4.00000,
 	4894.00,
 	458.204,
 	-1071.04,
 	-1046.61,
 	9.92305,
 	9.68483)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2261.9004291993165,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.263851,
 	0.263249,
 	817.783,
 	602.011,
 	0.614924,
 	0.784171,
 	0.610876,
 	4.00000,
 	4894.00,
 	438.527,
 	-1141.80,
 	-1117.37,
 	10.7345,
 	10.4789)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2254.578455238671,230)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.230883,
 	0.230255,
 	724.415,
 	557.159,
 	0.569111,
 	0.754394,
 	0.592804,
 	4.00000,
 	4894.00,
 	367.286,
 	-1103.37,
 	-1078.94,
 	10.4332,
 	10.1411)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2301.4088662975014,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.271702,
 	0.271107,
 	776.501,
 	565.523,
 	0.577654,
 	0.760036,
 	0.590130,
 	4.00000,
 	4894.00,
 	456.445,
 	-1110.54,
 	-1086.10,
 	10.6413,
 	10.2132)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2248.9763763042097,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.228600,
 	0.227969,
 	802.090,
 	618.732,
 	0.632004,
 	0.794987,
 	0.618535,
 	4.00000,
 	4894.00,
 	362.577,
 	-1156.13,
 	-1131.70,
 	10.8801,
 	10.5539)
--------------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 3) ADD variable (6, free sulfur dioxide) => cols = LinkedHashSet(0, 11, 2, 6) @ 0.2553431370801278 |
--------------------------------------------------------------------------------------------------------------------------
optimize: bSize = 20, nB = 244
ending epoch = (2894.817857212837,400)
optimize: bSize = 20, nB = 244
ending epoch = (2903.924382437207,359)
optimize: bSize = 20, nB = 244
ending epoch = (2845.6839757393295,400)
optimize: bSize = 20, nB = 244
ending epoch = (2920.896428121929,112)
optimize: bSize = 20, nB = 244
ending epoch = (2898.3699835754096,400)
optimize: bSize = 20, nB = 244
ending epoch = (2883.7247633385005,400)
optimize: bSize = 20, nB = 244
ending epoch = (2905.410847800318,400)
optimize: bSize = 20, nB = 244
ending epoch = (2896.221457733257,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2325.838493748581,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.282859,
 	0.282126,
 	713.957,
 	512.008,
 	0.522991,
 	0.723181,
 	0.559544,
 	5.00000,
 	4893.00,
 	385.985,
 	-1062.35,
 	-1033.03,
 	9.81910,
 	9.56783)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2237.851198894553,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.271928,
 	0.271184,
 	817.783,
 	595.405,
 	0.608177,
 	0.779857,
 	0.609570,
 	5.00000,
 	4893.00,
 	365.499,
 	-1134.29,
 	-1104.97,
 	10.7121,
 	10.4472)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2272.2923175064334,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.226593,
 	0.225803,
 	724.415,
 	560.267,
 	0.572285,
 	0.756496,
 	0.592583,
 	5.00000,
 	4893.00,
 	286.710,
 	-1103.98,
 	-1074.66,
 	10.3631,
 	10.1324)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2268.7467079525813,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.276354,
 	0.275615,
 	776.501,
 	561.911,
 	0.573964,
 	0.757604,
 	0.591129,
 	5.00000,
 	4893.00,
 	373.720,
 	-1105.40,
 	-1076.08,
 	10.5833,
 	10.2287)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2221.7175410958207,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.240654,
 	0.239878,
 	802.090,
 	609.064,
 	0.622129,
 	0.788751,
 	0.613422,
 	5.00000,
 	4893.00,
 	310.140,
 	-1146.08,
 	-1116.76,
 	10.7847,
 	10.4677)
------------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 4) ADD variable (4, residual sugar) => cols = LinkedHashSet(0, 11, 2, 6, 4) @ 0.2600725986162483 |
------------------------------------------------------------------------------------------------------------------------
optimize: bSize = 20, nB = 244
ending epoch = (2826.862554523989,400)
optimize: bSize = 20, nB = 244
ending epoch = (2838.982661890144,400)
optimize: bSize = 20, nB = 244
ending epoch = (2831.0557337239675,400)
optimize: bSize = 20, nB = 244
ending epoch = (2850.257704694241,238)
optimize: bSize = 20, nB = 244
ending epoch = (2806.3573200152036,400)
optimize: bSize = 20, nB = 244
ending epoch = (2818.9604543724977,400)
optimize: bSize = 20, nB = 244
ending epoch = (2822.762468461503,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2302.3474181922297,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.294245,
 	0.293379,
 	713.957,
 	503.879,
 	0.514687,
 	0.717417,
 	0.559616,
 	6.00000,
 	4892.00,
 	339.931,
 	-1052.66,
 	-1018.45,
 	9.83718,
 	9.57261)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2215.0765978051622,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.280529,
 	0.279647,
 	817.783,
 	588.371,
 	0.600992,
 	0.775237,
 	0.606409,
 	6.00000,
 	4892.00,
 	317.907,
 	-1126.51,
 	-1092.30,
 	10.6719,
 	10.3868)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2248.295194478341,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.235433,
 	0.234495,
 	724.415,
 	553.864,
 	0.565745,
 	0.752160,
 	0.591816,
 	6.00000,
 	4892.00,
 	251.065,
 	-1096.35,
 	-1062.14,
 	10.3379,
 	10.1232)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2249.420579955252,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.287551,
 	0.286678,
 	776.501,
 	553.217,
 	0.565083,
 	0.751720,
 	0.587488,
 	6.00000,
 	4892.00,
 	329.077,
 	-1095.78,
 	-1061.57,
 	10.5602,
 	10.1707)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2196.4238214372713,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.249339,
 	0.248419,
 	802.090,
 	602.097,
 	0.615013,
 	0.784227,
 	0.612644,
 	6.00000,
 	4892.00,
 	270.821,
 	-1138.50,
 	-1104.30,
 	10.7938,
 	10.4569)
--------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 5) ADD variable (8, density) => cols = LinkedHashSet(0, 11, 2, 6, 4, 8) @ 0.2685599305883898 |
--------------------------------------------------------------------------------------------------------------------
optimize: bSize = 20, nB = 244
ending epoch = (2822.11149791968,400)
optimize: bSize = 20, nB = 244
ending epoch = (2828.1319354859,400)
optimize: bSize = 20, nB = 244
ending epoch = (2824.1112202346253,400)
optimize: bSize = 20, nB = 244
ending epoch = (2828.311447172295,400)
optimize: bSize = 20, nB = 244
