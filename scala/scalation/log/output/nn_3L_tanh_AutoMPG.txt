readFileIntoArray: C:\Users\spenc\Desktop\UGA_projects\data_science\DS2_P2\scala\scalation\data\auto_mpg_fixed_cleaned.csv
load: read 99 data rows so far ...
load: read 199 data rows so far ...
load: read 299 data rows so far ...
load: read in an 392-by-8 matrix from auto_mpg_fixed_cleaned.csv
--------------------------------------
| NeuralNet_3L for AutoMPG with tanh |
--------------------------------------
 scaled: x = 
MatrixD(1.00000,	1.00000,	0.617571,	0.456522,	0.536150,	0.238095,	0.00000,
 	1.00000,	1.00000,	0.728682,	0.646739,	0.589736,	0.208333,	0.00000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.516870,	0.178571,	0.00000,
 	1.00000,	1.00000,	0.609819,	0.565217,	0.516019,	0.238095,	0.00000,
 	1.00000,	1.00000,	0.604651,	0.510870,	0.520556,	0.148810,	0.00000,
 	1.00000,	1.00000,	0.932817,	0.826087,	0.773462,	0.119048,	0.00000,
 	1.00000,	1.00000,	0.997416,	0.945652,	0.777148,	0.0595238,	0.00000,
 	1.00000,	1.00000,	0.961240,	0.918478,	0.765240,	0.0297619,	0.00000,
 	1.00000,	1.00000,	1.00000,	0.972826,	0.797278,	0.119048,	0.00000,
 	1.00000,	1.00000,	0.832041,	0.782609,	0.634250,	0.0297619,	0.00000,
 	1.00000,	1.00000,	0.813953,	0.673913,	0.552878,	0.119048,	0.00000,
 	1.00000,	1.00000,	0.702842,	0.619565,	0.565920,	0.00000,	0.00000,
 	1.00000,	1.00000,	0.857881,	0.565217,	0.609016,	0.0892857,	0.00000,
 	1.00000,	1.00000,	1.00000,	0.972826,	0.417635,	0.119048,	0.00000,
 	1.00000,	0.200000,	0.116279,	0.266304,	0.215197,	0.416667,	0.00000,
 	1.00000,	0.600000,	0.335917,	0.266304,	0.345903,	0.446429,	0.00000,
 	1.00000,	0.600000,	0.338501,	0.277174,	0.329175,	0.446429,	0.00000,
 	1.00000,	0.600000,	0.341085,	0.211957,	0.276155,	0.476190,	0.00000,
 	1.00000,	0.200000,	0.0749354,	0.228261,	0.146583,	0.386905,	0.00000,
 	1.00000,	0.200000,	0.0749354,	0.00000,	0.0629430,	0.744048,	0.00000,
 	1.00000,	0.200000,	0.108527,	0.222826,	0.300255,	0.565476,	0.00000,
 	1.00000,	0.200000,	0.100775,	0.239130,	0.231642,	0.386905,	0.00000,
 	1.00000,	0.200000,	0.0930233,	0.266304,	0.216048,	0.565476,	0.00000,
 	1.00000,	0.200000,	0.136951,	0.364130,	0.176070,	0.267857,	0.00000,
 	1.00000,	0.600000,	0.338501,	0.239130,	0.293451,	0.416667,	0.00000,
 	1.00000,	1.00000,	0.754522,	0.918478,	0.851148,	0.357143,	0.00000,
 	1.00000,	1.00000,	0.617571,	0.836957,	0.783385,	0.416667,	0.00000,
 	1.00000,	1.00000,	0.645995,	0.891304,	0.785086,	0.327381,	0.00000,
 	1.00000,	1.00000,	0.609819,	0.798913,	0.884321,	0.625000,	0.00000,
 	1.00000,	0.200000,	0.0749354,	0.228261,	0.146583,	0.386905,	0.0833333,
 	1.00000,	0.200000,	0.186047,	0.239130,	0.184576,	0.446429,	0.0833333,
 	1.00000,	0.200000,	0.116279,	0.266304,	0.174369,	0.357143,	0.0833333,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.289481,	0.297619,	0.0833333,
 	1.00000,	0.600000,	0.405685,	0.320652,	0.517720,	0.446429,	0.0833333,
 	1.00000,	0.600000,	0.470284,	0.293478,	0.486532,	0.446429,	0.0833333,
 	1.00000,	0.600000,	0.470284,	0.228261,	0.478877,	0.446429,	0.0833333,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.474908,	0.446429,	0.0833333,
 	1.00000,	1.00000,	0.728682,	0.646739,	0.736036,	0.238095,	0.0833333,
 	1.00000,	1.00000,	0.857881,	0.701087,	0.808336,	0.208333,	0.0833333,
 	1.00000,	1.00000,	0.731266,	0.581522,	0.720442,	0.327381,	0.0833333,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.703998,	0.297619,	0.0833333,
 	1.00000,	1.00000,	0.813953,	0.728261,	0.947547,	0.208333,	0.0833333,
 	1.00000,	1.00000,	0.857881,	0.673913,	0.888290,	0.238095,	0.0833333,
 	1.00000,	1.00000,	0.857881,	0.701087,	1.00000,	0.238095,	0.0833333,
 	1.00000,	0.600000,	0.490956,	0.347826,	0.382478,	0.327381,	0.0833333,
 	1.00000,	0.200000,	0.186047,	0.141304,	0.225404,	0.654762,	0.0833333,
 	1.00000,	0.600000,	0.470284,	0.293478,	0.473207,	0.416667,	0.0833333,
 	1.00000,	0.600000,	0.470284,	0.228261,	0.432662,	0.386905,	0.0833333,
 	1.00000,	0.200000,	0.139535,	0.217391,	0.172101,	0.357143,	0.0833333,
 	1.00000,	0.200000,	0.124031,	0.239130,	0.144599,	0.357143,	0.0833333,
 	1.00000,	0.200000,	0.0284238,	0.130435,	0.130706,	0.684524,	0.0833333,
 	1.00000,	0.200000,	0.0516796,	0.163043,	0.128154,	0.386905,	0.0833333,
 	1.00000,	0.200000,	0.00775194,	0.103261,	0.0453643,	0.654762,	0.0833333,
 	1.00000,	0.200000,	0.0103359,	0.125000,	0.00000,	0.595238,	0.0833333,
 	1.00000,	0.200000,	0.0749354,	0.0760870,	0.0626595,	0.654762,	0.0833333,
 	1.00000,	0.200000,	0.0594315,	0.130435,	0.0969663,	0.744048,	0.0833333,
 	1.00000,	0.200000,	0.116279,	0.266304,	0.188546,	0.446429,	0.166667,
 	1.00000,	0.200000,	0.0762274,	0.184783,	0.145449,	0.535714,	0.166667,
 	1.00000,	0.200000,	0.0749354,	0.0434783,	0.181741,	0.922619,	0.166667,
 	1.00000,	0.200000,	0.186047,	0.239130,	0.225404,	0.684524,	0.166667,
 	1.00000,	0.200000,	0.139535,	0.217391,	0.173802,	0.505952,	0.166667,
 	1.00000,	1.00000,	0.728682,	0.646739,	0.754466,	0.238095,	0.166667,
 	1.00000,	1.00000,	0.857881,	0.701087,	0.785937,	0.238095,	0.166667,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.715055,	0.327381,	0.166667,
 	1.00000,	1.00000,	0.731266,	0.581522,	0.713354,	0.297619,	0.166667,
 	1.00000,	1.00000,	0.609819,	0.565217,	0.583782,	0.208333,	0.166667,
 	1.00000,	1.00000,	0.932817,	0.880435,	0.856252,	0.178571,	0.166667,
 	1.00000,	1.00000,	0.728682,	0.592391,	0.819110,	0.327381,	0.166667,
 	1.00000,	1.00000,	0.728682,	0.619565,	0.806067,	0.327381,	0.166667,
 	1.00000,	1.00000,	0.857881,	0.782609,	0.796428,	0.267857,	0.166667,
 	1.00000,	0.00000,	0.00516796,	0.277174,	0.203289,	0.327381,	0.166667,
 	1.00000,	1.00000,	0.609819,	0.565217,	0.646158,	0.267857,	0.166667,
 	1.00000,	1.00000,	0.617571,	0.456522,	0.704565,	0.357143,	0.166667,
 	1.00000,	1.00000,	0.604651,	0.510870,	0.760136,	0.476190,	0.166667,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.698611,	0.357143,	0.166667,
 	1.00000,	0.200000,	0.136951,	0.358696,	0.374256,	0.386905,	0.166667,
 	1.00000,	0.200000,	0.136951,	0.163043,	0.254607,	0.595238,	0.166667,
 	1.00000,	0.200000,	0.134367,	0.222826,	0.387298,	0.684524,	0.166667,
 	1.00000,	0.200000,	0.0723514,	0.125000,	0.163312,	0.595238,	0.166667,
 	1.00000,	0.200000,	0.139535,	0.217391,	0.221718,	0.476190,	0.166667,
 	1.00000,	0.200000,	0.0749354,	0.250000,	0.191381,	0.535714,	0.166667,
 	1.00000,	0.200000,	0.134367,	0.277174,	0.253190,	0.386905,	0.166667,
 	1.00000,	0.200000,	0.0775194,	0.184783,	0.156223,	0.416667,	0.166667,
 	1.00000,	0.200000,	0.0749354,	0.228261,	0.138078,	0.505952,	0.166667,
 	1.00000,	1.00000,	0.728682,	0.701087,	0.705132,	0.297619,	0.250000,
 	1.00000,	1.00000,	0.609819,	0.565217,	0.583782,	0.208333,	0.250000,
 	1.00000,	1.00000,	0.728682,	0.538043,	0.673377,	0.297619,	0.250000,
 	1.00000,	1.00000,	0.604651,	0.494565,	0.688687,	0.386905,	0.250000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.613553,	0.267857,	0.250000,
 	1.00000,	1.00000,	0.932817,	0.826087,	0.946697,	0.208333,	0.250000,
 	1.00000,	1.00000,	0.857881,	0.565217,	0.808336,	0.238095,	0.250000,
 	1.00000,	1.00000,	0.731266,	0.608696,	0.779699,	0.297619,	0.250000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.743975,	0.386905,	0.250000,
 	1.00000,	1.00000,	0.961240,	0.918478,	0.885172,	0.178571,	0.250000,
 	1.00000,	1.00000,	1.00000,	0.972826,	0.946413,	0.178571,	0.250000,
 	1.00000,	1.00000,	0.754522,	0.701087,	0.626028,	0.178571,	0.250000,
 	1.00000,	0.600000,	0.405685,	0.320652,	0.427559,	0.505952,	0.250000,
 	1.00000,	0.600000,	0.470284,	0.293478,	0.472073,	0.595238,	0.250000,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.377658,	0.476190,	0.250000,
 	1.00000,	0.600000,	0.470284,	0.228261,	0.399206,	0.505952,	0.250000,
 	1.00000,	0.600000,	0.335917,	0.266304,	0.366033,	0.476190,	0.250000,
 	1.00000,	0.200000,	0.0749354,	0.00000,	0.0955486,	0.773810,	0.250000,
 	1.00000,	1.00000,	0.857881,	0.565217,	0.959456,	0.357143,	0.250000,
 	1.00000,	1.00000,	0.857881,	0.657609,	0.933655,	0.267857,	0.250000,
 	1.00000,	1.00000,	0.754522,	0.673913,	0.862206,	0.297619,	0.250000,
 	1.00000,	1.00000,	0.728682,	0.728261,	0.818259,	0.267857,	0.250000,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.333428,	0.416667,	0.250000,
 	1.00000,	0.200000,	0.0749354,	0.228261,	0.188829,	0.654762,	0.250000,
 	1.00000,	0.200000,	0.186047,	0.141304,	0.223419,	0.684524,	0.250000,
 	1.00000,	0.200000,	0.103359,	0.260870,	0.217182,	0.505952,	0.250000,
 	1.00000,	0.00000,	0.00516796,	0.239130,	0.144882,	0.327381,	0.250000,
 	1.00000,	0.200000,	0.139535,	0.211957,	0.197618,	0.625000,	0.250000,
 	1.00000,	0.600000,	0.224806,	0.331522,	0.243550,	0.357143,	0.250000,
 	1.00000,	0.200000,	0.0775194,	0.239130,	0.184860,	0.446429,	0.250000,
 	1.00000,	1.00000,	0.728682,	0.538043,	0.700028,	0.297619,	0.250000,
 	1.00000,	1.00000,	0.857881,	1.00000,	0.755600,	0.0892857,	0.250000,
 	1.00000,	0.200000,	0.00000,	0.0163043,	0.0720159,	0.684524,	0.250000,
 	1.00000,	0.200000,	0.124031,	0.157609,	0.154522,	0.446429,	0.250000,
 	1.00000,	0.200000,	0.118863,	0.244565,	0.274738,	0.357143,	0.250000,
 	1.00000,	0.200000,	0.136951,	0.358696,	0.355826,	0.446429,	0.250000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.506379,	0.178571,	0.250000,
 	1.00000,	0.200000,	0.136951,	0.347826,	0.296853,	0.357143,	0.250000,
 	1.00000,	0.600000,	0.227390,	0.413043,	0.338531,	0.327381,	0.250000,
 	1.00000,	1.00000,	0.728682,	0.728261,	0.581514,	0.178571,	0.250000,
 	1.00000,	0.600000,	0.335917,	0.266304,	0.422172,	0.505952,	0.333333,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.365183,	0.476190,	0.333333,
 	1.00000,	0.600000,	0.470284,	0.293478,	0.488517,	0.535714,	0.333333,
 	1.00000,	0.200000,	0.0284238,	0.114130,	0.0955486,	0.654762,	0.333333,
 	1.00000,	0.200000,	0.139535,	0.184783,	0.237596,	0.505952,	0.333333,
 	1.00000,	0.200000,	0.00775194,	0.103261,	0.0632265,	0.773810,	0.333333,
 	1.00000,	0.200000,	0.186047,	0.157609,	0.263397,	0.535714,	0.333333,
 	1.00000,	0.600000,	0.470284,	0.293478,	0.614687,	0.535714,	0.333333,
 	1.00000,	0.600000,	0.490956,	0.347826,	0.572441,	0.595238,	0.333333,
 	1.00000,	0.600000,	0.405685,	0.320652,	0.567054,	0.505952,	0.333333,
 	1.00000,	1.00000,	0.604651,	0.510870,	0.716756,	0.357143,	0.333333,
 	1.00000,	1.00000,	0.728682,	0.565217,	0.874965,	0.386905,	0.333333,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.806351,	0.327381,	0.333333,
 	1.00000,	1.00000,	0.604651,	0.510870,	0.857669,	0.476190,	0.333333,
 	1.00000,	1.00000,	0.609819,	0.565217,	0.749646,	0.446429,	0.333333,
 	1.00000,	0.200000,	0.0775194,	0.201087,	0.171817,	0.505952,	0.333333,
 	1.00000,	0.200000,	0.0284238,	0.114130,	0.0992345,	0.446429,	0.333333,
 	1.00000,	0.200000,	0.0749354,	0.173913,	0.194783,	0.386905,	0.333333,
 	1.00000,	0.200000,	0.0206718,	0.0326087,	0.0102070,	0.505952,	0.333333,
 	1.00000,	0.200000,	0.0387597,	0.0815217,	0.110576,	0.654762,	0.333333,
 	1.00000,	0.200000,	0.0568475,	0.157609,	0.145166,	0.386905,	0.333333,
 	1.00000,	0.200000,	0.0568475,	0.157609,	0.140346,	0.446429,	0.333333,
 	1.00000,	0.200000,	0.124031,	0.157609,	0.179473,	0.357143,	0.333333,
 	1.00000,	0.200000,	0.134367,	0.277174,	0.248370,	0.416667,	0.333333,
 	1.00000,	0.200000,	0.103359,	0.255435,	0.220584,	0.446429,	0.333333,
 	1.00000,	0.200000,	0.0284238,	0.114130,	0.109725,	0.476190,	0.333333,
 	1.00000,	0.600000,	0.405685,	0.266304,	0.468103,	0.476190,	0.416667,
 	1.00000,	0.600000,	0.470284,	0.320652,	0.523391,	0.476190,	0.416667,
 	1.00000,	0.600000,	0.470284,	0.141304,	0.515736,	0.773810,	0.416667,
 	1.00000,	0.600000,	0.470284,	0.141304,	0.438049,	0.684524,	0.416667,
 	1.00000,	1.00000,	0.857881,	0.673913,	0.866175,	0.208333,	0.416667,
 	1.00000,	1.00000,	0.728682,	0.538043,	0.801531,	0.357143,	0.416667,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.817976,	0.386905,	0.416667,
 	1.00000,	1.00000,	0.731266,	0.554348,	0.863056,	0.327381,	0.416667,
 	1.00000,	0.600000,	0.421189,	0.347826,	0.650411,	0.773810,	0.416667,
 	1.00000,	0.600000,	0.470284,	0.320652,	0.647576,	0.625000,	0.416667,
 	1.00000,	0.600000,	0.490956,	0.347826,	0.600227,	0.654762,	0.416667,
 	1.00000,	0.600000,	0.405685,	0.266304,	0.615821,	0.654762,	0.416667,
 	1.00000,	0.600000,	0.421189,	0.347826,	0.404310,	0.416667,	0.416667,
 	1.00000,	1.00000,	0.501292,	0.347826,	0.455912,	0.327381,	0.416667,
 	1.00000,	1.00000,	0.604651,	0.451087,	0.441168,	0.238095,	0.416667,
 	1.00000,	0.200000,	0.0749354,	0.157609,	0.158208,	0.476190,	0.416667,
 	1.00000,	0.200000,	0.186047,	0.201087,	0.290899,	0.535714,	0.416667,
 	1.00000,	0.600000,	0.423773,	0.293478,	0.368869,	0.476190,	0.416667,
 	1.00000,	0.200000,	0.186047,	0.173913,	0.277573,	0.625000,	0.416667,
 	1.00000,	0.200000,	0.170543,	0.271739,	0.308761,	0.327381,	0.416667,
 	1.00000,	0.200000,	0.0568475,	0.135870,	0.172952,	0.505952,	0.416667,
 	1.00000,	0.200000,	0.131783,	0.277174,	0.264247,	0.535714,	0.416667,
 	1.00000,	0.600000,	0.266150,	0.277174,	0.388716,	0.386905,	0.416667,
 	1.00000,	0.200000,	0.0568475,	0.130435,	0.0918628,	0.357143,	0.416667,
 	1.00000,	0.600000,	0.423773,	0.239130,	0.453076,	0.535714,	0.416667,
 	1.00000,	0.200000,	0.121447,	0.266304,	0.306493,	0.416667,	0.416667,
 	1.00000,	0.200000,	0.134367,	0.228261,	0.381060,	0.535714,	0.416667,
 	1.00000,	0.200000,	0.136951,	0.282609,	0.377658,	0.386905,	0.416667,
 	1.00000,	0.200000,	0.136951,	0.375000,	0.299972,	0.327381,	0.416667,
 	1.00000,	0.200000,	0.0594315,	0.0380435,	0.0516019,	0.565476,	0.416667,
 	1.00000,	0.200000,	0.100775,	0.217391,	0.241282,	0.446429,	0.500000,
 	1.00000,	0.200000,	0.124031,	0.190217,	0.172101,	0.529762,	0.500000,
 	1.00000,	0.200000,	0.186047,	0.250000,	0.271902,	0.410714,	0.500000,
 	1.00000,	0.200000,	0.0775194,	0.179348,	0.182024,	0.577381,	0.500000,
 	1.00000,	0.200000,	0.0852713,	0.201087,	0.166997,	0.434524,	0.500000,
 	1.00000,	1.00000,	0.612403,	0.510870,	0.737737,	0.297619,	0.500000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.730649,	0.297619,	0.500000,
 	1.00000,	1.00000,	0.609819,	0.402174,	0.666005,	0.351190,	0.500000,
 	1.00000,	1.00000,	0.731266,	0.576087,	0.737737,	0.285714,	0.500000,
 	1.00000,	0.600000,	0.405685,	0.293478,	0.459314,	0.440476,	0.500000,
 	1.00000,	0.600000,	0.470284,	0.320652,	0.493337,	0.386905,	0.500000,
 	1.00000,	0.600000,	0.341085,	0.190217,	0.396654,	0.571429,	0.500000,
 	1.00000,	0.600000,	0.423773,	0.239130,	0.417352,	0.571429,	0.500000,
 	1.00000,	0.200000,	0.0439276,	0.0326087,	0.119648,	0.845238,	0.500000,
 	1.00000,	0.200000,	0.0775194,	0.0760870,	0.156223,	0.839286,	0.500000,
 	1.00000,	0.200000,	0.0568475,	0.130435,	0.0918628,	0.369048,	0.500000,
 	1.00000,	0.200000,	0.0594315,	0.0380435,	0.0516019,	0.559524,	0.500000,
 	1.00000,	0.600000,	0.405685,	0.293478,	0.577828,	0.577381,	0.500000,
 	1.00000,	0.600000,	0.470284,	0.173913,	0.555997,	0.773810,	0.500000,
 	1.00000,	0.600000,	0.470284,	0.347826,	0.576127,	0.488095,	0.500000,
 	1.00000,	0.600000,	0.490956,	0.266304,	0.447973,	0.583333,	0.500000,
 	1.00000,	0.200000,	0.0749354,	0.135870,	0.0601077,	0.250000,	0.500000,
 	1.00000,	0.200000,	0.0439276,	0.130435,	0.106890,	0.535714,	0.500000,
 	1.00000,	0.200000,	0.0749354,	0.157609,	0.153672,	0.500000,	0.500000,
 	1.00000,	0.200000,	0.186047,	0.141304,	0.269918,	0.333333,	0.500000,
 	1.00000,	0.200000,	0.160207,	0.304348,	0.435781,	0.458333,	0.500000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.659768,	0.309524,	0.500000,
 	1.00000,	0.200000,	0.134367,	0.228261,	0.469804,	0.827381,	0.500000,
 	1.00000,	0.600000,	0.227390,	0.336957,	0.373405,	0.446429,	0.500000,
 	1.00000,	0.600000,	0.258398,	0.402174,	0.625744,	0.517857,	0.500000,
 	1.00000,	1.00000,	0.728682,	0.728261,	0.784519,	0.244048,	0.500000,
 	1.00000,	1.00000,	0.728682,	0.538043,	0.692373,	0.238095,	0.500000,
 	1.00000,	1.00000,	0.604651,	0.456522,	0.639921,	0.416667,	0.500000,
 	1.00000,	1.00000,	0.645995,	0.565217,	0.607315,	0.357143,	0.500000,
 	1.00000,	0.200000,	0.0775194,	0.119565,	0.122484,	0.625000,	0.583333,
 	1.00000,	0.200000,	0.111111,	0.184783,	0.153672,	0.404762,	0.583333,
 	1.00000,	0.200000,	0.0284238,	0.0652174,	0.0601077,	0.630952,	0.583333,
 	1.00000,	0.200000,	0.139535,	0.271739,	0.194783,	0.446429,	0.583333,
 	1.00000,	0.200000,	0.0439276,	0.130435,	0.0941310,	0.523810,	0.583333,
 	1.00000,	1.00000,	0.612403,	0.538043,	0.642756,	0.267857,	0.583333,
 	1.00000,	1.00000,	0.496124,	0.347826,	0.693791,	0.654762,	0.583333,
 	1.00000,	1.00000,	0.645995,	0.538043,	0.716473,	0.339286,	0.583333,
 	1.00000,	1.00000,	0.604651,	0.456522,	0.760420,	0.410714,	0.583333,
 	1.00000,	0.600000,	0.470284,	0.347826,	0.540686,	0.500000,	0.583333,
 	1.00000,	0.600000,	0.421189,	0.320652,	0.513751,	0.529762,	0.583333,
 	1.00000,	0.600000,	0.405685,	0.293478,	0.571874,	0.577381,	0.583333,
 	1.00000,	0.600000,	0.470284,	0.282609,	0.542104,	0.654762,	0.583333,
 	1.00000,	1.00000,	0.857881,	0.728261,	0.739155,	0.184524,	0.583333,
 	1.00000,	1.00000,	0.728682,	0.673913,	0.723561,	0.202381,	0.583333,
 	1.00000,	1.00000,	0.857881,	0.782609,	0.768925,	0.250000,	0.583333,
 	1.00000,	1.00000,	0.731266,	0.559783,	0.771761,	0.386905,	0.583333,
 	1.00000,	0.200000,	0.0749354,	0.173913,	0.0927134,	0.386905,	0.583333,
 	1.00000,	0.200000,	0.214470,	0.228261,	0.319535,	0.476190,	0.583333,
 	1.00000,	0.200000,	0.0749354,	0.157609,	0.184860,	0.607143,	0.583333,
 	1.00000,	0.200000,	0.186047,	0.233696,	0.323788,	0.464286,	0.583333,
 	1.00000,	0.200000,	0.0775194,	0.0923913,	0.124185,	0.535714,	0.583333,
 	1.00000,	0.200000,	0.0775194,	0.201087,	0.130990,	0.470238,	0.583333,
 	1.00000,	0.200000,	0.0749354,	0.114130,	0.105472,	0.500000,	0.583333,
 	1.00000,	0.200000,	0.0749354,	0.173913,	0.163595,	0.363095,	0.583333,
 	1.00000,	0.600000,	0.201550,	0.277174,	0.340800,	0.386905,	0.583333,
 	1.00000,	0.200000,	0.136951,	0.347826,	0.279841,	0.285714,	0.583333,
 	1.00000,	0.00000,	0.0310078,	0.347826,	0.313864,	0.327381,	0.583333,
 	1.00000,	0.200000,	0.0568475,	0.0108696,	0.105472,	0.803571,	0.666667,
 	1.00000,	0.200000,	0.0775194,	0.108696,	0.0530196,	0.380952,	0.666667,
 	1.00000,	0.200000,	0.0258398,	0.0326087,	0.105472,	0.678571,	0.666667,
 	1.00000,	0.200000,	0.0439276,	0.130435,	0.129572,	0.630952,	0.666667,
 	1.00000,	0.200000,	0.0594315,	0.0760870,	0.0530196,	0.500000,	0.666667,
 	1.00000,	1.00000,	0.496124,	0.347826,	0.496739,	0.446429,	0.666667,
 	1.00000,	1.00000,	0.645995,	0.510870,	0.601644,	0.309524,	0.666667,
 	1.00000,	1.00000,	0.604651,	0.505435,	0.554862,	0.285714,	0.666667,
 	1.00000,	0.600000,	0.421189,	0.320652,	0.544939,	0.666667,	0.666667,
 	1.00000,	0.600000,	0.341085,	0.266304,	0.437199,	0.607143,	0.666667,
 	1.00000,	0.600000,	0.341085,	0.211957,	0.383329,	0.464286,	0.666667,
 	1.00000,	0.200000,	0.186047,	0.228261,	0.313864,	0.440476,	0.666667,
 	1.00000,	0.600000,	0.405685,	0.293478,	0.515169,	0.547619,	0.666667,
 	1.00000,	0.600000,	0.423773,	0.239130,	0.452793,	0.547619,	0.666667,
 	1.00000,	0.600000,	0.421189,	0.320652,	0.500992,	0.464286,	0.666667,
 	1.00000,	0.600000,	0.341085,	0.211957,	0.413099,	0.517857,	0.666667,
 	1.00000,	0.600000,	0.405685,	0.347826,	0.569039,	0.636905,	0.666667,
 	1.00000,	0.600000,	0.490956,	0.402174,	0.509498,	0.422619,	0.666667,
 	1.00000,	1.00000,	0.612403,	0.538043,	0.513751,	0.309524,	0.666667,
 	1.00000,	0.600000,	0.421189,	0.646739,	0.519422,	0.321429,	0.666667,
 	1.00000,	1.00000,	0.604651,	0.505435,	0.451375,	0.190476,	0.666667,
 	1.00000,	1.00000,	0.645995,	0.510870,	0.699461,	0.339286,	0.666667,
 	1.00000,	0.200000,	0.0775194,	0.119565,	0.153672,	0.505952,	0.666667,
 	1.00000,	0.200000,	0.170543,	0.266304,	0.268500,	0.369048,	0.666667,
 	1.00000,	0.200000,	0.131783,	0.277174,	0.194783,	0.398810,	0.666667,
 	1.00000,	0.200000,	0.0956072,	0.157609,	0.174936,	0.386905,	0.666667,
 	1.00000,	0.200000,	0.170543,	0.266304,	0.255741,	0.404762,	0.666667,
 	1.00000,	0.200000,	0.227390,	0.320652,	0.320953,	0.517857,	0.666667,
 	1.00000,	0.200000,	0.214470,	0.211957,	0.352141,	0.571429,	0.666667,
 	1.00000,	0.200000,	0.131783,	0.277174,	0.224553,	0.410714,	0.666667,
 	1.00000,	0.400000,	0.162791,	0.309783,	0.345052,	0.470238,	0.666667,
 	1.00000,	0.600000,	0.245478,	0.429348,	0.432946,	0.333333,	0.666667,
 	1.00000,	0.200000,	0.136951,	0.375000,	0.335129,	0.458333,	0.666667,
 	1.00000,	0.600000,	0.245478,	0.472826,	0.509498,	0.464286,	0.666667,
 	1.00000,	0.200000,	0.0542636,	0.135870,	0.106890,	0.410714,	0.666667,
 	1.00000,	0.200000,	0.0775194,	0.119565,	0.148001,	0.511905,	0.666667,
 	1.00000,	0.600000,	0.421189,	0.375000,	0.462716,	0.440476,	0.750000,
 	1.00000,	0.600000,	0.341085,	0.211957,	0.390417,	0.607143,	0.750000,
 	1.00000,	0.200000,	0.186047,	0.228261,	0.362064,	0.553571,	0.750000,
 	1.00000,	0.600000,	0.423773,	0.239130,	0.468387,	0.607143,	0.750000,
 	1.00000,	0.600000,	0.405685,	0.347826,	0.495322,	0.511905,	0.750000,
 	1.00000,	1.00000,	0.612403,	0.456522,	0.631415,	0.440476,	0.750000,
 	1.00000,	1.00000,	0.604651,	0.451087,	0.598809,	0.321429,	0.750000,
 	1.00000,	1.00000,	0.731266,	0.500000,	0.664020,	0.309524,	0.750000,
 	1.00000,	1.00000,	0.645995,	0.483696,	0.628580,	0.428571,	0.750000,
 	1.00000,	1.00000,	0.728682,	0.592391,	0.778849,	0.410714,	0.750000,
 	1.00000,	1.00000,	0.731266,	0.521739,	0.692090,	0.375000,	0.750000,
 	1.00000,	1.00000,	0.514212,	0.429348,	0.564786,	0.416667,	0.750000,
 	1.00000,	1.00000,	0.754522,	0.565217,	0.659768,	0.297619,	0.750000,
 	1.00000,	0.200000,	0.0542636,	0.135870,	0.0884604,	0.357143,	0.750000,
 	1.00000,	0.200000,	0.0465116,	0.103261,	0.102637,	0.428571,	0.750000,
 	1.00000,	0.200000,	0.0775194,	0.184783,	0.0856252,	0.380952,	0.750000,
 	1.00000,	0.200000,	0.136951,	0.184783,	0.299688,	0.416667,	0.750000,
 	1.00000,	0.400000,	0.297158,	0.168478,	0.543521,	0.720238,	0.750000,
 	1.00000,	1.00000,	0.728682,	0.429348,	0.648426,	0.559524,	0.750000,
 	1.00000,	0.200000,	0.188630,	0.135870,	0.447122,	1.00000,	0.750000,
 	1.00000,	1.00000,	0.496124,	0.239130,	0.512333,	0.845238,	0.750000,
 	1.00000,	0.200000,	0.0956072,	0.130435,	0.166430,	0.309524,	0.750000,
 	1.00000,	0.200000,	0.0956072,	0.130435,	0.152254,	0.410714,	0.750000,
 	1.00000,	0.200000,	0.0439276,	0.103261,	0.115396,	0.666667,	0.750000,
 	1.00000,	0.200000,	0.0594315,	0.125000,	0.146583,	0.398810,	0.750000,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.299688,	0.476190,	0.750000,
 	1.00000,	0.600000,	0.271318,	0.375000,	0.278424,	0.196429,	0.750000,
 	1.00000,	0.600000,	0.271318,	0.375000,	0.308194,	0.291667,	0.750000,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.267366,	0.309524,	0.750000,
 	1.00000,	0.200000,	0.0775194,	0.163043,	0.150553,	0.398810,	0.833333,
 	1.00000,	0.200000,	0.0542636,	0.0760870,	0.100652,	0.642857,	0.833333,
 	1.00000,	0.200000,	0.0775194,	0.130435,	0.143748,	0.446429,	0.833333,
 	1.00000,	0.200000,	0.0465116,	0.103261,	0.115112,	0.500000,	0.833333,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.301956,	0.505952,	0.833333,
 	1.00000,	0.200000,	0.186047,	0.228261,	0.356394,	0.601190,	0.833333,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.394103,	0.720238,	0.833333,
 	1.00000,	0.600000,	0.405685,	0.239130,	0.501276,	0.636905,	0.833333,
 	1.00000,	0.200000,	0.0749354,	0.173913,	0.163028,	0.464286,	0.833333,
 	1.00000,	0.200000,	0.170543,	0.239130,	0.311313,	0.446429,	0.833333,
 	1.00000,	0.200000,	0.134367,	0.157609,	0.263397,	0.565476,	0.833333,
 	1.00000,	0.200000,	0.131783,	0.250000,	0.232776,	0.416667,	0.833333,
 	1.00000,	0.200000,	0.103359,	0.157609,	0.184860,	0.428571,	0.833333,
 	1.00000,	0.200000,	0.0465116,	0.103261,	0.140913,	0.589286,	0.833333,
 	1.00000,	0.200000,	0.227390,	0.320652,	0.336547,	0.380952,	0.833333,
 	1.00000,	0.200000,	0.0439276,	0.103261,	0.140913,	0.666667,	0.833333,
 	1.00000,	0.200000,	0.0568475,	0.0108696,	0.133825,	0.815476,	0.833333,
 	1.00000,	0.200000,	0.0568475,	0.0108696,	0.204707,	0.934524,	0.833333,
 	1.00000,	0.400000,	0.136951,	0.114130,	0.379076,	0.708333,	0.833333,
 	1.00000,	0.200000,	0.201550,	0.114130,	0.464134,	0.821429,	0.833333,
 	1.00000,	0.200000,	0.0594315,	0.114130,	0.0671959,	0.345238,	0.833333,
 	1.00000,	0.200000,	0.0749354,	0.114130,	0.150836,	0.595238,	0.833333,
 	1.00000,	0.200000,	0.0542636,	0.0869565,	0.0657783,	0.434524,	0.833333,
 	1.00000,	0.600000,	0.258398,	0.467391,	0.367735,	0.202381,	0.833333,
 	1.00000,	0.00000,	0.00516796,	0.293478,	0.228806,	0.267857,	0.833333,
 	1.00000,	0.200000,	0.139535,	0.228261,	0.251489,	0.422619,	0.833333,
 	1.00000,	0.200000,	0.100775,	0.141304,	0.191948,	0.535714,	0.833333,
 	1.00000,	0.200000,	0.173127,	0.206522,	0.248653,	0.458333,	0.916667,
 	1.00000,	0.200000,	0.214470,	0.206522,	0.289765,	0.500000,	0.916667,
 	1.00000,	0.200000,	0.227390,	0.250000,	0.285512,	0.380952,	0.916667,
 	1.00000,	0.600000,	0.271318,	0.347826,	0.315282,	0.273810,	0.916667,
 	1.00000,	0.200000,	0.173127,	0.206522,	0.218883,	0.291667,	0.916667,
 	1.00000,	0.200000,	0.0284238,	0.0652174,	0.0402608,	0.529762,	0.916667,
 	1.00000,	0.200000,	0.0465116,	0.0978261,	0.0742841,	0.500000,	0.916667,
 	1.00000,	0.200000,	0.0335917,	0.0760870,	0.0416785,	0.482143,	0.916667,
 	1.00000,	0.200000,	0.0749354,	0.114130,	0.128154,	0.583333,	0.916667,
 	1.00000,	0.200000,	0.0439276,	0.103261,	0.102637,	0.678571,	0.916667,
 	1.00000,	0.200000,	0.0542636,	0.0869565,	0.123901,	0.553571,	0.916667,
 	1.00000,	0.200000,	0.0594315,	0.119565,	0.105472,	0.476190,	0.916667,
 	1.00000,	0.200000,	0.0956072,	0.0923913,	0.170683,	0.410714,	0.916667,
 	1.00000,	0.200000,	0.0775194,	0.103261,	0.122484,	0.488095,	0.916667,
 	1.00000,	0.200000,	0.0775194,	0.103261,	0.217465,	0.755952,	0.916667,
 	1.00000,	0.200000,	0.0956072,	0.152174,	0.163595,	0.369048,	0.916667,
 	1.00000,	0.200000,	0.100775,	0.157609,	0.169266,	0.380952,	0.916667,
 	1.00000,	0.200000,	0.103359,	0.157609,	0.208959,	0.523810,	0.916667,
 	1.00000,	0.200000,	0.131783,	0.293478,	0.284094,	0.404762,	0.916667,
 	1.00000,	0.200000,	0.134367,	0.152174,	0.289765,	0.613095,	0.916667,
 	1.00000,	0.200000,	0.188630,	0.184783,	0.458463,	0.738095,	0.916667,
 	1.00000,	0.600000,	0.198966,	0.163043,	0.438616,	0.690476,	0.916667,
 	1.00000,	0.600000,	0.258398,	0.380435,	0.364899,	0.273810,	0.916667,
 	1.00000,	0.600000,	0.201550,	0.402174,	0.373405,	0.345238,	0.916667,
 	1.00000,	0.600000,	0.421189,	0.347826,	0.510916,	0.464286,	0.916667,
 	1.00000,	1.00000,	0.728682,	0.320652,	0.598809,	0.654762,	0.916667,
 	1.00000,	0.600000,	0.341085,	0.228261,	0.410264,	0.541667,	0.916667,
 	1.00000,	0.600000,	0.405685,	0.211957,	0.525092,	0.511905,	0.916667,
 	1.00000,	0.200000,	0.113695,	0.228261,	0.281259,	0.690476,	1.00000,
 	1.00000,	0.200000,	0.113695,	0.228261,	0.291182,	0.630952,	1.00000,
 	1.00000,	0.200000,	0.113695,	0.228261,	0.221718,	0.595238,	1.00000,
 	1.00000,	0.200000,	0.113695,	0.211957,	0.272753,	0.488095,	1.00000,
 	1.00000,	0.200000,	0.173127,	0.206522,	0.258577,	0.476190,	1.00000,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.318117,	0.595238,	1.00000,
 	1.00000,	0.200000,	0.186047,	0.250000,	0.354976,	0.500000,	1.00000,
 	1.00000,	0.200000,	0.0956072,	0.152174,	0.104054,	0.434524,	1.00000,
 	1.00000,	0.200000,	0.0594315,	0.119565,	0.116813,	0.607143,	1.00000,
 	1.00000,	0.200000,	0.0594315,	0.119565,	0.101219,	0.571429,	1.00000,
 	1.00000,	0.200000,	0.0956072,	0.0923913,	0.145166,	0.398810,	1.00000,
 	1.00000,	0.200000,	0.0775194,	0.130435,	0.145166,	0.553571,	1.00000,
 	1.00000,	0.200000,	0.134367,	0.228261,	0.155089,	0.386905,	1.00000,
 	1.00000,	0.200000,	0.100775,	0.157609,	0.167848,	0.386905,	1.00000,
 	1.00000,	0.200000,	0.103359,	0.130435,	0.179189,	0.529762,	1.00000,
 	1.00000,	0.200000,	0.0594315,	0.114130,	0.0998015,	0.416667,	1.00000,
 	1.00000,	0.200000,	0.0594315,	0.114130,	0.0998015,	0.458333,	1.00000,
 	1.00000,	0.200000,	0.0594315,	0.114130,	0.108307,	0.488095,	1.00000,
 	1.00000,	0.600000,	0.291990,	0.347826,	0.377658,	0.500000,	1.00000,
 	1.00000,	0.600000,	0.501292,	0.211957,	0.397505,	0.535714,	1.00000,
 	1.00000,	0.200000,	0.227390,	0.250000,	0.275588,	0.386905,	1.00000,
 	1.00000,	0.600000,	0.423773,	0.358696,	0.346470,	0.398810,	1.00000,
 	1.00000,	0.200000,	0.196382,	0.271739,	0.298270,	0.351190,	1.00000,
 	1.00000,	0.200000,	0.173127,	0.206522,	0.214630,	0.297619,	1.00000,
 	1.00000,	0.200000,	0.214470,	0.239130,	0.379076,	0.553571,	1.00000,
 	1.00000,	0.200000,	0.186047,	0.217391,	0.333711,	0.452381,	1.00000,
 	1.00000,	0.200000,	0.0749354,	0.0326087,	0.146583,	0.988095,	1.00000,
 	1.00000,	0.200000,	0.173127,	0.206522,	0.193365,	0.214286,	1.00000,
 	1.00000,	0.200000,	0.134367,	0.179348,	0.286929,	0.630952,	1.00000,
 	1.00000,	0.200000,	0.131783,	0.195652,	0.313864,	0.678571,	1.00000) 
 scaled y = 
MatrixD(18.0000,
 	15.0000,
 	18.0000,
 	16.0000,
 	17.0000,
 	15.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	15.0000,
 	15.0000,
 	14.0000,
 	15.0000,
 	14.0000,
 	24.0000,
 	22.0000,
 	18.0000,
 	21.0000,
 	27.0000,
 	26.0000,
 	25.0000,
 	24.0000,
 	25.0000,
 	26.0000,
 	21.0000,
 	10.0000,
 	10.0000,
 	11.0000,
 	9.00000,
 	27.0000,
 	28.0000,
 	25.0000,
 	19.0000,
 	16.0000,
 	17.0000,
 	19.0000,
 	18.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	12.0000,
 	13.0000,
 	13.0000,
 	18.0000,
 	22.0000,
 	19.0000,
 	18.0000,
 	23.0000,
 	28.0000,
 	30.0000,
 	30.0000,
 	31.0000,
 	35.0000,
 	27.0000,
 	26.0000,
 	24.0000,
 	25.0000,
 	23.0000,
 	20.0000,
 	21.0000,
 	13.0000,
 	14.0000,
 	15.0000,
 	14.0000,
 	17.0000,
 	11.0000,
 	13.0000,
 	12.0000,
 	13.0000,
 	19.0000,
 	15.0000,
 	13.0000,
 	13.0000,
 	14.0000,
 	18.0000,
 	22.0000,
 	21.0000,
 	26.0000,
 	22.0000,
 	28.0000,
 	23.0000,
 	28.0000,
 	27.0000,
 	13.0000,
 	14.0000,
 	13.0000,
 	14.0000,
 	15.0000,
 	12.0000,
 	13.0000,
 	13.0000,
 	14.0000,
 	13.0000,
 	12.0000,
 	13.0000,
 	18.0000,
 	16.0000,
 	18.0000,
 	18.0000,
 	23.0000,
 	26.0000,
 	11.0000,
 	12.0000,
 	13.0000,
 	12.0000,
 	18.0000,
 	20.0000,
 	21.0000,
 	22.0000,
 	18.0000,
 	19.0000,
 	21.0000,
 	26.0000,
 	15.0000,
 	16.0000,
 	29.0000,
 	24.0000,
 	20.0000,
 	19.0000,
 	15.0000,
 	24.0000,
 	20.0000,
 	11.0000,
 	20.0000,
 	19.0000,
 	15.0000,
 	31.0000,
 	26.0000,
 	32.0000,
 	25.0000,
 	16.0000,
 	16.0000,
 	18.0000,
 	16.0000,
 	13.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	29.0000,
 	26.0000,
 	26.0000,
 	31.0000,
 	32.0000,
 	28.0000,
 	24.0000,
 	26.0000,
 	24.0000,
 	26.0000,
 	31.0000,
 	19.0000,
 	18.0000,
 	15.0000,
 	15.0000,
 	16.0000,
 	15.0000,
 	16.0000,
 	14.0000,
 	17.0000,
 	16.0000,
 	15.0000,
 	18.0000,
 	21.0000,
 	20.0000,
 	13.0000,
 	29.0000,
 	23.0000,
 	20.0000,
 	23.0000,
 	24.0000,
 	25.0000,
 	24.0000,
 	18.0000,
 	29.0000,
 	19.0000,
 	23.0000,
 	23.0000,
 	22.0000,
 	25.0000,
 	33.0000,
 	28.0000,
 	25.0000,
 	25.0000,
 	26.0000,
 	27.0000,
 	17.5000,
 	16.0000,
 	15.5000,
 	14.5000,
 	22.0000,
 	22.0000,
 	24.0000,
 	22.5000,
 	29.0000,
 	24.5000,
 	29.0000,
 	33.0000,
 	20.0000,
 	18.0000,
 	18.5000,
 	17.5000,
 	29.5000,
 	32.0000,
 	28.0000,
 	26.5000,
 	20.0000,
 	13.0000,
 	19.0000,
 	19.0000,
 	16.5000,
 	16.5000,
 	13.0000,
 	13.0000,
 	13.0000,
 	31.5000,
 	30.0000,
 	36.0000,
 	25.5000,
 	33.5000,
 	17.5000,
 	17.0000,
 	15.5000,
 	15.0000,
 	17.5000,
 	20.5000,
 	19.0000,
 	18.5000,
 	16.0000,
 	15.5000,
 	15.5000,
 	16.0000,
 	29.0000,
 	24.5000,
 	26.0000,
 	25.5000,
 	30.5000,
 	33.5000,
 	30.0000,
 	30.5000,
 	22.0000,
 	21.5000,
 	21.5000,
 	43.1000,
 	36.1000,
 	32.8000,
 	39.4000,
 	36.1000,
 	19.9000,
 	19.4000,
 	20.2000,
 	19.2000,
 	20.5000,
 	20.2000,
 	25.1000,
 	20.5000,
 	19.4000,
 	20.6000,
 	20.8000,
 	18.6000,
 	18.1000,
 	19.2000,
 	17.7000,
 	18.1000,
 	17.5000,
 	30.0000,
 	27.5000,
 	27.2000,
 	30.9000,
 	21.1000,
 	23.2000,
 	23.8000,
 	23.9000,
 	20.3000,
 	17.0000,
 	21.6000,
 	16.2000,
 	31.5000,
 	29.5000,
 	21.5000,
 	19.8000,
 	22.3000,
 	20.2000,
 	20.6000,
 	17.0000,
 	17.6000,
 	16.5000,
 	18.2000,
 	16.9000,
 	15.5000,
 	19.2000,
 	18.5000,
 	31.9000,
 	34.1000,
 	35.7000,
 	27.4000,
 	25.4000,
 	23.0000,
 	27.2000,
 	23.9000,
 	34.2000,
 	34.5000,
 	31.8000,
 	37.3000,
 	28.4000,
 	28.8000,
 	26.8000,
 	33.5000,
 	41.5000,
 	38.1000,
 	32.1000,
 	37.2000,
 	28.0000,
 	26.4000,
 	24.3000,
 	19.1000,
 	34.3000,
 	29.8000,
 	31.3000,
 	37.0000,
 	32.2000,
 	46.6000,
 	27.9000,
 	40.8000,
 	44.3000,
 	43.4000,
 	36.4000,
 	30.0000,
 	44.6000,
 	33.8000,
 	29.8000,
 	32.7000,
 	23.7000,
 	35.0000,
 	32.4000,
 	27.2000,
 	26.6000,
 	25.8000,
 	23.5000,
 	30.0000,
 	39.1000,
 	39.0000,
 	35.1000,
 	32.3000,
 	37.0000,
 	37.7000,
 	34.1000,
 	34.7000,
 	34.4000,
 	29.9000,
 	33.0000,
 	33.7000,
 	32.4000,
 	32.9000,
 	31.6000,
 	28.1000,
 	30.7000,
 	25.4000,
 	24.2000,
 	22.4000,
 	26.6000,
 	20.2000,
 	17.6000,
 	28.0000,
 	27.0000,
 	34.0000,
 	31.0000,
 	29.0000,
 	27.0000,
 	24.0000,
 	36.0000,
 	37.0000,
 	31.0000,
 	38.0000,
 	36.0000,
 	36.0000,
 	36.0000,
 	34.0000,
 	38.0000,
 	32.0000,
 	38.0000,
 	25.0000,
 	38.0000,
 	26.0000,
 	22.0000,
 	32.0000,
 	36.0000,
 	27.0000,
 	27.0000,
 	44.0000,
 	32.0000,
 	28.0000,
 	31.0000)
auto_optimize: etaI = (0.025,0.4)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.025, result = (2934.741470727793,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0484375, result = (2680.980916914654,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.071875, result = (2680.980916914654,142)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0953125, result = (2680.980916914654,-3)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.11875, result = (2601.945191971381,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.1421875, result = (2394.2016776538453,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.165625, result = (2348.8154865443635,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.1890625, result = (2493.489918761257,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.2125, result = (2322.8129375833496,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.2359375, result = (2280.8532554703424,119)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.259375, result = (2280.8532554703424,-3)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.2828125, result = (2505.1341691741227,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.30625, result = (2265.011038307311,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.3296875, result = (2519.623388069323,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.353125, result = (2233.9209981822883,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.3765625, result = (2496.6675340351762,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.4, result = (2467.5912618587986,400)
ending epoch = (2233.9209981822883,400)

REPORT
    ----------------------------------------------------------------------------
    modelName  mn  = NeuralNet_3L_sigmoid
    ----------------------------------------------------------------------------
    hparameter hp  = HyperParameter (HashMap(lambda -> (0.01,0.01), maxEpochs -> (400,400), eta -> (0.1,0.1), nu -> (0.9,0.9), upLimit -> (4,4), beta -> (0.9,0.9), bSize -> (20,20)))
    ----------------------------------------------------------------------------
    features   fn  = Array(intercept, cylinders, displacement, horsepower, weight, acceleration, modelyear)
    ----------------------------------------------------------------------------
    parameter  bb  = Array(b.w = 
MatrixD(2.04974,	6.61447,	-2.69516,	-1.57251,	-6.17935,	-2.76648,	-5.60421,	4.39536,	-4.81925,	-2.30395,	-2.50184,	-2.23619,	-3.88959,	-2.19396,	1.41936,
 	0.591990,	-4.80506,	0.637049,	1.45908,	3.10108,	1.25377,	2.23676,	0.299167,	0.0870723,	-1.30977,	0.801964,	0.868958,	1.33907,	0.516451,	9.15941,
 	1.41326,	-8.44262,	-2.91115,	-3.47856,	-2.01536,	-3.38067,	-3.51799,	-3.72056,	1.03897,	-1.48454,	-3.53544,	-3.20768,	-3.14688,	-3.29174,	-9.98981,
 	-7.20228,	-6.70208,	-4.10146,	-4.60786,	-8.63464,	-4.30545,	-8.85471,	-1.50310,	-3.26655,	-7.26435,	-4.30193,	-3.51728,	-6.04189,	-4.52622,	-8.36212,
 	-6.57984,	-7.10424,	-1.58791,	-2.99519,	2.99129,	-1.38045,	2.81429,	-3.91277,	-7.99599,	-7.60950,	-2.25817,	-1.89462,	0.531119,	-2.71021,	-18.0340,
 	3.40991,	-12.3731,	3.36936,	2.54324,	8.59774,	3.61980,	8.26424,	-10.5785,	-1.43884,	1.86543,	3.43892,	3.06157,	5.44609,	3.03524,	-2.92620,
 	2.35483,	-1.45016,	0.882132,	0.408924,	4.52428,	0.961497,	4.10711,	4.42421,	19.9256,	9.62404,	0.849342,	0.365816,	2.28466,	0.808145,	1.89324) 
 b.b = VectorD(1.36200,	7.35181,	-2.58869,	-1.80702,	-5.48541,	-2.66097,	-5.05135,	5.24251,	-5.62879,	-2.14738,	-2.52143,	-2.10914,	-3.59452,	-2.36388,	2.83368), b.w = 
MatrixD(4.76971,
 	4.52745,
 	3.13036,
 	2.15435,
 	5.58173,
 	3.33673,
 	5.87722,
 	5.87072,
 	4.51956,
 	1.70196,
 	3.15625,
 	2.99827,
 	4.04812,
 	2.58049,
 	5.15999) 
 b.b = VectorD(9.06138))
    ----------------------------------------------------------------------------
    fitMap     qof = 
		rSq 	 -> VectorD(0.896402) 
		rSqBar 	 -> VectorD(0.894519) 
		sst 	 -> VectorD(23819.0) 
		sse 	 -> VectorD(2467.59) 
		mse0 	 -> VectorD(6.29488) 
		rmse 	 -> VectorD(2.50896) 
		mae 	 -> VectorD(1.89436) 
		dfm 	 -> VectorD(7.00000) 
		df 	 -> VectorD(385.000) 
		fStat 	 -> VectorD(475.900) 
		aic 	 -> VectorD(-901.848) 
		bic 	 -> VectorD(-870.078) 
		mape 	 -> VectorD(8.80938) 
		smape 	 -> VectorD(8.37157) 

    ----------------------------------------------------------------------------
        
Run + title
--------------------
| Cross-Validation |
--------------------
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1651.4128789122972,374)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.19622,
 	3.96936,
 	2.52343,
 	4.83350,
 	4.09465,
 	5.05430,
 	4.46438,
 	6.13361,
 	6.79364,
 	0.998013,
 	1.84576,
 	2.63008,
 	2.39565,
 	1.96810,
 	4.70267) 
 b.b = VectorD(8.85533)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.890801,
 	0.888815,
 	4731.23,
 	516.648,
 	6.62370,
 	2.57365,
 	1.90824,
 	7.00000,
 	385.000,
 	448.665,
 	-168.887,
 	-150.033,
 	8.82054,
 	8.53367)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1651.4128789122972,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.19622,
 	3.96936,
 	2.52343,
 	4.83350,
 	4.09465,
 	5.05430,
 	4.46438,
 	6.13361,
 	6.79364,
 	0.998013,
 	1.84576,
 	2.63008,
 	2.39565,
 	1.96810,
 	4.70267) 
 b.b = VectorD(8.85533)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.874275,
 	0.871989,
 	4472.51,
 	562.307,
 	7.20907,
 	2.68497,
 	2.12395,
 	7.00000,
 	385.000,
 	382.463,
 	-172.899,
 	-154.045,
 	10.1176,
 	9.47416)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1651.4128789122972,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.19622,
 	3.96936,
 	2.52343,
 	4.83350,
 	4.09465,
 	5.05430,
 	4.46438,
 	6.13361,
 	6.79364,
 	0.998013,
 	1.84576,
 	2.63008,
 	2.39565,
 	1.96810,
 	4.70267) 
 b.b = VectorD(8.85533)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.893495,
 	0.891558,
 	4664.26,
 	496.768,
 	6.36882,
 	2.52365,
 	1.87239,
 	7.00000,
 	385.000,
 	461.407,
 	-167.140,
 	-148.286,
 	8.54865,
 	8.12773)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1651.4128789122972,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.19622,
 	3.96936,
 	2.52343,
 	4.83350,
 	4.09465,
 	5.05430,
 	4.46438,
 	6.13361,
 	6.79364,
 	0.998013,
 	1.84576,
 	2.63008,
 	2.39565,
 	1.96810,
 	4.70267) 
 b.b = VectorD(8.85533)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.873000,
 	0.870691,
 	3962.82,
 	503.277,
 	6.45227,
 	2.54013,
 	1.91229,
 	7.00000,
 	385.000,
 	378.072,
 	-167.712,
 	-148.858,
 	9.54681,
 	8.90256)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1651.4128789122972,213)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.19622,
 	3.96936,
 	2.52343,
 	4.83350,
 	4.09465,
 	5.05430,
 	4.46438,
 	6.13361,
 	6.79364,
 	0.998013,
 	1.84576,
 	2.63008,
 	2.39565,
 	1.96810,
 	4.70267) 
 b.b = VectorD(8.85533)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.931607,
 	0.930363,
 	5671.58,
 	387.898,
 	4.97305,
 	2.23003,
 	1.68845,
 	7.00000,
 	385.000,
 	749.173,
 	-157.573,
 	-138.719,
 	7.16862,
 	6.96270)
-----------------------------------------------
| showQofStatTable: Statistical Table for QoF |
-----------------------------------------------
|        name |   num |        min |        max |       mean |      stdev |   interval |
----------------------------------------------------------------------------------------
|         rSq |     5 |      0.873 |      0.932 |      0.893 |      0.024 |      0.029 |
|      rSqBar |     5 |      0.871 |      0.930 |      0.891 |      0.024 |      0.030 |
|         sst |     5 |   3962.818 |   5671.580 |   4700.481 |    620.767 |    770.935 |
|         sse |     5 |    387.898 |    562.307 |    493.380 |     64.281 |     79.831 |
|        mse0 |     5 |      4.973 |      7.209 |      6.325 |      0.824 |      1.023 |
|        rmse |     5 |      2.230 |      2.685 |      2.510 |      0.169 |      0.210 |
|         mae |     5 |      1.688 |      2.124 |      1.901 |      0.155 |      0.192 |
|         dfm |     5 |      7.000 |      7.000 |      7.000 |      0.000 |      0.000 |
|          df |     5 |    385.000 |    385.000 |    385.000 |      0.000 |      0.000 |
|       fStat |     5 |    378.072 |    749.173 |    483.956 |    152.976 |    189.982 |
|         aic |     5 |   -172.899 |   -157.573 |   -166.842 |      5.649 |      7.015 |
|         bic |     5 |   -154.045 |   -138.719 |   -147.988 |      5.649 |      7.015 |
|        mape |     5 |      7.169 |     10.118 |      8.840 |      1.119 |      1.390 |
|       smape |     5 |      6.963 |      9.474 |      8.400 |      0.944 |      1.172 |
----------------------------------------------------------------------------------------
----------------------------------------
| Feature Selection Technique: Forward |
----------------------------------------
-------------------------------------------------------------------------------------
| forwardSelAll: (l = 0) INITIAL variable (0, intercept) => cols = LinkedHashSet(0) |
-------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (8985.19851857378,35)
optimize3: bSize = 20, nB = 19
ending epoch = (7258.6489168418275,400)
optimize3: bSize = 20, nB = 19
ending epoch = (7305.18905824473,45)
optimize3: bSize = 20, nB = 19
ending epoch = (6751.626981233805,400)
optimize3: bSize = 20, nB = 19
ending epoch = (18749.62925699832,400)
optimize3: bSize = 20, nB = 19
ending epoch = (14915.475565775856,65)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (5514.087041761254,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.10118,
 	2.58291,
 	4.78875,
 	9.20960,
 	5.48441) 
 b.b = VectorD(6.94736)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.714185,
 	0.712719,
 	4731.23,
 	1352.26,
 	17.3366,
 	4.16373,
 	2.84473,
 	2.00000,
 	390.000,
 	487.260,
 	-215.939,
 	-208.868,
 	11.6958,
 	11.9730)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (5490.921015050104,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.66299,
 	1.47967,
 	4.93840,
 	9.86631,
 	5.92282) 
 b.b = VectorD(5.68914)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.734858,
 	0.733498,
 	4472.51,
 	1185.85,
 	15.2032,
 	3.89913,
 	3.08393,
 	2.00000,
 	390.000,
 	540.455,
 	-211.100,
 	-204.030,
 	13.7397,
 	13.2116)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (4918.633448993719,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(7.45606,
 	1.72464,
 	4.43573,
 	10.5535,
 	5.52177) 
 b.b = VectorD(5.13401)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.607412,
 	0.605399,
 	4664.26,
 	1831.13,
 	23.4761,
 	4.84521,
 	3.61078,
 	2.00000,
 	390.000,
 	301.704,
 	-229.861,
 	-222.791,
 	15.2129,
 	14.3190)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (5499.391629763097,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.18771,
 	2.53904,
 	4.48573,
 	11.6691,
 	4.77740) 
 b.b = VectorD(3.66230)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.702017,
 	0.700489,
 	3962.82,
 	1180.85,
 	15.1391,
 	3.89090,
 	3.07548,
 	2.00000,
 	390.000,
 	459.399,
 	-210.955,
 	-203.885,
 	14.0344,
 	13.4318)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (5297.618007041502,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(7.11706,
 	3.31275,
 	5.02502,
 	12.6308,
 	5.09958) 
 b.b = VectorD(0.551749)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.731613,
 	0.730236,
 	5671.58,
 	1522.18,
 	19.5151,
 	4.41759,
 	2.84079,
 	2.00000,
 	390.000,
 	531.561,
 	-220.879,
 	-213.809,
 	10.4252,
 	10.9002)
----------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 1) ADD variable (4, weight) => cols = LinkedHashSet(0, 4) @ 0.71509078592828 |
----------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (6468.329743443699,400)
optimize3: bSize = 20, nB = 19
ending epoch = (6482.390554061684,189)
optimize3: bSize = 20, nB = 19
ending epoch = (5744.784119146839,318)
optimize3: bSize = 20, nB = 19
ending epoch = (6411.956757480249,248)
optimize3: bSize = 20, nB = 19
ending epoch = (2998.9606460556047,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2369.1021285810903,297)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.15980,
 	3.66524,
 	6.23101,
 	4.05610,
 	5.95570,
 	2.82603,
 	2.87539) 
 b.b = VectorD(9.04370)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.870265,
 	0.869264,
 	4731.23,
 	613.809,
 	7.86935,
 	2.80524,
 	1.91266,
 	3.00000,
 	389.000,
 	869.803,
 	-183.149,
 	-173.722,
 	8.19553,
 	8.17578)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2336.65389549037,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.69785,
 	4.33787,
 	7.16772,
 	3.50470,
 	6.22237,
 	2.50629,
 	3.93281) 
 b.b = VectorD(9.63227)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.863498,
 	0.862446,
 	4472.51,
 	610.505,
 	7.82699,
 	2.79768,
 	2.15227,
 	3.00000,
 	389.000,
 	820.261,
 	-182.933,
 	-173.506,
 	10.1798,
 	9.54996)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2234.1627602179815,82)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.70706,
 	4.13533,
 	6.59257,
 	3.81775,
 	6.32172,
 	2.78621,
 	4.28429) 
 b.b = VectorD(9.33944)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.856005,
 	0.854894,
 	4664.26,
 	671.631,
 	8.61066,
 	2.93439,
 	2.13401,
 	3.00000,
 	389.000,
 	770.826,
 	-186.928,
 	-177.501,
 	9.12589,
 	8.93183)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2234.1627602179815,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.70706,
 	4.13533,
 	6.59257,
 	3.81775,
 	6.32172,
 	2.78621,
 	4.28429) 
 b.b = VectorD(9.42578)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.879027,
 	0.878094,
 	3962.82,
 	479.392,
 	6.14606,
 	2.47912,
 	1.88543,
 	3.00000,
 	389.000,
 	942.202,
 	-174.364,
 	-164.937,
 	8.78864,
 	8.42607)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2100.3736390984373,382)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.64386,
 	4.95516,
 	5.81690,
 	3.29852,
 	6.63280,
 	3.65217,
 	7.40748) 
 b.b = VectorD(8.69729)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.868161,
 	0.867144,
 	5671.58,
 	747.735,
 	9.58635,
 	3.09618,
 	2.25918,
 	3.00000,
 	389.000,
 	853.857,
 	-191.902,
 	-182.475,
 	8.81226,
 	9.02011)
----------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 2) ADD variable (6, modelyear) => cols = LinkedHashSet(0, 4, 6) @ 0.87312272950815 |
----------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (2971.1308702457873,400)
optimize3: bSize = 20, nB = 19
ending epoch = (2912.7367225394896,400)
optimize3: bSize = 20, nB = 19
ending epoch = (2725.8069523765375,400)
optimize3: bSize = 20, nB = 19
ending epoch = (2784.647205153714,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (2168.943295871903,18)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(4.43935,
 	5.10746,
 	2.46640,
 	4.74001,
 	3.98919,
 	4.10316,
 	5.53201,
 	5.23393,
 	6.33206) 
 b.b = VectorD(6.77563)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.880438,
 	0.879206,
 	4731.23,
 	565.674,
 	7.25223,
 	2.69300,
 	1.87471,
 	4.00000,
 	388.000,
 	714.297,
 	-177.984,
 	-166.200,
 	8.09279,
 	8.03213)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1885.4146046326496,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.14104,
 	8.64431,
 	3.79234,
 	7.01394,
 	3.31918,
 	7.53171,
 	5.25902,
 	4.87899,
 	7.07277) 
 b.b = VectorD(6.35102)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.850954,
 	0.849417,
 	4472.51,
 	666.612,
 	8.54630,
 	2.92341,
 	2.17694,
 	4.00000,
 	388.000,
 	553.805,
 	-185.243,
 	-173.460,
 	9.96432,
 	9.57337)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1848.0644635405692,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.71972,
 	10.7941,
 	3.92938,
 	7.94218,
 	2.51240,
 	10.4249,
 	5.33719,
 	4.66706,
 	6.37036) 
 b.b = VectorD(6.78689)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.871009,
 	0.869680,
 	4664.26,
 	601.646,
 	7.71341,
 	2.77730,
 	2.05206,
 	4.00000,
 	388.000,
 	654.992,
 	-180.571,
 	-168.787,
 	8.80288,
 	8.64331)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1848.0644635405692,196)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.71972,
 	10.7941,
 	3.92938,
 	7.94218,
 	2.51240,
 	10.4249,
 	5.33719,
 	4.66706,
 	6.37036) 
 b.b = VectorD(6.78689)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.907385,
 	0.906430,
 	3962.82,
 	367.017,
 	4.70534,
 	2.16918,
 	1.60560,
 	4.00000,
 	388.000,
 	950.346,
 	-163.696,
 	-151.912,
 	7.36115,
 	7.19807)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1848.0644635405692,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.71972,
 	10.7941,
 	3.92938,
 	7.94218,
 	2.51240,
 	10.4249,
 	5.33719,
 	4.66706,
 	6.37036) 
 b.b = VectorD(6.84084)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.923990,
 	0.923207,
 	5671.58,
 	431.096,
 	5.52687,
 	2.35093,
 	1.77143,
 	4.00000,
 	388.000,
 	1179.15,
 	-168.304,
 	-156.521,
 	7.31370,
 	7.34081)
----------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 3) ADD variable (3, horsepower) => cols = LinkedHashSet(0, 4, 6, 3) @ 0.8843818460037915 |
----------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (2793.7450224186323,400)
optimize3: bSize = 20, nB = 19
ending epoch = (2676.1983425068647,400)
optimize3: bSize = 20, nB = 19
ending epoch = (2522.754069741428,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1972.7877302627257,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.85860,
 	3.80486,
 	3.72537,
 	4.18927,
 	3.90225,
 	2.49488,
 	4.77457,
 	7.18428,
 	4.18014,
 	8.23858,
 	7.35301) 
 b.b = VectorD(5.89336)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.867016,
 	0.865298,
 	4731.23,
 	629.178,
 	8.06638,
 	2.84014,
 	1.88455,
 	5.00000,
 	387.000,
 	504.626,
 	-181.180,
 	-167.040,
 	7.55444,
 	7.74351)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1816.718168431115,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(4.57287,
 	3.79312,
 	3.40889,
 	4.08196,
 	4.32975,
 	2.21821,
 	6.22282,
 	7.43761,
 	5.00326,
 	8.63992,
 	6.86999) 
 b.b = VectorD(6.88895)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.844935,
 	0.842931,
 	4472.51,
 	693.532,
 	8.89143,
 	2.98185,
 	2.28664,
 	5.00000,
 	387.000,
 	421.745,
 	-186.184,
 	-172.044,
 	10.5369,
 	9.95732)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1777.7472638414758,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.11984,
 	3.74241,
 	4.70454,
 	4.02886,
 	4.41109,
 	2.02067,
 	5.24212,
 	6.50939,
 	5.49967,
 	8.91822,
 	8.03938) 
 b.b = VectorD(8.12428)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.883758,
 	0.882256,
 	4664.26,
 	542.182,
 	6.95105,
 	2.63648,
 	1.84313,
 	5.00000,
 	387.000,
 	588.453,
 	-174.415,
 	-160.275,
 	7.73758,
 	7.56144)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1761.9243955435493,265)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.07422,
 	3.71713,
 	4.65283,
 	4.02935,
 	4.31542,
 	2.01215,
 	5.23166,
 	6.49588,
 	5.47413,
 	8.90972,
 	8.00403) 
 b.b = VectorD(8.01569)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.904919,
 	0.903690,
 	3962.82,
 	376.790,
 	4.83064,
 	2.19787,
 	1.60509,
 	5.00000,
 	387.000,
 	736.641,
 	-161.555,
 	-147.415,
 	7.42485,
 	7.18173)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1761.9243955435493,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.07422,
 	3.71713,
 	4.65283,
 	4.02935,
 	4.31542,
 	2.01215,
 	5.23166,
 	6.49588,
 	5.47413,
 	8.90972,
 	8.00403) 
 b.b = VectorD(8.03621)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.932558,
 	0.931686,
 	5671.58,
 	382.504,
 	4.90390,
 	2.21447,
 	1.67131,
 	5.00000,
 	387.000,
 	1070.25,
 	-161.999,
 	-147.859,
 	6.82558,
 	6.83584)
---------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 4) ADD variable (5, acceleration) => cols = LinkedHashSet(0, 4, 6, 3, 5) @ 0.8927180615395502 |
---------------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (2931.5620404160873,119)
optimize3: bSize = 20, nB = 19
ending epoch = (2515.9563274845023,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1808.510774713061,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.53359,
 	3.64474,
 	2.86801,
 	2.60329,
 	7.26456,
 	5.13577,
 	8.18532,
 	2.94087,
 	3.02260,
 	1.96093,
 	4.16392,
 	4.19013,
 	5.65458) 
 b.b = VectorD(5.63381)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.869801,
 	0.867777,
 	4731.23,
 	616.002,
 	7.89746,
 	2.81024,
 	1.86587,
 	6.00000,
 	386.000,
 	429.782,
 	-178.230,
 	-161.733,
 	7.76473,
 	7.82737)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1680.4543866508964,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.46027,
 	4.50134,
 	5.50710,
 	1.61768,
 	7.17944,
 	3.70871,
 	8.40925,
 	3.60437,
 	3.69946,
 	1.60190,
 	2.70904,
 	7.93966,
 	4.57340) 
 b.b = VectorD(5.02281)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.860112,
 	0.857937,
 	4472.51,
 	625.653,
 	8.02119,
 	2.83217,
 	2.13992,
 	6.00000,
 	386.000,
 	395.557,
 	-178.987,
 	-162.490,
 	9.64849,
 	9.28338)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1674.7748400913151,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.72683,
 	4.83109,
 	6.21468,
 	0.436202,
 	7.78735,
 	3.66706,
 	9.30010,
 	3.39575,
 	3.51718,
 	1.10892,
 	4.00317,
 	6.22976,
 	4.79624) 
 b.b = VectorD(5.65413)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.892379,
 	0.890706,
 	4664.26,
 	501.973,
 	6.43555,
 	2.53684,
 	1.75472,
 	6.00000,
 	386.000,
 	533.443,
 	-169.290,
 	-152.793,
 	7.27333,
 	7.11603)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1615.4032966643558,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.62951,
 	5.29203,
 	9.07801,
 	-1.84786,
 	7.50834,
 	3.88760,
 	10.0503,
 	3.80051,
 	4.14872,
 	0.797284,
 	2.03222,
 	7.73321,
 	5.34870) 
 b.b = VectorD(4.96137)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.874682,
 	0.872734,
 	3962.82,
 	496.612,
 	6.36682,
 	2.52326,
 	1.82890,
 	6.00000,
 	386.000,
 	449.028,
 	-168.870,
 	-152.373,
 	8.43181,
 	8.02570)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1552.0691072235213,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(6.64100,
 	5.82811,
 	10.3629,
 	-1.03453,
 	7.54660,
 	4.51652,
 	11.7039,
 	3.82827,
 	4.72903,
 	1.59361,
 	2.86564,
 	7.36388,
 	5.01709) 
 b.b = VectorD(4.41884)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.913501,
 	0.912156,
 	5671.58,
 	490.587,
 	6.28958,
 	2.50790,
 	1.81614,
 	6.00000,
 	386.000,
 	679.411,
 	-168.398,
 	-151.901,
 	7.11607,
 	7.13455)
------------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 5) ADD variable (2, displacement) => cols = LinkedHashSet(0, 4, 6, 3, 5, 2) @ 0.8927299568635827 |
------------------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (2458.0463240771933,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1697.8453606872704,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(2.01576,
 	5.78856,
 	3.21214,
 	4.05731,
 	2.59855,
 	2.58110,
 	3.00864,
 	10.6061,
 	3.66113,
 	7.01373,
 	5.25459,
 	1.92124,
 	3.72408,
 	3.91148,
 	5.53877) 
 b.b = VectorD(3.94029)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.869959,
 	0.867595,
 	4731.23,
 	615.253,
 	7.88786,
 	2.80853,
 	1.81441,
 	7.00000,
 	385.000,
 	367.945,
 	-176.335,
 	-157.482,
 	7.42044,
 	7.53145)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1516.8450961133856,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.57293,
 	4.69177,
 	3.12259,
 	5.20966,
 	4.72866,
 	2.76814,
 	1.84084,
 	10.5464,
 	4.47298,
 	7.06144,
 	5.05982,
 	1.82565,
 	3.60330,
 	4.07096,
 	5.13119) 
 b.b = VectorD(1.64145)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.863457,
 	0.860974,
 	4472.51,
 	610.692,
 	7.82938,
 	2.79810,
 	2.09030,
 	7.00000,
 	385.000,
 	347.803,
 	-175.972,
 	-157.118,
 	9.64543,
 	9.22200)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1493.8766120892467,263)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.52135,
 	4.73627,
 	3.15432,
 	5.18844,
 	4.75815,
 	2.75664,
 	1.81376,
 	10.5501,
 	4.44371,
 	7.06636,
 	5.01929,
 	1.82547,
 	3.60378,
 	4.06540,
 	5.10418) 
 b.b = VectorD(1.56577)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.914574,
 	0.913020,
 	4664.26,
 	398.451,
 	5.10834,
 	2.26016,
 	1.64310,
 	7.00000,
 	385.000,
 	588.829,
 	-159.047,
 	-140.193,
 	7.03542,
 	6.91931)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1493.8766120892467,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(5.52135,
 	4.73627,
 	3.15432,
 	5.18844,
 	4.75815,
 	2.75664,
 	1.81376,
 	10.5501,
 	4.44371,
 	7.06636,
 	5.01929,
 	1.82547,
 	3.60378,
 	4.06540,
 	5.10418) 
 b.b = VectorD(1.56464)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.911080,
 	0.909463,
 	3962.82,
 	352.375,
 	4.51762,
 	2.12547,
 	1.59912,
 	7.00000,
 	385.000,
 	563.532,
 	-155.373,
 	-136.519,
 	7.32656,
 	7.18972)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (1488.3496889081698,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(8.52347,
 	4.64539,
 	3.19105,
 	5.54771,
 	4.27849,
 	2.85153,
 	2.17512,
 	11.7304,
 	4.25301,
 	7.26105,
 	5.06997,
 	1.85781,
 	3.57613,
 	4.26276,
 	5.66017) 
 b.b = VectorD(-1.03914)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.903615,
 	0.901863,
 	5671.58,
 	546.652,
 	7.00836,
 	2.64733,
 	1.94386,
 	7.00000,
 	385.000,
 	515.631,
 	-170.865,
 	-152.011,
 	7.68269,
 	7.75481)
------------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 6) ADD variable (1, cylinders) => cols = LinkedHashSet(0, 4, 6, 3, 5, 2, 1) @ 0.8949267911492322 |
------------------------------------------------------------------------------------------------------------------------
k = 7, n = 7
Run + title
x-axis: minX = 0.0, maxX = 6.0
y-axis: minY = 69.0, maxY = 90.0
rSq = 
MatrixD(71.6544,	71.5091,	69.8017,
 	87.4094,	87.3123,	86.7391,
 	88.5562,	88.4382,	88.6755,
 	89.4086,	89.2718,	88.6637,
 	89.4372,	89.2730,	88.2095,
 	89.6803,	89.4927,	89.2537)
