readFileIntoArray: C:\Users\Tango\Desktop\Projects\DS2_P2\scala\scalation\data\winequality-white_fixed.csv
load: read 99 data rows so far ...
load: read 199 data rows so far ...
load: read 299 data rows so far ...
load: read 399 data rows so far ...
load: read 499 data rows so far ...
load: read 599 data rows so far ...
load: read 699 data rows so far ...
load: read 799 data rows so far ...
load: read 899 data rows so far ...
load: read 999 data rows so far ...
load: read 1099 data rows so far ...
load: read 1199 data rows so far ...
load: read 1299 data rows so far ...
load: read 1399 data rows so far ...
load: read 1499 data rows so far ...
load: read 1599 data rows so far ...
load: read 1699 data rows so far ...
load: read 1799 data rows so far ...
load: read 1899 data rows so far ...
load: read 1999 data rows so far ...
load: read 2099 data rows so far ...
load: read 2199 data rows so far ...
load: read 2299 data rows so far ...
load: read 2399 data rows so far ...
load: read 2499 data rows so far ...
load: read 2599 data rows so far ...
load: read 2699 data rows so far ...
load: read 2799 data rows so far ...
load: read 2899 data rows so far ...
load: read 2999 data rows so far ...
load: read 3099 data rows so far ...
load: read 3199 data rows so far ...
load: read 3299 data rows so far ...
load: read 3399 data rows so far ...
load: read 3499 data rows so far ...
load: read 3599 data rows so far ...
load: read 3699 data rows so far ...
load: read 3799 data rows so far ...
load: read 3899 data rows so far ...
load: read 3999 data rows so far ...
load: read 4099 data rows so far ...
load: read 4199 data rows so far ...
load: read 4299 data rows so far ...
load: read 4399 data rows so far ...
load: read 4499 data rows so far ...
load: read 4599 data rows so far ...
load: read 4699 data rows so far ...
load: read 4799 data rows so far ...
load: read in an 4898-by-12 matrix from winequality-white_fixed.csv
ox_fname = Array(intercept, fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, alcohol)
------------------------------------------
| NeuralNet_XL for WineQuality with tanh |
------------------------------------------
auto_optimize: etaI = (2.5E-4,0.004)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 2.5E-4, result = (3693.506645077418,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 4.84375E-4, result = (3360.033988216034,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 7.1875E-4, result = (2914.5019936410345,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 9.53125E-4, result = (2814.4822764294954,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.0011875, result = (2795.1918796923037,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.001421875, result = (2782.6609892975193,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.00165625, result = (2776.368303230686,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.001890625, result = (2772.22783398619,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.002125, result = (2761.4427918547203,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.0023593750000000004, result = (2752.332666397077,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.0025937499999999997, result = (2748.351584948797,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.002828125, result = (2736.483192056538,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.0030625, result = (2729.809965045951,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.0032968750000000003, result = (2720.340424625255,400)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.0035312499999999997, result = (2716.652500623552,326)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.003765625, result = (2716.652500623552,-3)
optimize: bSize = 20, nB = 244
auto_optimize: eta = 0.004, result = (2678.6483456531414,400)
ending epoch = (2678.6483456531414,400)

REPORT
    ----------------------------------------------------------------------------
    modelName  mn  = NeuralNet_XL_tanh_tanh
    ----------------------------------------------------------------------------
    hparameter hp  = HyperParameter (HashMap(lambda -> (0.01,0.01), maxEpochs -> (400,400), eta -> (0.1,0.1), nu -> (0.9,0.9), upLimit -> (4,4), beta -> (0.9,0.9), bSize -> (20,20)))
    ----------------------------------------------------------------------------
    features   fn  = Array(intercept, fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates, alcohol)
    ----------------------------------------------------------------------------
    parameter  bb  = Array(b.w = 
MatrixD(0.141415,	0.0383610,	-0.0623352,	0.131433,	-0.0491833,	-0.0652423,	-0.0703385,	0.295761,	0.193192,	0.164343,	-0.0167315,	-0.150808,	-0.0865763,	0.0847755,	0.168194,	0.0587721,	0.235232,	0.0185952,	0.103350,	0.0692982,	0.0280695,	0.0341438,	-0.336920,	-0.134728,	-0.108631,
 	0.128492,	0.163138,	0.0252437,	0.0518186,	0.0334699,	0.144115,	0.334905,	0.264300,	-0.0560835,	0.203893,	0.0227363,	0.0538098,	0.211223,	0.0483192,	0.247814,	0.0327477,	0.0501516,	0.158416,	0.142001,	0.0836224,	0.242532,	-0.134836,	0.200023,	0.208579,	0.00775355,
 	0.167545,	0.279173,	0.201794,	0.269460,	0.322336,	0.220117,	0.245505,	0.0941593,	0.430985,	0.136076,	0.255920,	0.170220,	0.106378,	0.268370,	0.0531028,	0.0670646,	-0.153135,	0.282509,	0.145125,	0.00603633,	0.101285,	0.126955,	0.461547,	0.177527,	0.166544,
 	0.103528,	-0.000255711,	0.183756,	0.245570,	-0.0116236,	0.295886,	0.337993,	0.0912523,	0.102587,	-0.0515021,	0.0867752,	0.239089,	0.133381,	-0.00167606,	0.0752471,	0.298002,	-0.0219901,	0.111006,	0.0626330,	0.168278,	0.0426523,	0.0574334,	-0.0516067,	0.229621,	0.0773177,
 	-0.113984,	-0.130396,	0.0790187,	0.140318,	-0.470394,	0.119844,	0.111077,	0.172357,	-0.326137,	0.00577387,	0.134903,	0.0279295,	0.102382,	-0.00417990,	-0.0322152,	0.0948337,	-0.246439,	0.0546135,	0.0409707,	0.152266,	0.228327,	-0.0765620,	-0.393471,	0.0670204,	-0.0805149,
 	0.146658,	0.142331,	0.111873,	0.286919,	0.0323322,	0.106767,	0.245656,	0.202740,	0.146173,	0.214761,	0.179197,	0.0381801,	0.172459,	0.209190,	0.332312,	0.147632,	0.167928,	-0.0110956,	0.175344,	0.312133,	0.0710078,	0.0946494,	0.131376,	0.285848,	0.113746,
 	0.197704,	0.234664,	0.493809,	0.224656,	-0.450482,	0.114669,	0.408006,	0.168383,	-0.173848,	0.176395,	0.420800,	0.227251,	0.465826,	0.324873,	0.0824715,	0.285695,	-0.344773,	0.0683235,	0.149455,	0.0972000,	0.178755,	0.576179,	-0.526307,	0.256394,	0.520422,
 	0.141128,	0.0677140,	0.474030,	0.126584,	0.0446069,	0.333517,	0.304461,	0.253136,	0.0806480,	0.196598,	0.454960,	0.311148,	0.439287,	0.156841,	0.178448,	0.342899,	0.0688787,	0.121969,	0.273917,	0.0599746,	0.132147,	0.591576,	-0.320789,	0.294104,	0.553260,
 	0.117470,	0.236415,	0.0928232,	0.215454,	0.393771,	0.199895,	0.108313,	0.0670696,	0.105110,	-0.0789708,	0.0289248,	0.0202970,	0.0260121,	0.0465721,	0.0536818,	0.144254,	0.436618,	0.0871716,	0.203282,	-0.0139902,	0.00524186,	0.128495,	0.293463,	0.170181,	0.00858563,
 	0.0345435,	0.184009,	0.0362415,	0.209111,	-0.0204428,	0.0436595,	-0.0193947,	-0.0379315,	-0.0868379,	0.00211105,	0.104681,	0.186753,	0.346046,	0.0480118,	0.0742927,	0.163553,	-0.446842,	0.203942,	0.261544,	0.189879,	0.183106,	0.411750,	-0.0805365,	-0.00463352,	0.154326,
 	0.0960052,	0.0421237,	0.161220,	0.212886,	-0.136204,	0.140564,	0.168395,	-0.0528672,	-0.0835731,	0.0204264,	0.167184,	-0.0153144,	0.0957944,	0.0622020,	0.0341399,	-0.00115168,	-0.153259,	-0.0452269,	0.0414917,	-0.00180541,	-0.0240991,	0.0746921,	-0.0542980,	0.254069,	0.151014,
 	-0.264646,	-0.144724,	0.0275786,	0.193660,	-0.392020,	0.0935306,	0.0398384,	-0.0739312,	-0.304206,	-0.278753,	-0.0421659,	-0.110385,	-0.102646,	0.0418155,	-0.209082,	-0.0218945,	-0.818740,	-0.0499242,	0.147017,	-0.206668,	0.0758999,	-0.194645,	0.0346797,	0.119715,	-0.0994131) 
 b.b = VectorD(0.0762242,	-0.0159753,	-0.0719695,	0.0739275,	-0.0815133,	-0.0747918,	-0.117413,	0.209029,	0.111936,	0.0887681,	-0.0556095,	-0.155653,	-0.107185,	0.0298268,	0.0998448,	-0.0119314,	0.150796,	-0.0134627,	0.0608712,	0.0335119,	-0.0237708,	-0.00966625,	-0.358727,	-0.149767,	-0.109126), b.w = 
MatrixD(0.119718,	0.0798867,	0.0156812,	0.110459,	-0.165423,	0.0128508,	0.0973235,	0.114686,	0.0383161,	0.0711972,	-0.134976,	-0.0357980,
 	0.0380305,	0.111127,	0.156760,	0.161386,	0.113987,	0.0765380,	0.0991400,	0.0365945,	0.0527284,	0.0416651,	-0.0458847,	0.0293196,
 	0.0483471,	0.155184,	0.216237,	0.0883943,	0.0699582,	0.255702,	0.152246,	0.194906,	0.158057,	0.0251439,	0.172536,	0.106498,
 	0.00474166,	0.124906,	-0.00938763,	0.122617,	-0.140214,	0.0511350,	0.0868816,	0.00320178,	-0.139300,	-0.0378832,	-0.105685,	0.0759315,
 	0.103484,	0.0706410,	0.0476284,	0.104116,	0.454016,	0.167444,	0.106212,	0.138901,	0.380992,	0.310629,	0.343512,	0.0810807,
 	0.188845,	0.0993818,	0.0847744,	0.161531,	-0.00433421,	0.0177655,	0.0913427,	0.125005,	0.0183330,	-0.0698240,	-0.0367613,	0.0920854,
 	0.0950598,	0.131744,	0.158086,	0.171158,	0.0545786,	0.164483,	0.207671,	0.135523,	0.142977,	0.125752,	0.0483185,	0.232734,
 	-0.0305507,	-0.00570990,	0.135019,	0.0625296,	-0.305757,	0.00866955,	0.158271,	0.0366480,	-0.112961,	-0.130667,	-0.122746,	-0.0738326,
 	0.112538,	0.0318361,	0.101556,	0.0939094,	0.114210,	0.0549376,	0.124277,	0.0925640,	0.146101,	0.200817,	0.136309,	0.104766,
 	0.0428152,	0.0901931,	0.153552,	0.112185,	-0.142133,	0.0358999,	-0.00920161,	0.0237799,	-0.151603,	-0.00219733,	-0.204404,	0.0888181,
 	0.205196,	0.0402784,	0.100813,	0.116055,	0.0525285,	0.190927,	0.208679,	0.0926234,	0.153927,	0.108576,	0.0480112,	0.199708,
 	0.136439,	0.189919,	0.234207,	0.186752,	0.0580509,	0.204161,	0.202888,	0.190677,	0.0770290,	0.0510153,	-0.0151773,	0.181403,
 	0.234141,	0.0677688,	0.232722,	0.177035,	0.211470,	0.261392,	0.225394,	0.150662,	0.190597,	0.0798411,	0.0976789,	0.0786578,
 	0.113469,	0.0234335,	0.130559,	0.108046,	-0.0147607,	0.0260361,	0.142590,	0.118912,	-0.127486,	-0.0541748,	-0.0323630,	-0.00937522,
 	-0.00866478,	-0.0330448,	-0.00570525,	0.126455,	-0.232041,	0.0113681,	0.116778,	-0.00896275,	-0.133348,	0.0926221,	-0.131692,	-0.00923543,
 	0.178809,	0.0851188,	0.162234,	0.122856,	0.0115402,	0.175348,	0.131002,	0.0920761,	-0.00139574,	0.0229553,	0.0531648,	0.0350304,
 	0.0428379,	0.176875,	-0.00700985,	0.0330893,	0.380704,	-0.00811540,	0.0896876,	0.162564,	0.372659,	0.461335,	0.276939,	0.172352,
 	0.140753,	0.148529,	0.0832084,	0.117852,	0.00405856,	-0.00352886,	0.0380572,	0.0273308,	-0.0271075,	-0.0293486,	-0.0113416,	0.0877000,
 	0.128953,	0.0563617,	0.189133,	0.0155784,	-0.0861845,	0.0874437,	0.0149204,	0.0903801,	-0.0782715,	-0.0711405,	0.0136818,	0.000535451,
 	0.102547,	0.0818589,	0.0174957,	-0.0252638,	-0.182907,	0.00352400,	0.0157156,	-0.0322201,	-0.0751102,	0.0583986,	-0.172354,	0.0572122,
 	0.0718464,	-0.0372995,	0.115584,	0.163830,	-0.00340369,	0.0969330,	0.164005,	-0.0549923,	-0.170890,	-0.140567,	0.0262950,	0.0853798,
 	0.195759,	0.246006,	0.181892,	0.197019,	0.262801,	0.139916,	0.220649,	0.158955,	0.246027,	0.137365,	0.218773,	0.181462,
 	0.0798446,	0.0569584,	0.126696,	0.0140908,	0.514193,	0.0577479,	0.00210476,	0.176707,	0.317026,	0.456232,	0.460630,	0.0860719,
 	0.0745685,	0.118076,	0.209412,	0.0294447,	0.115646,	0.178373,	0.220181,	0.0241284,	0.0123919,	0.0551093,	0.0450193,	0.0939301,
 	0.223423,	0.196266,	0.266515,	0.215471,	0.209588,	0.258474,	0.174242,	0.222604,	0.124375,	0.135857,	0.221202,	0.168733) 
 b.b = VectorD(0.113416,	0.0690589,	-0.141102,	0.0698763,	-0.0543825,	-0.137122,	0.0185109,	0.228882,	0.219778,	0.229706,	0.0174022,	-0.171838), b.w = 
MatrixD(-0.389721,
 	-0.406383,
 	-0.709490,
 	-0.365449,
 	-0.874191,
 	-0.709818,
 	-0.493838,
 	-0.337049,
 	-0.649485,
 	-0.591410,
 	-0.706006,
 	-0.617967) 
 b.b = VectorD(1.80231))
    ----------------------------------------------------------------------------
    fitMap     qof = 
		rSq 	 -> VectorD(0.304137) 
		rSqBar 	 -> VectorD(0.302428) 
		sst 	 -> VectorD(3840.99) 
		sse 	 -> VectorD(2672.80) 
		mse0 	 -> VectorD(0.545693) 
		rmse 	 -> VectorD(0.738710) 
		mae 	 -> VectorD(0.577804) 
		dfm 	 -> VectorD(12.0000) 
		df 	 -> VectorD(4886.00) 
		fStat 	 -> VectorD(177.958) 
		aic 	 -> VectorD(-5440.63) 
		bic 	 -> VectorD(-5356.18) 
		mape 	 -> VectorD(10.2749) 
		smape 	 -> VectorD(9.92586) 

    ----------------------------------------------------------------------------
        
Run + title
--------------------
| Cross-Validation |
--------------------
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2118.8329788018536,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.325674,
 	0.324018,
 	713.957,
 	481.440,
 	0.491767,
 	0.701261,
 	0.544205,
 	12.0000,
 	4886.00,
 	196.646,
 	-1018.05,
 	-954.522,
 	9.59583,
 	9.35365)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2016.0052750564369,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.339392,
 	0.337770,
 	817.783,
 	540.234,
 	0.551822,
 	0.742847,
 	0.580156,
 	12.0000,
 	4886.00,
 	209.185,
 	-1072.18,
 	-1008.66,
 	10.3794,
 	9.96051)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2015.3812077565897,346)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.304360,
 	0.302651,
 	724.415,
 	503.932,
 	0.514742,
 	0.717455,
 	0.560104,
 	12.0000,
 	4886.00,
 	178.145,
 	-1038.76,
 	-975.232,
 	9.68823,
 	9.62025)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2015.3812077565897,-3)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.362843,
 	0.361278,
 	776.501,
 	494.753,
 	0.505366,
 	0.710891,
 	0.557858,
 	12.0000,
 	4886.00,
 	231.870,
 	-1030.30,
 	-966.780,
 	9.84287,
 	9.68513)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (1962.5452407285009,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.307346,
 	0.305645,
 	802.090,
 	555.570,
 	0.567488,
 	0.753318,
 	0.583890,
 	12.0000,
 	4886.00,
 	180.669,
 	-1086.30,
 	-1022.78,
 	10.2049,
 	9.97605)
-----------------------------------------------
| showQofStatTable: Statistical Table for QoF |
-----------------------------------------------
|        name |   num |        min |        max |       mean |      stdev |   interval |
----------------------------------------------------------------------------------------
|         rSq |     5 |      0.304 |      0.363 |      0.328 |      0.024 |      0.030 |
|      rSqBar |     5 |      0.303 |      0.361 |      0.326 |      0.024 |      0.030 |
|         sst |     5 |    713.957 |    817.783 |    766.949 |     46.172 |     57.342 |
|         sse |     5 |    481.440 |    555.570 |    515.186 |     31.390 |     38.983 |
|        mse0 |     5 |      0.492 |      0.567 |      0.526 |      0.032 |      0.040 |
|        rmse |     5 |      0.701 |      0.753 |      0.725 |      0.022 |      0.027 |
|         mae |     5 |      0.544 |      0.584 |      0.565 |      0.017 |      0.021 |
|         dfm |     5 |     12.000 |     12.000 |     12.000 |      0.000 |      0.000 |
|          df |     5 |   4886.000 |   4886.000 |   4886.000 |      0.000 |      0.000 |
|       fStat |     5 |    178.145 |    231.870 |    199.303 |     22.137 |     27.492 |
|         aic |     5 |  -1086.304 |  -1018.047 |  -1049.119 |     28.903 |     35.895 |
|         bic |     5 |  -1022.779 |   -954.522 |   -985.594 |     28.903 |     35.895 |
|        mape |     5 |      9.596 |     10.379 |      9.942 |      0.337 |      0.419 |
|       smape |     5 |      9.354 |      9.976 |      9.719 |      0.259 |      0.322 |
----------------------------------------------------------------------------------------
----------------------------------------
| Feature Selection Technique: Forward |
----------------------------------------
-------------------------------------------------------------------------------------
| forwardSelAll: (l = 0) INITIAL variable (0, intercept) => cols = LinkedHashSet(0) |
-------------------------------------------------------------------------------------
optimize: bSize = 20, nB = 244
ending epoch = (3845.411131946373,400)
ERROR @ CDF.fisherCDF: coordinate x should be nonnegative
optimize: bSize = 20, nB = 244
ending epoch = (3842.1275734966093,400)
ERROR @ CDF.fisherCDF: coordinate x should be nonnegative
optimize: bSize = 20, nB = 244
ending epoch = (3838.9353016604755,400)
optimize: bSize = 20, nB = 244
ending epoch = (3843.7529850855,321)
ERROR @ CDF.fisherCDF: coordinate x should be nonnegative
optimize: bSize = 20, nB = 244
ending epoch = (3842.158793924682,400)
ERROR @ CDF.fisherCDF: coordinate x should be nonnegative
optimize: bSize = 20, nB = 244
ending epoch = (3837.4785984291934,400)
optimize: bSize = 20, nB = 244
ending epoch = (3845.0382454556657,400)
ERROR @ CDF.fisherCDF: coordinate x should be nonnegative
optimize: bSize = 20, nB = 244
ending epoch = (3841.3421172671583,400)
optimize: bSize = 20, nB = 244
ending epoch = (3809.4995712971213,400)
optimize: bSize = 20, nB = 244
ending epoch = (3838.0037526696733,263)
optimize: bSize = 20, nB = 244
ending epoch = (3109.432508427045,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2516.3440494017573,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.187600,
 	0.187268,
 	713.957,
 	580.019,
 	0.592460,
 	0.769715,
 	0.609980,
 	2.00000,
 	4896.00,
 	565.294,
 	-1128.02,
 	-1113.36,
 	10.7217,
 	10.4743)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2436.385434663892,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.195310,
 	0.194981,
 	817.783,
 	658.062,
 	0.672178,
 	0.819865,
 	0.650753,
 	2.00000,
 	4896.00,
 	594.164,
 	-1189.54,
 	-1174.88,
 	11.5831,
 	11.2066)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2495.7786017158696,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.175680,
 	0.175344,
 	724.415,
 	597.149,
 	0.609958,
 	0.780998,
 	0.619475,
 	2.00000,
 	4896.00,
 	521.721,
 	-1141.52,
 	-1126.86,
 	10.9535,
 	10.6380)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2433.358828352604,265)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.230689,
 	0.230374,
 	776.501,
 	597.371,
 	0.610185,
 	0.781143,
 	0.624665,
 	2.00000,
 	4896.00,
 	734.067,
 	-1141.69,
 	-1127.03,
 	11.3612,
 	10.8594)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2429.4266481381796,301)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.178035,
 	0.177699,
 	802.090,
 	659.290,
 	0.673432,
 	0.820629,
 	0.651488,
 	2.00000,
 	4896.00,
 	530.228,
 	-1190.50,
 	-1175.84,
 	11.5406,
 	11.1445)
----------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 1) ADD variable (11, alcohol) => cols = LinkedHashSet(0, 11) @ 0.19080432208478626 |
----------------------------------------------------------------------------------------------------------
optimize: bSize = 20, nB = 244
ending epoch = (3086.0931448566557,400)
optimize: bSize = 20, nB = 244
ending epoch = (2866.6932108052756,400)
optimize: bSize = 20, nB = 244
ending epoch = (3097.91222149336,400)
optimize: bSize = 20, nB = 244
ending epoch = (3064.628258238453,400)
optimize: bSize = 20, nB = 244
ending epoch = (3091.6894877004192,400)
optimize: bSize = 20, nB = 244
ending epoch = (3038.9149617993357,400)
optimize: bSize = 20, nB = 244
ending epoch = (3093.970211717912,400)
optimize: bSize = 20, nB = 244
ending epoch = (3101.4192325787712,400)
optimize: bSize = 20, nB = 244
ending epoch = (3061.5894509669442,400)
optimize: bSize = 20, nB = 244
ending epoch = (3077.331614629913,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2327.292754148368,182)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.260898,
 	0.260445,
 	713.957,
 	527.687,
 	0.539006,
 	0.734170,
 	0.572162,
 	3.00000,
 	4895.00,
 	575.969,
 	-1080.21,
 	-1060.66,
 	10.0969,
 	9.81247)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2244.8448115253464,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.268731,
 	0.268283,
 	817.783,
 	598.019,
 	0.610847,
 	0.781567,
 	0.613018,
 	3.00000,
 	4895.00,
 	599.616,
 	-1140.33,
 	-1120.78,
 	10.8231,
 	10.5159)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2290.0196893189354,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.244450,
 	0.243987,
 	724.415,
 	547.331,
 	0.559072,
 	0.747711,
 	0.585870,
 	3.00000,
 	4895.00,
 	527.909,
 	-1097.00,
 	-1077.45,
 	10.2996,
 	10.0287)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2288.753573042519,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.297554,
 	0.297123,
 	776.501,
 	545.450,
 	0.557150,
 	0.746425,
 	0.581713,
 	3.00000,
 	4895.00,
 	691.168,
 	-1095.39,
 	-1075.84,
 	10.5199,
 	10.0863)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2205.1068544635564,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.222914,
 	0.222438,
 	802.090,
 	623.293,
 	0.636663,
 	0.797912,
 	0.626746,
 	3.00000,
 	4895.00,
 	468.058,
 	-1161.94,
 	-1142.39,
 	11.0176,
 	10.7154)
---------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 2) ADD variable (2, volatile acidity) => cols = LinkedHashSet(0, 11, 2) @ 0.25351530284067403 |
---------------------------------------------------------------------------------------------------------------------
optimize: bSize = 20, nB = 244
ending epoch = (2914.9289421296066,400)
optimize: bSize = 20, nB = 244
ending epoch = (2928.65694209355,400)
optimize: bSize = 20, nB = 244
ending epoch = (2853.925171753745,400)
optimize: bSize = 20, nB = 244
ending epoch = (2924.549555739622,400)
optimize: bSize = 20, nB = 244
ending epoch = (2877.9640038698344,400)
optimize: bSize = 20, nB = 244
ending epoch = (2915.7365279354267,400)
optimize: bSize = 20, nB = 244
ending epoch = (2898.8763528289055,400)
optimize: bSize = 20, nB = 244
ending epoch = (2898.4311458034144,400)
optimize: bSize = 20, nB = 244
ending epoch = (2912.7585729873676,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2327.5059667867727,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.280408,
 	0.279820,
 	713.957,
 	513.758,
 	0.524778,
 	0.724416,
 	0.564300,
 	4.00000,
 	4894.00,
 	476.769,
 	-1066.07,
 	-1041.64,
 	9.86769,
 	9.65602)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2235.162616414581,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.274259,
 	0.273666,
 	817.783,
 	593.499,
 	0.606230,
 	0.778608,
 	0.609121,
 	4.00000,
 	4894.00,
 	462.363,
 	-1134.55,
 	-1110.12,
 	10.7484,
 	10.4320)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2261.249248904948,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.235617,
 	0.234992,
 	724.415,
 	553.730,
 	0.565608,
 	0.752069,
 	0.587559,
 	4.00000,
 	4894.00,
 	377.138,
 	-1100.40,
 	-1075.97,
 	10.3055,
 	10.0485)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2257.651580692969,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.295702,
 	0.295126,
 	776.501,
 	546.888,
 	0.558619,
 	0.747408,
 	0.583682,
 	4.00000,
 	4894.00,
 	513.691,
 	-1094.52,
 	-1070.09,
 	10.4651,
 	10.1102)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2187.0064265959277,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.239357,
 	0.238735,
 	802.090,
 	610.104,
 	0.623191,
 	0.789425,
 	0.616364,
 	4.00000,
 	4894.00,
 	385.007,
 	-1148.81,
 	-1124.38,
 	10.8131,
 	10.5324)
----------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 3) ADD variable (4, residual sugar) => cols = LinkedHashSet(0, 11, 2, 4) @ 0.25696814856159866 |
----------------------------------------------------------------------------------------------------------------------
optimize: bSize = 20, nB = 244
ending epoch = (2829.145098331042,400)
optimize: bSize = 20, nB = 244
ending epoch = (2848.1067567551727,400)
optimize: bSize = 20, nB = 244
ending epoch = (2848.2052910349407,400)
optimize: bSize = 20, nB = 244
ending epoch = (2826.536105707592,400)
optimize: bSize = 20, nB = 244
ending epoch = (2844.4145266377554,400)
optimize: bSize = 20, nB = 244
ending epoch = (2847.638920235421,400)
optimize: bSize = 20, nB = 244
ending epoch = (2831.247709425361,400)
optimize: bSize = 20, nB = 244
ending epoch = (2836.352757312543,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2307.208994242182,217)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.286364,
 	0.285635,
 	713.957,
 	509.505,
 	0.520435,
 	0.721412,
 	0.561040,
 	5.00000,
 	4893.00,
 	392.687,
 	-1059.96,
 	-1030.64,
 	9.77872,
 	9.60576)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2210.6508253207826,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.280582,
 	0.279847,
 	817.783,
 	588.328,
 	0.600948,
 	0.775208,
 	0.605004,
 	5.00000,
 	4893.00,
 	381.667,
 	-1128.28,
 	-1098.96,
 	10.6953,
 	10.3692)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2239.509887215283,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.241212,
 	0.240437,
 	724.415,
 	549.677,
 	0.561468,
 	0.749312,
 	0.588246,
 	5.00000,
 	4893.00,
 	311.089,
 	-1094.78,
 	-1065.46,
 	10.2858,
 	10.0689)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2242.0794953188065,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.306855,
 	0.306146,
 	776.501,
 	538.228,
 	0.549773,
 	0.741467,
 	0.579363,
 	5.00000,
 	4893.00,
 	433.225,
 	-1084.86,
 	-1055.54,
 	10.4082,
 	10.0432)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 979
DEBUG @ PredictorMV.validate: test set size = 979
optimize: bSize = 20, nB = 195
ending epoch = (2160.8830314941615,400)
DEBUG @ PredictorMV.validate: parameters b = null
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.244326,
 	0.243554,
 	802.090,
 	606.119,
 	0.619120,
 	0.786842,
 	0.617036,
 	5.00000,
 	4893.00,
 	316.403,
 	-1143.70,
 	-1114.38,
 	10.8857,
 	10.5458)
-----------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 4) ADD variable (1, fixed acidity) => cols = LinkedHashSet(0, 11, 2, 4, 1) @ 0.2635944083643543 |
-----------------------------------------------------------------------------------------------------------------------
optimize: bSize = 20, nB = 244
ending epoch = (2829.9975322198934,400)
optimize: bSize = 20, nB = 244
ending epoch = (2831.0947434411737,400)
optimize: bSize = 20, nB = 244
