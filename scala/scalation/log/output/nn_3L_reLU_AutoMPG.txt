readFileIntoArray: C:\Users\spenc\Desktop\UGA_projects\data_science\DS2_P2\scala\scalation\data\auto_mpg_fixed_cleaned.csv
load: read 99 data rows so far ...
load: read 199 data rows so far ...
load: read 299 data rows so far ...
load: read in an 392-by-8 matrix from auto_mpg_fixed_cleaned.csv
ox_fname = Array(intercept, cylinders, displacement, horsepower, weight, acceleration, modelyear)
--------------------------------------
| NeuralNet_3L for AutoMPG with reLU |
--------------------------------------
 scaled: x = 
MatrixD(1.00000,	1.48205,	1.07591,	0.663285,	0.619748,	-1.28362,	-1.62324,
 	1.00000,	1.48205,	1.48683,	1.57258,	0.842258,	-1.46485,	-1.62324,
 	1.00000,	1.48205,	1.18103,	1.18288,	0.539692,	-1.64609,	-1.62324,
 	1.00000,	1.48205,	1.04725,	1.18288,	0.536160,	-1.28362,	-1.62324,
 	1.00000,	1.48205,	1.02813,	0.923085,	0.554997,	-1.82732,	-1.62324,
 	1.00000,	1.48205,	2.24177,	2.42992,	1.60515,	-2.00855,	-1.62324,
 	1.00000,	1.48205,	2.48068,	3.00148,	1.62045,	-2.37102,	-1.62324,
 	1.00000,	1.48205,	2.34689,	2.87158,	1.57101,	-2.55226,	-1.62324,
 	1.00000,	1.48205,	2.49023,	3.13138,	1.70404,	-2.00855,	-1.62324,
 	1.00000,	1.48205,	1.86908,	2.22208,	1.02709,	-2.55226,	-1.62324,
 	1.00000,	1.48205,	1.80219,	1.70248,	0.689209,	-2.00855,	-1.62324,
 	1.00000,	1.48205,	1.39127,	1.44268,	0.743365,	-2.73349,	-1.62324,
 	1.00000,	1.48205,	1.96464,	1.18288,	0.922314,	-2.18979,	-1.62324,
 	1.00000,	1.48205,	2.49023,	3.13138,	0.127638,	-2.00855,	-1.62324,
 	1.00000,	-0.862911,	-0.777990,	-0.246015,	-0.712953,	-0.196214,	-1.62324,
 	1.00000,	0.309571,	0.0342878,	-0.246015,	-0.170219,	-0.0149795,	-1.62324,
 	1.00000,	0.309571,	0.0438440,	-0.194055,	-0.239679,	-0.0149795,	-1.62324,
 	1.00000,	0.309571,	0.0534002,	-0.505815,	-0.459834,	0.166254,	-1.62324,
 	1.00000,	-0.862911,	-0.930889,	-0.427875,	-0.997859,	-0.377448,	-1.62324,
 	1.00000,	-0.862911,	-0.930889,	-1.51903,	-1.34516,	1.79736,	-1.62324,
 	1.00000,	-0.862911,	-0.806659,	-0.453855,	-0.359764,	0.709956,	-1.62324,
 	1.00000,	-0.862911,	-0.835327,	-0.375915,	-0.644670,	-0.377448,	-1.62324,
 	1.00000,	-0.862911,	-0.863996,	-0.246015,	-0.709421,	0.709956,	-1.62324,
 	1.00000,	-0.862911,	-0.701540,	0.221625,	-0.875420,	-1.10238,	-1.62324,
 	1.00000,	0.309571,	0.0438440,	-0.375915,	-0.388019,	-0.196214,	-1.62324,
 	1.00000,	1.48205,	1.58239,	2.87158,	1.92773,	-0.558682,	-1.62324,
 	1.00000,	1.48205,	1.07591,	2.48188,	1.64635,	-0.196214,	-1.62324,
 	1.00000,	1.48205,	1.18103,	2.74168,	1.65342,	-0.739916,	-1.62324,
 	1.00000,	1.48205,	1.04725,	2.30002,	2.06547,	1.07242,	-1.62324,
 	1.00000,	-0.862911,	-0.930889,	-0.427875,	-0.997859,	-0.377448,	-1.35178,
 	1.00000,	-0.862911,	-0.519972,	-0.375915,	-0.840101,	-0.0149795,	-1.35178,
 	1.00000,	-0.862911,	-0.777990,	-0.246015,	-0.882484,	-0.558682,	-1.35178,
 	1.00000,	0.309571,	0.359199,	-0.116115,	-0.404501,	-0.921150,	-1.35178,
 	1.00000,	0.309571,	0.292305,	0.0137853,	0.543224,	-0.0149795,	-1.35178,
 	1.00000,	0.309571,	0.531211,	-0.116115,	0.413721,	-0.0149795,	-1.35178,
 	1.00000,	0.309571,	0.531211,	-0.427875,	0.381934,	-0.0149795,	-1.35178,
 	1.00000,	0.309571,	0.359199,	-0.116115,	0.365452,	-0.0149795,	-1.35178,
 	1.00000,	1.48205,	1.48683,	1.57258,	1.44974,	-1.28362,	-1.35178,
 	1.00000,	1.48205,	1.96464,	1.83238,	1.74995,	-1.46485,	-1.35178,
 	1.00000,	1.48205,	1.49639,	1.26082,	1.38499,	-0.739916,	-1.35178,
 	1.00000,	1.48205,	1.18103,	1.18288,	1.31671,	-0.921150,	-1.35178,
 	1.00000,	1.48205,	1.80219,	1.96228,	2.32801,	-1.46485,	-1.35178,
 	1.00000,	1.48205,	1.96464,	1.70248,	2.08195,	-1.28362,	-1.35178,
 	1.00000,	1.48205,	1.96464,	1.83238,	2.54581,	-1.28362,	-1.35178,
 	1.00000,	0.309571,	0.607660,	0.143685,	-0.0183472,	-0.739916,	-1.35178,
 	1.00000,	-0.862911,	-0.519972,	-0.843554,	-0.670570,	1.25366,	-1.35178,
 	1.00000,	0.309571,	0.531211,	-0.116115,	0.358388,	-0.196214,	-1.35178,
 	1.00000,	0.309571,	0.531211,	-0.427875,	0.190035,	-0.377448,	-1.35178,
 	1.00000,	-0.862911,	-0.691984,	-0.479835,	-0.891902,	-0.558682,	-1.35178,
 	1.00000,	-0.862911,	-0.749321,	-0.375915,	-1.00610,	-0.558682,	-1.35178,
 	1.00000,	-0.862911,	-1.10290,	-0.895514,	-1.06379,	1.43489,	-1.35178,
 	1.00000,	-0.862911,	-1.01690,	-0.739634,	-1.07438,	-0.377448,	-1.35178,
 	1.00000,	-0.862911,	-1.17935,	-1.02541,	-1.41815,	1.25366,	-1.35178,
 	1.00000,	-0.862911,	-1.16979,	-0.921494,	-1.60652,	0.891190,	-1.35178,
 	1.00000,	-0.862911,	-0.930889,	-1.15531,	-1.34634,	1.25366,	-1.35178,
 	1.00000,	-0.862911,	-0.988227,	-0.895514,	-1.20389,	1.79736,	-1.35178,
 	1.00000,	-0.862911,	-0.777990,	-0.246015,	-0.823619,	-0.0149795,	-1.08031,
 	1.00000,	-0.862911,	-0.926111,	-0.635714,	-1.00257,	0.528722,	-1.08031,
 	1.00000,	-0.862911,	-0.930889,	-1.31119,	-0.851874,	2.88476,	-1.08031,
 	1.00000,	-0.862911,	-0.519972,	-0.375915,	-0.670570,	1.43489,	-1.08031,
 	1.00000,	-0.862911,	-0.691984,	-0.479835,	-0.884839,	0.347488,	-1.08031,
 	1.00000,	1.48205,	1.48683,	1.57258,	1.52627,	-1.28362,	-1.08031,
 	1.00000,	1.48205,	1.96464,	1.83238,	1.65695,	-1.28362,	-1.08031,
 	1.00000,	1.48205,	1.18103,	1.18288,	1.36262,	-0.739916,	-1.08031,
 	1.00000,	1.48205,	1.49639,	1.26082,	1.35556,	-0.921150,	-1.08031,
 	1.00000,	1.48205,	1.04725,	1.18288,	0.817534,	-1.46485,	-1.08031,
 	1.00000,	1.48205,	2.24177,	2.68972,	1.94892,	-1.64609,	-1.08031,
 	1.00000,	1.48205,	1.48683,	1.31278,	1.79469,	-0.739916,	-1.08031,
 	1.00000,	1.48205,	1.48683,	1.44268,	1.74054,	-0.739916,	-1.08031,
 	1.00000,	1.48205,	1.96464,	2.22208,	1.70051,	-1.10238,	-1.08031,
 	1.00000,	-1.44915,	-1.18891,	-0.194055,	-0.762400,	-0.739916,	-1.08031,
 	1.00000,	1.48205,	1.04725,	1.18288,	1.07654,	-1.10238,	-1.08031,
 	1.00000,	1.48205,	1.07591,	0.663285,	1.31906,	-0.558682,	-1.08031,
 	1.00000,	1.48205,	1.02813,	0.923085,	1.54981,	0.166254,	-1.08031,
 	1.00000,	1.48205,	1.18103,	1.18288,	1.29434,	-0.558682,	-1.08031,
 	1.00000,	-0.862911,	-0.701540,	0.195645,	-0.0524889,	-0.377448,	-1.08031,
 	1.00000,	-0.862911,	-0.701540,	-0.739634,	-0.549309,	0.891190,	-1.08031,
 	1.00000,	-0.862911,	-0.711097,	-0.453855,	0.00166684,	1.43489,	-1.08031,
 	1.00000,	-0.862911,	-0.940446,	-0.921494,	-0.928399,	0.891190,	-1.08031,
 	1.00000,	-0.862911,	-0.691984,	-0.479835,	-0.685875,	0.166254,	-1.08031,
 	1.00000,	-0.862911,	-0.930889,	-0.323955,	-0.811846,	0.528722,	-1.08031,
 	1.00000,	-0.862911,	-0.711097,	-0.194055,	-0.555195,	-0.377448,	-1.08031,
 	1.00000,	-0.862911,	-0.921333,	-0.635714,	-0.957831,	-0.196214,	-1.08031,
 	1.00000,	-0.862911,	-0.930889,	-0.427875,	-1.03318,	0.347488,	-1.08031,
 	1.00000,	1.48205,	1.48683,	1.83238,	1.32142,	-0.921150,	-0.808850,
 	1.00000,	1.48205,	1.04725,	1.18288,	0.817534,	-1.46485,	-0.808850,
 	1.00000,	1.48205,	1.48683,	1.05298,	1.18956,	-0.921150,	-0.808850,
 	1.00000,	1.48205,	1.02813,	0.845145,	1.25313,	-0.377448,	-0.808850,
 	1.00000,	1.48205,	1.18103,	1.18288,	0.941151,	-1.10238,	-0.808850,
 	1.00000,	1.48205,	2.24177,	2.42992,	2.32448,	-1.46485,	-0.808850,
 	1.00000,	1.48205,	1.96464,	1.18288,	1.74995,	-1.28362,	-0.808850,
 	1.00000,	1.48205,	1.49639,	1.39072,	1.63105,	-0.921150,	-0.808850,
 	1.00000,	1.48205,	1.18103,	1.18288,	1.48271,	-0.377448,	-0.808850,
 	1.00000,	1.48205,	2.34689,	2.87158,	2.06900,	-1.64609,	-0.808850,
 	1.00000,	1.48205,	2.49023,	3.13138,	2.32330,	-1.64609,	-0.808850,
 	1.00000,	1.48205,	1.58239,	1.83238,	0.992952,	-1.64609,	-0.808850,
 	1.00000,	0.309571,	0.292305,	0.0137853,	0.168843,	0.347488,	-0.808850,
 	1.00000,	0.309571,	0.531211,	-0.116115,	0.353679,	0.891190,	-0.808850,
 	1.00000,	0.309571,	0.359199,	-0.116115,	-0.0383613,	0.166254,	-0.808850,
 	1.00000,	0.309571,	0.531211,	-0.427875,	0.0511134,	0.347488,	-0.808850,
 	1.00000,	0.309571,	0.0342878,	-0.246015,	-0.0866305,	0.166254,	-0.808850,
 	1.00000,	-0.862911,	-0.930889,	-1.51903,	-1.20977,	1.97859,	-0.808850,
 	1.00000,	1.48205,	1.96464,	1.18288,	2.37745,	-0.558682,	-0.808850,
 	1.00000,	1.48205,	1.96464,	1.62454,	2.27032,	-1.10238,	-0.808850,
 	1.00000,	1.48205,	1.58239,	1.70248,	1.97364,	-0.921150,	-0.808850,
 	1.00000,	1.48205,	1.48683,	1.96228,	1.79116,	-1.10238,	-0.808850,
 	1.00000,	0.309571,	0.359199,	-0.116115,	-0.222020,	-0.196214,	-0.808850,
 	1.00000,	-0.862911,	-0.930889,	-0.427875,	-0.822442,	1.25366,	-0.808850,
 	1.00000,	-0.862911,	-0.519972,	-0.843554,	-0.678811,	1.43489,	-0.808850,
 	1.00000,	-0.862911,	-0.825771,	-0.271995,	-0.704712,	0.347488,	-0.808850,
 	1.00000,	-1.44915,	-1.18891,	-0.375915,	-1.00492,	-0.739916,	-0.808850,
 	1.00000,	-0.862911,	-0.691984,	-0.505815,	-0.785946,	1.07242,	-0.808850,
 	1.00000,	0.309571,	-0.376629,	0.0657453,	-0.595223,	-0.558682,	-0.808850,
 	1.00000,	-0.862911,	-0.921333,	-0.375915,	-0.838924,	-0.0149795,	-0.808850,
 	1.00000,	1.48205,	1.48683,	1.05298,	1.30023,	-0.921150,	-0.808850,
 	1.00000,	1.48205,	1.96464,	3.26128,	1.53098,	-2.18979,	-0.808850,
 	1.00000,	-0.862911,	-1.20802,	-1.44109,	-1.30749,	1.43489,	-0.808850,
 	1.00000,	-0.862911,	-0.749321,	-0.765614,	-0.964895,	-0.0149795,	-0.808850,
 	1.00000,	-0.862911,	-0.768434,	-0.349935,	-0.465720,	-0.558682,	-0.808850,
 	1.00000,	-0.862911,	-0.701540,	0.195645,	-0.129013,	-0.0149795,	-0.808850,
 	1.00000,	1.48205,	1.18103,	1.18288,	0.496132,	-1.64609,	-0.808850,
 	1.00000,	-0.862911,	-0.701540,	0.143685,	-0.373891,	-0.558682,	-0.808850,
 	1.00000,	0.309571,	-0.367073,	0.455445,	-0.200828,	-0.739916,	-0.808850,
 	1.00000,	1.48205,	1.48683,	1.96228,	0.808116,	-1.64609,	-0.808850,
 	1.00000,	0.309571,	0.0342878,	-0.246015,	0.146475,	0.347488,	-0.537387,
 	1.00000,	0.309571,	0.359199,	-0.116115,	-0.0901624,	0.166254,	-0.537387,
 	1.00000,	0.309571,	0.531211,	-0.116115,	0.421962,	0.528722,	-0.537387,
 	1.00000,	-0.862911,	-1.10290,	-0.973454,	-1.20977,	1.25366,	-0.537387,
 	1.00000,	-0.862911,	-0.691984,	-0.635714,	-0.619947,	0.347488,	-0.537387,
 	1.00000,	-0.862911,	-1.17935,	-1.02541,	-1.34398,	1.97859,	-0.537387,
 	1.00000,	-0.862911,	-0.519972,	-0.765614,	-0.512812,	0.528722,	-0.537387,
 	1.00000,	0.309571,	0.531211,	-0.116115,	0.945860,	0.528722,	-0.537387,
 	1.00000,	0.309571,	0.607660,	0.143685,	0.770442,	0.891190,	-0.537387,
 	1.00000,	0.309571,	0.292305,	0.0137853,	0.748074,	0.347488,	-0.537387,
 	1.00000,	1.48205,	1.02813,	0.923085,	1.36969,	-0.558682,	-0.537387,
 	1.00000,	1.48205,	1.48683,	1.18288,	2.02662,	-0.377448,	-0.537387,
 	1.00000,	1.48205,	1.18103,	1.18288,	1.74171,	-0.739916,	-0.537387,
 	1.00000,	1.48205,	1.02813,	0.923085,	1.95480,	0.166254,	-0.537387,
 	1.00000,	1.48205,	1.04725,	1.18288,	1.50625,	-0.0149795,	-0.537387,
 	1.00000,	-0.862911,	-0.921333,	-0.557775,	-0.893080,	0.347488,	-0.537387,
 	1.00000,	-0.862911,	-1.10290,	-0.973454,	-1.19447,	-0.0149795,	-0.537387,
 	1.00000,	-0.862911,	-0.930889,	-0.687674,	-0.797719,	-0.377448,	-0.537387,
 	1.00000,	-0.862911,	-1.13157,	-1.36315,	-1.56414,	0.347488,	-0.537387,
 	1.00000,	-0.862911,	-1.06468,	-1.12933,	-1.14738,	1.25366,	-0.537387,
 	1.00000,	-0.862911,	-0.997783,	-0.765614,	-1.00375,	-0.377448,	-0.537387,
 	1.00000,	-0.862911,	-0.997783,	-0.765614,	-1.02376,	-0.0149795,	-0.537387,
 	1.00000,	-0.862911,	-0.749321,	-0.765614,	-0.861293,	-0.558682,	-0.537387,
 	1.00000,	-0.862911,	-0.711097,	-0.194055,	-0.575209,	-0.196214,	-0.537387,
 	1.00000,	-0.862911,	-0.825771,	-0.297975,	-0.690584,	-0.0149795,	-0.537387,
 	1.00000,	-0.862911,	-1.10290,	-0.973454,	-1.15091,	0.166254,	-0.537387,
 	1.00000,	0.309571,	0.292305,	-0.246015,	0.337197,	0.166254,	-0.265923,
 	1.00000,	0.309571,	0.531211,	0.0137853,	0.566770,	0.166254,	-0.265923,
 	1.00000,	0.309571,	0.531211,	-0.843554,	0.534983,	1.97859,	-0.265923,
 	1.00000,	0.309571,	0.531211,	-0.843554,	0.212403,	1.43489,	-0.265923,
 	1.00000,	1.48205,	1.96464,	1.70248,	1.99012,	-1.46485,	-0.265923,
 	1.00000,	1.48205,	1.48683,	1.05298,	1.72170,	-0.558682,	-0.265923,
 	1.00000,	1.48205,	1.18103,	1.18288,	1.78998,	-0.377448,	-0.265923,
 	1.00000,	1.48205,	1.49639,	1.13092,	1.97717,	-0.739916,	-0.265923,
 	1.00000,	0.309571,	0.349643,	0.143685,	1.09420,	1.97859,	-0.265923,
 	1.00000,	0.309571,	0.531211,	0.0137853,	1.08243,	1.07242,	-0.265923,
 	1.00000,	0.309571,	0.607660,	0.143685,	0.885818,	1.25366,	-0.265923,
 	1.00000,	0.309571,	0.292305,	-0.246015,	0.950569,	1.25366,	-0.265923,
 	1.00000,	0.309571,	0.349643,	0.143685,	0.0723047,	-0.196214,	-0.265923,
 	1.00000,	1.48205,	0.645885,	0.143685,	0.286573,	-0.739916,	-0.265923,
 	1.00000,	1.48205,	1.02813,	0.637305,	0.225353,	-1.28362,	-0.265923,
 	1.00000,	-0.862911,	-0.930889,	-0.765614,	-0.949590,	0.166254,	-0.265923,
 	1.00000,	-0.862911,	-0.519972,	-0.557775,	-0.398615,	0.528722,	-0.265923,
 	1.00000,	0.309571,	0.359199,	-0.116115,	-0.0748575,	0.166254,	-0.265923,
 	1.00000,	-0.862911,	-0.519972,	-0.687674,	-0.453948,	1.07242,	-0.265923,
 	1.00000,	-0.862911,	-0.577310,	-0.220035,	-0.324445,	-0.739916,	-0.265923,
 	1.00000,	-0.862911,	-0.997783,	-0.869534,	-0.888371,	0.347488,	-0.265923,
 	1.00000,	-0.862911,	-0.720653,	-0.194055,	-0.509281,	0.528722,	-0.265923,
 	1.00000,	0.309571,	-0.223730,	-0.194055,	0.00755333,	-0.377448,	-0.265923,
 	1.00000,	-0.862911,	-0.997783,	-0.895514,	-1.22508,	-0.558682,	-0.265923,
 	1.00000,	0.309571,	0.359199,	-0.375915,	0.274800,	0.528722,	-0.265923,
 	1.00000,	-0.862911,	-0.758878,	-0.246015,	-0.333863,	-0.196214,	-0.265923,
 	1.00000,	-0.862911,	-0.711097,	-0.427875,	-0.0242337,	0.528722,	-0.265923,
 	1.00000,	-0.862911,	-0.701540,	-0.168075,	-0.0383613,	-0.377448,	-0.265923,
 	1.00000,	-0.862911,	-0.701540,	0.273585,	-0.360941,	-0.739916,	-0.265923,
 	1.00000,	-0.862911,	-0.988227,	-1.33717,	-1.39225,	0.709956,	-0.265923,
 	1.00000,	-0.862911,	-0.835327,	-0.479835,	-0.604642,	-0.0149795,	0.00554007,
 	1.00000,	-0.862911,	-0.749321,	-0.609734,	-0.891902,	0.492476,	0.00554007,
 	1.00000,	-0.862911,	-0.519972,	-0.323955,	-0.477493,	-0.232460,	0.00554007,
 	1.00000,	-0.862911,	-0.921333,	-0.661694,	-0.850697,	0.782450,	0.00554007,
 	1.00000,	-0.862911,	-0.892665,	-0.557775,	-0.913094,	-0.0874731,	0.00554007,
 	1.00000,	1.48205,	1.05680,	0.923085,	1.45681,	-0.921150,	0.00554007,
 	1.00000,	1.48205,	1.18103,	1.18288,	1.42737,	-0.921150,	0.00554007,
 	1.00000,	1.48205,	1.04725,	0.403485,	1.15895,	-0.594928,	0.00554007,
 	1.00000,	1.48205,	1.49639,	1.23484,	1.45681,	-0.993643,	0.00554007,
 	1.00000,	0.309571,	0.292305,	-0.116115,	0.300701,	-0.0512263,	0.00554007,
 	1.00000,	0.309571,	0.531211,	0.0137853,	0.441976,	-0.377448,	0.00554007,
 	1.00000,	0.309571,	0.0534002,	-0.609734,	0.0405177,	0.746203,	0.00554007,
 	1.00000,	0.309571,	0.359199,	-0.375915,	0.126460,	0.746203,	0.00554007,
 	1.00000,	-0.862911,	-1.04556,	-1.36315,	-1.10970,	2.41356,	0.00554007,
 	1.00000,	-0.862911,	-0.921333,	-1.15531,	-0.957831,	2.37731,	0.00554007,
 	1.00000,	-0.862911,	-0.997783,	-0.895514,	-1.22508,	-0.486188,	0.00554007,
 	1.00000,	-0.862911,	-0.988227,	-1.33717,	-1.39225,	0.673710,	0.00554007,
 	1.00000,	0.309571,	0.292305,	-0.116115,	0.792811,	0.782450,	0.00554007,
 	1.00000,	0.309571,	0.531211,	-0.687674,	0.702159,	1.97859,	0.00554007,
 	1.00000,	0.309571,	0.531211,	0.143685,	0.785747,	0.238748,	0.00554007,
 	1.00000,	0.309571,	0.607660,	-0.246015,	0.253609,	0.818697,	0.00554007,
 	1.00000,	-0.862911,	-0.930889,	-0.869534,	-1.35694,	-1.21112,	0.00554007,
 	1.00000,	-0.862911,	-1.04556,	-0.895514,	-1.16268,	0.528722,	0.00554007,
 	1.00000,	-0.862911,	-0.930889,	-0.765614,	-0.968427,	0.311242,	0.00554007,
 	1.00000,	-0.862911,	-0.519972,	-0.843554,	-0.485735,	-0.703669,	0.00554007,
 	1.00000,	-0.862911,	-0.615534,	-0.0641547,	0.202985,	0.0575141,	0.00554007,
 	1.00000,	1.48205,	1.18103,	1.18288,	1.13305,	-0.848656,	0.00554007,
 	1.00000,	-0.862911,	-0.711097,	-0.427875,	0.344261,	2.30482,	0.00554007,
 	1.00000,	0.309571,	-0.367073,	0.0917253,	-0.0560208,	-0.0149795,	0.00554007,
 	1.00000,	0.309571,	-0.252399,	0.403485,	0.991775,	0.419982,	0.00554007,
 	1.00000,	1.48205,	1.48683,	1.96228,	1.65106,	-1.24737,	0.00554007,
 	1.00000,	1.48205,	1.48683,	1.05298,	1.26844,	-1.28362,	0.00554007,
 	1.00000,	1.48205,	1.02813,	0.663285,	1.05064,	-0.196214,	0.00554007,
 	1.00000,	1.48205,	1.18103,	1.18288,	0.915250,	-0.558682,	0.00554007,
 	1.00000,	-0.862911,	-0.921333,	-0.947474,	-1.09793,	1.07242,	0.277004,
 	1.00000,	-0.862911,	-0.797102,	-0.635714,	-0.968427,	-0.268707,	0.277004,
 	1.00000,	-0.862911,	-1.10290,	-1.20727,	-1.35694,	1.10867,	0.277004,
 	1.00000,	-0.862911,	-0.691984,	-0.220035,	-0.797719,	-0.0149795,	0.277004,
 	1.00000,	-0.862911,	-1.04556,	-0.895514,	-1.21566,	0.456229,	0.277004,
 	1.00000,	1.48205,	1.05680,	1.05298,	1.06241,	-1.10238,	0.277004,
 	1.00000,	1.48205,	0.626773,	0.143685,	1.27433,	1.25366,	0.277004,
 	1.00000,	1.48205,	1.18103,	1.05298,	1.36851,	-0.667422,	0.277004,
 	1.00000,	1.48205,	1.02813,	0.663285,	1.55099,	-0.232460,	0.277004,
 	1.00000,	0.309571,	0.531211,	0.143685,	0.638585,	0.311242,	0.277004,
 	1.00000,	0.309571,	0.349643,	0.0137853,	0.526742,	0.492476,	0.277004,
 	1.00000,	0.309571,	0.292305,	-0.116115,	0.768088,	0.782450,	0.277004,
 	1.00000,	0.309571,	0.531211,	-0.168075,	0.644472,	1.25366,	0.277004,
 	1.00000,	1.48205,	1.96464,	1.96228,	1.46269,	-1.60984,	0.277004,
 	1.00000,	1.48205,	1.48683,	1.70248,	1.39794,	-1.50110,	0.277004,
 	1.00000,	1.48205,	1.96464,	2.22208,	1.58631,	-1.21112,	0.277004,
 	1.00000,	1.48205,	1.49639,	1.15690,	1.59808,	-0.377448,	0.277004,
 	1.00000,	-0.862911,	-0.930889,	-0.687674,	-1.22155,	-0.377448,	0.277004,
 	1.00000,	-0.862911,	-0.414854,	-0.427875,	-0.279707,	0.166254,	0.277004,
 	1.00000,	-0.862911,	-0.930889,	-0.765614,	-0.838924,	0.963684,	0.277004,
 	1.00000,	-0.862911,	-0.519972,	-0.401895,	-0.262048,	0.0937609,	0.277004,
 	1.00000,	-0.862911,	-0.921333,	-1.07737,	-1.09087,	0.528722,	0.277004,
 	1.00000,	-0.862911,	-0.921333,	-0.557775,	-1.06261,	0.130008,	0.277004,
 	1.00000,	-0.862911,	-0.930889,	-0.973454,	-1.16857,	0.311242,	0.277004,
 	1.00000,	-0.862911,	-0.930889,	-0.687674,	-0.927221,	-0.522435,	0.277004,
 	1.00000,	0.309571,	-0.462635,	-0.194055,	-0.191410,	-0.377448,	0.277004,
 	1.00000,	-0.862911,	-0.701540,	0.143685,	-0.444529,	-0.993643,	0.277004,
 	1.00000,	-1.44915,	-1.09334,	0.143685,	-0.303253,	-0.739916,	0.277004,
 	1.00000,	-0.862911,	-0.997783,	-1.46707,	-1.16857,	2.15983,	0.548467,
 	1.00000,	-0.862911,	-0.921333,	-0.999434,	-1.38637,	-0.413694,	0.548467,
 	1.00000,	-0.862911,	-1.11246,	-1.36315,	-1.16857,	1.39865,	0.548467,
 	1.00000,	-0.862911,	-1.04556,	-0.895514,	-1.06850,	1.10867,	0.548467,
 	1.00000,	-0.862911,	-0.988227,	-1.15531,	-1.38637,	0.311242,	0.548467,
 	1.00000,	1.48205,	0.626773,	0.143685,	0.456104,	-0.0149795,	0.548467,
 	1.00000,	1.48205,	1.18103,	0.923085,	0.891704,	-0.848656,	0.548467,
 	1.00000,	1.48205,	1.02813,	0.897105,	0.697450,	-0.993643,	0.548467,
 	1.00000,	0.309571,	0.349643,	0.0137853,	0.656245,	1.32615,	0.548467,
 	1.00000,	0.309571,	0.0534002,	-0.246015,	0.208871,	0.963684,	0.548467,
 	1.00000,	0.309571,	0.0534002,	-0.505815,	-0.0148153,	0.0937609,	0.548467,
 	1.00000,	-0.862911,	-0.519972,	-0.427875,	-0.303253,	-0.0512263,	0.548467,
 	1.00000,	0.309571,	0.292305,	-0.116115,	0.532628,	0.601216,	0.548467,
 	1.00000,	0.309571,	0.359199,	-0.375915,	0.273623,	0.601216,	0.548467,
 	1.00000,	0.309571,	0.349643,	0.0137853,	0.473763,	0.0937609,	0.548467,
 	1.00000,	0.309571,	0.0534002,	-0.505815,	0.108801,	0.419982,	0.548467,
 	1.00000,	0.309571,	0.292305,	0.143685,	0.756315,	1.14492,	0.548467,
 	1.00000,	0.309571,	0.607660,	0.403485,	0.509082,	-0.159967,	0.548467,
 	1.00000,	1.48205,	1.05680,	1.05298,	0.526742,	-0.848656,	0.548467,
 	1.00000,	0.309571,	0.349643,	1.57258,	0.550288,	-0.776162,	0.548467,
 	1.00000,	1.48205,	1.02813,	0.897105,	0.267736,	-1.57359,	0.548467,
 	1.00000,	1.48205,	1.18103,	0.923085,	1.29787,	-0.667422,	0.548467,
 	1.00000,	-0.862911,	-0.921333,	-0.947474,	-0.968427,	0.347488,	0.548467,
 	1.00000,	-0.862911,	-0.577310,	-0.246015,	-0.491621,	-0.486188,	0.548467,
 	1.00000,	-0.862911,	-0.720653,	-0.194055,	-0.797719,	-0.304954,	0.548467,
 	1.00000,	-0.862911,	-0.854440,	-0.765614,	-0.880129,	-0.377448,	0.548467,
 	1.00000,	-0.862911,	-0.577310,	-0.246015,	-0.544599,	-0.268707,	0.548467,
 	1.00000,	-0.862911,	-0.367073,	0.0137853,	-0.273821,	0.419982,	0.548467,
 	1.00000,	-0.862911,	-0.414854,	-0.505815,	-0.144318,	0.746203,	0.548467,
 	1.00000,	-0.862911,	-0.720653,	-0.194055,	-0.674102,	-0.232460,	0.548467,
 	1.00000,	-0.276670,	-0.605978,	-0.0381747,	-0.173751,	0.130008,	0.548467,
 	1.00000,	0.309571,	-0.300180,	0.533385,	0.191212,	-0.703669,	0.548467,
 	1.00000,	-0.862911,	-0.701540,	0.273585,	-0.214956,	0.0575141,	0.548467,
 	1.00000,	0.309571,	-0.300180,	0.741225,	0.509082,	0.0937609,	0.548467,
 	1.00000,	-0.862911,	-1.00734,	-0.869534,	-1.16268,	-0.232460,	0.548467,
 	1.00000,	-0.862911,	-0.921333,	-0.947474,	-0.991973,	0.383735,	0.548467,
 	1.00000,	0.309571,	0.349643,	0.273585,	0.314828,	-0.0512263,	0.819931,
 	1.00000,	0.309571,	0.0534002,	-0.505815,	0.0146171,	0.963684,	0.819931,
 	1.00000,	-0.862911,	-0.519972,	-0.427875,	-0.103113,	0.637463,	0.819931,
 	1.00000,	0.309571,	0.359199,	-0.375915,	0.338374,	0.963684,	0.819931,
 	1.00000,	0.309571,	0.292305,	0.143685,	0.450217,	0.383735,	0.819931,
 	1.00000,	1.48205,	1.05680,	0.663285,	1.01532,	-0.0512263,	0.819931,
 	1.00000,	1.48205,	1.02813,	0.637305,	0.879931,	-0.776162,	0.819931,
 	1.00000,	1.48205,	1.49639,	0.871125,	1.15071,	-0.848656,	0.819931,
 	1.00000,	1.48205,	1.18103,	0.793185,	1.00355,	-0.123720,	0.819931,
 	1.00000,	1.48205,	1.48683,	1.31278,	1.62752,	-0.232460,	0.819931,
 	1.00000,	1.48205,	1.49639,	0.975045,	1.26726,	-0.449941,	0.819931,
 	1.00000,	1.48205,	0.693666,	0.533385,	0.738655,	-0.196214,	0.819931,
 	1.00000,	1.48205,	1.58239,	1.18288,	1.13305,	-0.921150,	0.819931,
 	1.00000,	-0.862911,	-1.00734,	-0.869534,	-1.23921,	-0.558682,	0.819931,
 	1.00000,	-0.862911,	-1.03601,	-1.02541,	-1.18034,	-0.123720,	0.819931,
 	1.00000,	-0.862911,	-0.921333,	-0.635714,	-1.25098,	-0.413694,	0.819931,
 	1.00000,	-0.862911,	-0.701540,	-0.635714,	-0.362118,	-0.196214,	0.819931,
 	1.00000,	-0.276670,	-0.109055,	-0.713654,	0.650358,	1.65237,	0.819931,
 	1.00000,	1.48205,	1.48683,	0.533385,	1.08596,	0.673710,	0.819931,
 	1.00000,	-0.862911,	-0.510416,	-0.869534,	0.250077,	3.35597,	0.819931,
 	1.00000,	1.48205,	0.626773,	-0.375915,	0.520855,	2.41356,	0.819931,
 	1.00000,	-0.862911,	-0.854440,	-0.895514,	-0.915448,	-0.848656,	0.819931,
 	1.00000,	-0.862911,	-0.854440,	-0.895514,	-0.974313,	-0.232460,	0.819931,
 	1.00000,	-0.862911,	-1.04556,	-1.02541,	-1.12736,	1.32615,	0.819931,
 	1.00000,	-0.862911,	-0.988227,	-0.921494,	-0.997859,	-0.304954,	0.819931,
 	1.00000,	-0.862911,	-0.414854,	-0.375915,	-0.362118,	0.166254,	0.819931,
 	1.00000,	0.309571,	-0.204617,	0.273585,	-0.450416,	-1.53735,	0.819931,
 	1.00000,	0.309571,	-0.204617,	0.273585,	-0.326799,	-0.957396,	0.819931,
 	1.00000,	-0.862911,	-0.414854,	-0.375915,	-0.496330,	-0.848656,	0.819931,
 	1.00000,	-0.862911,	-0.921333,	-0.739634,	-0.981377,	-0.304954,	1.09139,
 	1.00000,	-0.862911,	-1.00734,	-1.15531,	-1.18858,	1.18116,	1.09139,
 	1.00000,	-0.862911,	-0.921333,	-0.895514,	-1.00963,	-0.0149795,	1.09139,
 	1.00000,	-0.862911,	-1.03601,	-1.02541,	-1.12854,	0.311242,	1.09139,
 	1.00000,	-0.862911,	-0.414854,	-0.375915,	-0.352700,	0.347488,	1.09139,
 	1.00000,	-0.862911,	-0.519972,	-0.427875,	-0.126659,	0.927437,	1.09139,
 	1.00000,	-0.862911,	-0.414854,	-0.375915,	0.0299220,	1.65237,	1.09139,
 	1.00000,	0.309571,	0.292305,	-0.375915,	0.474941,	1.14492,	1.09139,
 	1.00000,	-0.862911,	-0.930889,	-0.687674,	-0.929576,	0.0937609,	1.09139,
 	1.00000,	-0.862911,	-0.577310,	-0.375915,	-0.313849,	-0.0149795,	1.09139,
 	1.00000,	-0.862911,	-0.711097,	-0.765614,	-0.512812,	0.709956,	1.09139,
 	1.00000,	-0.862911,	-0.720653,	-0.323955,	-0.639961,	-0.196214,	1.09139,
 	1.00000,	-0.862911,	-0.825771,	-0.765614,	-0.838924,	-0.123720,	1.09139,
 	1.00000,	-0.862911,	-1.03601,	-1.02541,	-1.02141,	0.854944,	1.09139,
 	1.00000,	-0.862911,	-0.367073,	0.0137853,	-0.209070,	-0.413694,	1.09139,
 	1.00000,	-0.862911,	-1.04556,	-1.02541,	-1.02141,	1.32615,	1.09139,
 	1.00000,	-0.862911,	-0.997783,	-1.46707,	-1.05084,	2.23232,	1.09139,
 	1.00000,	-0.862911,	-0.997783,	-1.46707,	-0.756513,	2.95726,	1.09139,
 	1.00000,	-0.276670,	-0.701540,	-0.973454,	-0.0324748,	1.57988,	1.09139,
 	1.00000,	-0.862911,	-0.462635,	-0.973454,	0.320715,	2.26857,	1.09139,
 	1.00000,	-0.862911,	-0.988227,	-0.973454,	-1.32750,	-0.631175,	1.09139,
 	1.00000,	-0.862911,	-0.930889,	-0.973454,	-0.980200,	0.891190,	1.09139,
 	1.00000,	-0.862911,	-1.00734,	-1.10335,	-1.33339,	-0.0874731,	1.09139,
 	1.00000,	0.309571,	-0.252399,	0.715245,	-0.0795667,	-1.50110,	1.09139,
 	1.00000,	-1.44915,	-1.18891,	-0.116115,	-0.656443,	-1.10238,	1.09139,
 	1.00000,	-0.862911,	-0.691984,	-0.427875,	-0.562259,	-0.159967,	1.09139,
 	1.00000,	-0.862911,	-0.835327,	-0.843554,	-0.809492,	0.528722,	1.09139,
 	1.00000,	-0.862911,	-0.567753,	-0.531795,	-0.574032,	0.0575141,	1.36286,
 	1.00000,	-0.862911,	-0.414854,	-0.531795,	-0.403324,	0.311242,	1.36286,
 	1.00000,	-0.862911,	-0.367073,	-0.323955,	-0.420983,	-0.413694,	1.36286,
 	1.00000,	0.309571,	-0.204617,	0.143685,	-0.297367,	-1.06614,	1.36286,
 	1.00000,	-0.862911,	-0.567753,	-0.531795,	-0.697648,	-0.957396,	1.36286,
 	1.00000,	-0.862911,	-1.10290,	-1.20727,	-1.43935,	0.492476,	1.36286,
 	1.00000,	-0.862911,	-1.03601,	-1.05139,	-1.29807,	0.311242,	1.36286,
 	1.00000,	-0.862911,	-1.08379,	-1.15531,	-1.43346,	0.202501,	1.36286,
 	1.00000,	-0.862911,	-0.930889,	-0.973454,	-1.07438,	0.818697,	1.36286,
 	1.00000,	-0.862911,	-1.04556,	-1.02541,	-1.18034,	1.39865,	1.36286,
 	1.00000,	-0.862911,	-1.00734,	-1.10335,	-1.09204,	0.637463,	1.36286,
 	1.00000,	-0.862911,	-0.988227,	-0.947474,	-1.16857,	0.166254,	1.36286,
 	1.00000,	-0.862911,	-0.854440,	-1.07737,	-0.897789,	-0.232460,	1.36286,
 	1.00000,	-0.862911,	-0.921333,	-1.02541,	-1.09793,	0.238748,	1.36286,
 	1.00000,	-0.862911,	-0.921333,	-1.02541,	-0.703535,	1.86985,	1.36286,
 	1.00000,	-0.862911,	-0.854440,	-0.791594,	-0.927221,	-0.486188,	1.36286,
 	1.00000,	-0.862911,	-0.835327,	-0.765614,	-0.903675,	-0.413694,	1.36286,
 	1.00000,	-0.862911,	-0.825771,	-0.765614,	-0.738854,	0.456229,	1.36286,
 	1.00000,	-0.862911,	-0.720653,	-0.116115,	-0.426870,	-0.268707,	1.36286,
 	1.00000,	-0.862911,	-0.711097,	-0.791594,	-0.403324,	0.999931,	1.36286,
 	1.00000,	-0.862911,	-0.510416,	-0.635714,	0.297169,	1.76111,	1.36286,
 	1.00000,	0.309571,	-0.472191,	-0.739634,	0.214758,	1.47114,	1.36286,
 	1.00000,	0.309571,	-0.252399,	0.299565,	-0.0913397,	-1.06614,	1.36286,
 	1.00000,	0.309571,	-0.462635,	0.403485,	-0.0560208,	-0.631175,	1.36286,
 	1.00000,	0.309571,	0.349643,	0.143685,	0.514969,	0.0937609,	1.36286,
 	1.00000,	1.48205,	1.48683,	0.0137853,	0.879931,	1.25366,	1.36286,
 	1.00000,	0.309571,	0.0534002,	-0.427875,	0.0970280,	0.564969,	1.36286,
 	1.00000,	0.309571,	0.292305,	-0.505815,	0.573834,	0.383735,	1.36286,
 	1.00000,	-0.862911,	-0.787546,	-0.427875,	-0.438643,	1.47114,	1.63432,
 	1.00000,	-0.862911,	-0.787546,	-0.427875,	-0.397437,	1.10867,	1.63432,
 	1.00000,	-0.862911,	-0.787546,	-0.427875,	-0.685875,	0.891190,	1.63432,
 	1.00000,	-0.862911,	-0.787546,	-0.505815,	-0.473962,	0.238748,	1.63432,
 	1.00000,	-0.862911,	-0.567753,	-0.531795,	-0.532826,	0.166254,	1.63432,
 	1.00000,	-0.862911,	-0.414854,	-0.375915,	-0.285594,	0.891190,	1.63432,
 	1.00000,	-0.862911,	-0.519972,	-0.323955,	-0.132545,	0.311242,	1.63432,
 	1.00000,	-0.862911,	-0.854440,	-0.791594,	-1.17445,	-0.0874731,	1.63432,
 	1.00000,	-0.862911,	-0.988227,	-0.947474,	-1.12148,	0.963684,	1.63432,
 	1.00000,	-0.862911,	-0.988227,	-0.947474,	-1.18623,	0.746203,	1.63432,
 	1.00000,	-0.862911,	-0.854440,	-1.07737,	-1.00375,	-0.304954,	1.63432,
 	1.00000,	-0.862911,	-0.921333,	-0.895514,	-1.00375,	0.637463,	1.63432,
 	1.00000,	-0.862911,	-0.711097,	-0.427875,	-0.962540,	-0.377448,	1.63432,
 	1.00000,	-0.862911,	-0.835327,	-0.765614,	-0.909562,	-0.377448,	1.63432,
 	1.00000,	-0.862911,	-0.825771,	-0.895514,	-0.862470,	0.492476,	1.63432,
 	1.00000,	-0.862911,	-0.988227,	-0.973454,	-1.19211,	-0.196214,	1.63432,
 	1.00000,	-0.862911,	-0.988227,	-0.973454,	-1.19211,	0.0575141,	1.63432,
 	1.00000,	-0.862911,	-0.988227,	-0.973454,	-1.15679,	0.238748,	1.63432,
 	1.00000,	0.309571,	-0.128168,	0.143685,	-0.0383613,	0.311242,	1.63432,
 	1.00000,	0.309571,	0.645885,	-0.505815,	0.0440496,	0.528722,	1.63432,
 	1.00000,	-0.862911,	-0.367073,	-0.323955,	-0.462189,	-0.377448,	1.63432,
 	1.00000,	0.309571,	0.359199,	0.195645,	-0.167864,	-0.304954,	1.63432,
 	1.00000,	-0.862911,	-0.481748,	-0.220035,	-0.368005,	-0.594928,	1.63432,
 	1.00000,	-0.862911,	-0.567753,	-0.531795,	-0.715308,	-0.921150,	1.63432,
 	1.00000,	-0.862911,	-0.414854,	-0.375915,	-0.0324748,	0.637463,	1.63432,
 	1.00000,	-0.862911,	-0.519972,	-0.479835,	-0.220842,	0.0212673,	1.63432,
 	1.00000,	-0.862911,	-0.930889,	-1.36315,	-0.997859,	3.28348,	1.63432,
 	1.00000,	-0.862911,	-0.567753,	-0.531795,	-0.803605,	-1.42860,	1.63432,
 	1.00000,	-0.862911,	-0.711097,	-0.661694,	-0.415097,	1.10867,	1.63432,
 	1.00000,	-0.862911,	-0.720653,	-0.583754,	-0.303253,	1.39865,	1.63432) 
 scaled y = 
MatrixD(18.0000,
 	15.0000,
 	18.0000,
 	16.0000,
 	17.0000,
 	15.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	15.0000,
 	15.0000,
 	14.0000,
 	15.0000,
 	14.0000,
 	24.0000,
 	22.0000,
 	18.0000,
 	21.0000,
 	27.0000,
 	26.0000,
 	25.0000,
 	24.0000,
 	25.0000,
 	26.0000,
 	21.0000,
 	10.0000,
 	10.0000,
 	11.0000,
 	9.00000,
 	27.0000,
 	28.0000,
 	25.0000,
 	19.0000,
 	16.0000,
 	17.0000,
 	19.0000,
 	18.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	12.0000,
 	13.0000,
 	13.0000,
 	18.0000,
 	22.0000,
 	19.0000,
 	18.0000,
 	23.0000,
 	28.0000,
 	30.0000,
 	30.0000,
 	31.0000,
 	35.0000,
 	27.0000,
 	26.0000,
 	24.0000,
 	25.0000,
 	23.0000,
 	20.0000,
 	21.0000,
 	13.0000,
 	14.0000,
 	15.0000,
 	14.0000,
 	17.0000,
 	11.0000,
 	13.0000,
 	12.0000,
 	13.0000,
 	19.0000,
 	15.0000,
 	13.0000,
 	13.0000,
 	14.0000,
 	18.0000,
 	22.0000,
 	21.0000,
 	26.0000,
 	22.0000,
 	28.0000,
 	23.0000,
 	28.0000,
 	27.0000,
 	13.0000,
 	14.0000,
 	13.0000,
 	14.0000,
 	15.0000,
 	12.0000,
 	13.0000,
 	13.0000,
 	14.0000,
 	13.0000,
 	12.0000,
 	13.0000,
 	18.0000,
 	16.0000,
 	18.0000,
 	18.0000,
 	23.0000,
 	26.0000,
 	11.0000,
 	12.0000,
 	13.0000,
 	12.0000,
 	18.0000,
 	20.0000,
 	21.0000,
 	22.0000,
 	18.0000,
 	19.0000,
 	21.0000,
 	26.0000,
 	15.0000,
 	16.0000,
 	29.0000,
 	24.0000,
 	20.0000,
 	19.0000,
 	15.0000,
 	24.0000,
 	20.0000,
 	11.0000,
 	20.0000,
 	19.0000,
 	15.0000,
 	31.0000,
 	26.0000,
 	32.0000,
 	25.0000,
 	16.0000,
 	16.0000,
 	18.0000,
 	16.0000,
 	13.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	29.0000,
 	26.0000,
 	26.0000,
 	31.0000,
 	32.0000,
 	28.0000,
 	24.0000,
 	26.0000,
 	24.0000,
 	26.0000,
 	31.0000,
 	19.0000,
 	18.0000,
 	15.0000,
 	15.0000,
 	16.0000,
 	15.0000,
 	16.0000,
 	14.0000,
 	17.0000,
 	16.0000,
 	15.0000,
 	18.0000,
 	21.0000,
 	20.0000,
 	13.0000,
 	29.0000,
 	23.0000,
 	20.0000,
 	23.0000,
 	24.0000,
 	25.0000,
 	24.0000,
 	18.0000,
 	29.0000,
 	19.0000,
 	23.0000,
 	23.0000,
 	22.0000,
 	25.0000,
 	33.0000,
 	28.0000,
 	25.0000,
 	25.0000,
 	26.0000,
 	27.0000,
 	17.5000,
 	16.0000,
 	15.5000,
 	14.5000,
 	22.0000,
 	22.0000,
 	24.0000,
 	22.5000,
 	29.0000,
 	24.5000,
 	29.0000,
 	33.0000,
 	20.0000,
 	18.0000,
 	18.5000,
 	17.5000,
 	29.5000,
 	32.0000,
 	28.0000,
 	26.5000,
 	20.0000,
 	13.0000,
 	19.0000,
 	19.0000,
 	16.5000,
 	16.5000,
 	13.0000,
 	13.0000,
 	13.0000,
 	31.5000,
 	30.0000,
 	36.0000,
 	25.5000,
 	33.5000,
 	17.5000,
 	17.0000,
 	15.5000,
 	15.0000,
 	17.5000,
 	20.5000,
 	19.0000,
 	18.5000,
 	16.0000,
 	15.5000,
 	15.5000,
 	16.0000,
 	29.0000,
 	24.5000,
 	26.0000,
 	25.5000,
 	30.5000,
 	33.5000,
 	30.0000,
 	30.5000,
 	22.0000,
 	21.5000,
 	21.5000,
 	43.1000,
 	36.1000,
 	32.8000,
 	39.4000,
 	36.1000,
 	19.9000,
 	19.4000,
 	20.2000,
 	19.2000,
 	20.5000,
 	20.2000,
 	25.1000,
 	20.5000,
 	19.4000,
 	20.6000,
 	20.8000,
 	18.6000,
 	18.1000,
 	19.2000,
 	17.7000,
 	18.1000,
 	17.5000,
 	30.0000,
 	27.5000,
 	27.2000,
 	30.9000,
 	21.1000,
 	23.2000,
 	23.8000,
 	23.9000,
 	20.3000,
 	17.0000,
 	21.6000,
 	16.2000,
 	31.5000,
 	29.5000,
 	21.5000,
 	19.8000,
 	22.3000,
 	20.2000,
 	20.6000,
 	17.0000,
 	17.6000,
 	16.5000,
 	18.2000,
 	16.9000,
 	15.5000,
 	19.2000,
 	18.5000,
 	31.9000,
 	34.1000,
 	35.7000,
 	27.4000,
 	25.4000,
 	23.0000,
 	27.2000,
 	23.9000,
 	34.2000,
 	34.5000,
 	31.8000,
 	37.3000,
 	28.4000,
 	28.8000,
 	26.8000,
 	33.5000,
 	41.5000,
 	38.1000,
 	32.1000,
 	37.2000,
 	28.0000,
 	26.4000,
 	24.3000,
 	19.1000,
 	34.3000,
 	29.8000,
 	31.3000,
 	37.0000,
 	32.2000,
 	46.6000,
 	27.9000,
 	40.8000,
 	44.3000,
 	43.4000,
 	36.4000,
 	30.0000,
 	44.6000,
 	33.8000,
 	29.8000,
 	32.7000,
 	23.7000,
 	35.0000,
 	32.4000,
 	27.2000,
 	26.6000,
 	25.8000,
 	23.5000,
 	30.0000,
 	39.1000,
 	39.0000,
 	35.1000,
 	32.3000,
 	37.0000,
 	37.7000,
 	34.1000,
 	34.7000,
 	34.4000,
 	29.9000,
 	33.0000,
 	33.7000,
 	32.4000,
 	32.9000,
 	31.6000,
 	28.1000,
 	30.7000,
 	25.4000,
 	24.2000,
 	22.4000,
 	26.6000,
 	20.2000,
 	17.6000,
 	28.0000,
 	27.0000,
 	34.0000,
 	31.0000,
 	29.0000,
 	27.0000,
 	24.0000,
 	36.0000,
 	37.0000,
 	31.0000,
 	38.0000,
 	36.0000,
 	36.0000,
 	36.0000,
 	34.0000,
 	38.0000,
 	32.0000,
 	38.0000,
 	25.0000,
 	38.0000,
 	26.0000,
 	22.0000,
 	32.0000,
 	36.0000,
 	27.0000,
 	27.0000,
 	44.0000,
 	32.0000,
 	28.0000,
 	31.0000)
auto_optimize: etaI = (2.5E-4,0.004)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 2.5E-4, result = (4454.093955316804,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 4.84375E-4, result = (4440.093626018128,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 7.1875E-4, result = (4440.870343402248,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 9.53125E-4, result = (4430.437270653791,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0011875, result = (4428.583222967038,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.001421875, result = (4426.597748612291,143)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.00165625, result = (4426.597748612291,-3)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.001890625, result = (4442.735158651971,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.002125, result = (4424.301293626145,313)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0023593750000000004, result = (4424.301293626145,-3)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0025937499999999997, result = (4437.162896379749,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.002828125, result = (4449.946237374243,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0030625, result = (4498.562708913361,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0032968750000000003, result = (4472.150766147266,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0035312499999999997, result = (4424.301293626145,115)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.003765625, result = (4424.301293626145,-3)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.004, result = (4417.82980236737,331)
ending epoch = (4417.82980236737,331)

REPORT
    ----------------------------------------------------------------------------
    modelName  mn  = NeuralNet_3L_reLU
    ----------------------------------------------------------------------------
    hparameter hp  = HyperParameter (HashMap(lambda -> (0.01,0.01), maxEpochs -> (400,400), eta -> (0.1,0.1), nu -> (0.9,0.9), upLimit -> (4,4), beta -> (0.9,0.9), bSize -> (20,20)))
    ----------------------------------------------------------------------------
    features   fn  = Array(intercept, cylinders, displacement, horsepower, weight, acceleration, modelyear)
    ----------------------------------------------------------------------------
    parameter  bb  = Array(b.w = 
MatrixD(0.872516,	0.713290,	0.182917,	0.758853,	0.461973,	0.184746,	0.665149,	1.09493,	1.18948,	1.04570,	0.508633,	0.147766,	0.308208,	0.716519,	0.899951,
 	0.100163,	0.193385,	0.0796106,	0.0109458,	0.0431207,	0.169487,	0.0380969,	-0.148789,	-0.198351,	-0.220649,	0.0899692,	0.206181,	-0.0277546,	-0.137937,	0.146366,
 	0.0275193,	0.242874,	0.251095,	-0.0433360,	0.200764,	0.0149443,	0.00213661,	0.189382,	-0.0889919,	0.180282,	-0.0588051,	0.127020,	0.146246,	0.0458316,	-0.0523014,
 	-0.00273259,	-0.155587,	0.159656,	-0.0142099,	-0.0142024,	0.0348846,	0.0101238,	0.0532742,	-0.0688899,	-0.0888373,	0.145449,	0.257824,	0.0840932,	0.159013,	-0.159316,
 	-0.232585,	-0.282669,	-0.00810318,	-0.237324,	-0.265965,	-0.124040,	-0.338060,	-0.448297,	-0.746515,	-0.792584,	-0.340702,	0.0270089,	-0.0571529,	-0.271000,	-0.429487,
 	0.0718195,	-0.0131287,	0.203454,	0.141525,	0.191670,	0.320774,	0.183092,	-0.0819871,	0.0352084,	-0.235842,	0.0107480,	0.306867,	0.136421,	-0.144486,	-0.0947877,
 	0.390270,	0.270912,	0.202400,	0.0986663,	0.252539,	0.0422939,	0.243819,	0.109141,	0.240445,	0.212845,	0.136741,	0.111990,	0.267471,	0.254949,	0.182134) 
 b.b = VectorD(0.743995,	0.605320,	0.161907,	0.645471,	0.394570,	0.153252,	0.563755,	0.924044,	0.980744,	0.877190,	0.429603,	0.117605,	0.266183,	0.606701,	0.760377), b.w = 
MatrixD(0.964111,
 	0.821746,
 	0.169400,
 	0.852062,
 	0.562217,
 	0.516544,
 	0.917287,
 	1.28365,
 	2.60319,
 	1.60590,
 	0.625058,
 	0.686268,
 	0.330417,
 	0.846670,
 	1.12387) 
 b.b = VectorD(2.32700))
    ----------------------------------------------------------------------------
    fitMap     qof = 
		rSq 	 -> VectorD(0.814525) 
		rSqBar 	 -> VectorD(0.811153) 
		sst 	 -> VectorD(23819.0) 
		sse 	 -> VectorD(4417.83) 
		mse0 	 -> VectorD(11.2700) 
		rmse 	 -> VectorD(3.35708) 
		mae 	 -> VectorD(2.59762) 
		dfm 	 -> VectorD(7.00000) 
		df 	 -> VectorD(385.000) 
		fStat 	 -> VectorD(241.536) 
		aic 	 -> VectorD(-1014.96) 
		bic 	 -> VectorD(-983.194) 
		mape 	 -> VectorD(12.0700) 
		smape 	 -> VectorD(12.0516) 

    ----------------------------------------------------------------------------
        
Run + title
--------------------
| Cross-Validation |
--------------------
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3626.952271409462,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.964111,
 	0.821746,
 	0.169400,
 	0.852062,
 	0.562217,
 	0.516544,
 	0.917287,
 	1.28365,
 	2.60319,
 	1.60590,
 	0.625058,
 	0.686268,
 	0.330417,
 	0.846670,
 	1.12387) 
 b.b = VectorD(2.32700)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.831730,
 	0.828670,
 	4731.23,
 	796.127,
 	10.2068,
 	3.19480,
 	2.41353,
 	7.00000,
 	385.000,
 	271.855,
 	-185.460,
 	-166.607,
 	11.0663,
 	11.2944)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3569.0160827667496,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.964111,
 	0.821746,
 	0.169400,
 	0.852062,
 	0.562217,
 	0.516544,
 	0.917287,
 	1.28365,
 	2.60319,
 	1.60590,
 	0.625058,
 	0.686268,
 	0.330417,
 	0.846670,
 	1.12387) 
 b.b = VectorD(2.32700)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.816001,
 	0.812655,
 	4472.51,
 	822.939,
 	10.5505,
 	3.24815,
 	2.68620,
 	7.00000,
 	385.000,
 	243.914,
 	-186.650,
 	-167.797,
 	12.7993,
 	12.0993)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3435.163984130177,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.964111,
 	0.821746,
 	0.169400,
 	0.852062,
 	0.562217,
 	0.516544,
 	0.917287,
 	1.28365,
 	2.60319,
 	1.60590,
 	0.625058,
 	0.686268,
 	0.330417,
 	0.846670,
 	1.12387) 
 b.b = VectorD(2.32700)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.798294,
 	0.794627,
 	4664.26,
 	940.807,
 	12.0616,
 	3.47299,
 	2.60825,
 	7.00000,
 	385.000,
 	217.675,
 	-191.881,
 	-173.027,
 	12.5427,
 	12.6531)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3646.8856844413467,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.964111,
 	0.821746,
 	0.169400,
 	0.852062,
 	0.562217,
 	0.516544,
 	0.917287,
 	1.28365,
 	2.60319,
 	1.60590,
 	0.625058,
 	0.686268,
 	0.330417,
 	0.846670,
 	1.12387) 
 b.b = VectorD(2.32700)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.811117,
 	0.807683,
 	3962.82,
 	748.510,
 	9.59628,
 	3.09779,
 	2.51827,
 	7.00000,
 	385.000,
 	236.185,
 	-183.347,
 	-164.493,
 	12.2968,
 	11.9733)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3294.1179765151237,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.964111,
 	0.821746,
 	0.169400,
 	0.852062,
 	0.562217,
 	0.516544,
 	0.917287,
 	1.28365,
 	2.60319,
 	1.60590,
 	0.625058,
 	0.686268,
 	0.330417,
 	0.846670,
 	1.12387) 
 b.b = VectorD(2.32700)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.809104,
 	0.805633,
 	5671.58,
 	1082.68,
 	13.8805,
 	3.72566,
 	2.73514,
 	7.00000,
 	385.000,
 	233.115,
 	-198.177,
 	-179.324,
 	11.5110,
 	12.0510)
-----------------------------------------------
| showQofStatTable: Statistical Table for QoF |
-----------------------------------------------
|        name |   num |        min |        max |       mean |      stdev |   interval |
----------------------------------------------------------------------------------------
|         rSq |     5 |      0.798 |      0.832 |      0.813 |      0.012 |      0.015 |
|      rSqBar |     5 |      0.795 |      0.829 |      0.810 |      0.012 |      0.015 |
|         sst |     5 |   3962.818 |   5671.580 |   4700.481 |    620.767 |    770.935 |
|         sse |     5 |    748.510 |   1082.680 |    878.213 |    134.481 |    167.014 |
|        mse0 |     5 |      9.596 |     13.881 |     11.259 |      1.724 |      2.141 |
|        rmse |     5 |      3.098 |      3.726 |      3.348 |      0.252 |      0.313 |
|         mae |     5 |      2.414 |      2.735 |      2.592 |      0.129 |      0.161 |
|         dfm |     5 |      7.000 |      7.000 |      7.000 |      0.000 |      0.000 |
|          df |     5 |    385.000 |    385.000 |    385.000 |      0.000 |      0.000 |
|       fStat |     5 |    217.675 |    271.855 |    240.549 |     19.931 |     24.752 |
|         aic |     5 |   -198.177 |   -183.347 |   -189.103 |      5.968 |      7.412 |
|         bic |     5 |   -179.324 |   -164.493 |   -170.250 |      5.968 |      7.412 |
|        mape |     5 |     11.066 |     12.799 |     12.043 |      0.729 |      0.905 |
|       smape |     5 |     11.294 |     12.653 |     12.014 |      0.484 |      0.601 |
----------------------------------------------------------------------------------------
----------------------------------------
| Feature Selection Technique: Forward |
----------------------------------------
-------------------------------------------------------------------------------------
| forwardSelAll: (l = 0) INITIAL variable (0, intercept) => cols = LinkedHashSet(0) |
-------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (9420.690253723087,400)
optimize3: bSize = 20, nB = 19
ending epoch = (8366.07211714666,400)
optimize3: bSize = 20, nB = 19
ending epoch = (9034.035816627855,400)
optimize3: bSize = 20, nB = 19
ending epoch = (7310.071351941123,229)
optimize3: bSize = 20, nB = 19
ending epoch = (19564.883565850156,273)
optimize3: bSize = 20, nB = 19
ending epoch = (15781.353321347726,20)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (6038.258675550198,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(2.98404,
 	2.00749,
 	0.247452,
 	1.85554,
 	0.910960) 
 b.b = VectorD(1.55342)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.730769,
 	0.729389,
 	4731.23,
 	1273.79,
 	16.3307,
 	4.04112,
 	2.97738,
 	2.00000,
 	390.000,
 	529.286,
 	-213.935,
 	-206.865,
 	12.7432,
 	13.0062)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (6002.682332144165,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.00524,
 	2.00712,
 	0.254806,
 	1.85917,
 	0.916375) 
 b.b = VectorD(1.55242)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.706252,
 	0.704746,
 	4472.51,
 	1313.79,
 	16.8435,
 	4.10408,
 	3.26898,
 	2.00000,
 	390.000,
 	468.835,
 	-215.007,
 	-207.937,
 	14.8922,
 	14.1254)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (5545.756567611257,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.06770,
 	2.02036,
 	0.253615,
 	1.87094,
 	0.921606) 
 b.b = VectorD(1.54216)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.617798,
 	0.615838,
 	4664.26,
 	1782.69,
 	22.8550,
 	4.78069,
 	3.64183,
 	2.00000,
 	390.000,
 	315.201,
 	-227.579,
 	-220.509,
 	16.3983,
 	15.5405)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (5997.126005032601,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.10379,
 	2.02336,
 	0.257725,
 	1.87634,
 	0.926643) 
 b.b = VectorD(1.53035)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.665469,
 	0.663754,
 	3962.82,
 	1325.68,
 	16.9960,
 	4.12262,
 	3.30317,
 	2.00000,
 	390.000,
 	387.906,
 	-215.326,
 	-208.256,
 	15.3864,
 	14.7030)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (5655.873422906131,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.07486,
 	2.00615,
 	0.263170,
 	1.86318,
 	0.922760) 
 b.b = VectorD(1.52191)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.702199,
 	0.700672,
 	5671.58,
 	1689.00,
 	21.6539,
 	4.65337,
 	3.21969,
 	2.00000,
 	390.000,
 	459.799,
 	-225.067,
 	-217.997,
 	12.7207,
 	13.2340)
-----------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 1) ADD variable (4, weight) => cols = LinkedHashSet(0, 4) @ 0.691525214666237 |
-----------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (7202.621081008976,350)
optimize3: bSize = 20, nB = 19
ending epoch = (7156.7891743638465,400)
optimize3: bSize = 20, nB = 19
ending epoch = (6953.577321264506,99)
optimize3: bSize = 20, nB = 19
ending epoch = (7143.321083196635,400)
optimize3: bSize = 20, nB = 19
ending epoch = (4545.864624603189,290)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3718.345378533896,156)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(2.07790,
 	1.75500,
 	0.555502,
 	1.97367,
 	1.50089,
 	0.424703,
 	1.56941) 
 b.b = VectorD(1.58320)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.824146,
 	0.822790,
 	4731.23,
 	832.005,
 	10.6667,
 	3.26600,
 	2.45097,
 	3.00000,
 	389.000,
 	607.688,
 	-195.128,
 	-185.701,
 	11.2847,
 	11.5609)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3713.796880992962,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(2.06521,
 	1.74422,
 	0.570616,
 	1.96100,
 	1.61842,
 	0.421672,
 	1.55946) 
 b.b = VectorD(1.59400)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.810536,
 	0.809075,
 	4472.51,
 	847.381,
 	10.8639,
 	3.29604,
 	2.69575,
 	3.00000,
 	389.000,
 	554.720,
 	-195.791,
 	-186.364,
 	12.9438,
 	12.0686)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3576.158895925114,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(2.04478,
 	1.72552,
 	0.573845,
 	1.94681,
 	1.75205,
 	0.417026,
 	1.54472) 
 b.b = VectorD(1.58620)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.790727,
 	0.789114,
 	4664.26,
 	976.101,
 	12.5141,
 	3.53753,
 	2.63097,
 	3.00000,
 	389.000,
 	489.940,
 	-201.341,
 	-191.914,
 	12.5964,
 	12.6811)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3575.009320800045,140)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(2.04782,
 	1.72838,
 	0.575594,
 	1.94892,
 	1.75012,
 	0.418064,
 	1.54699) 
 b.b = VectorD(1.58520)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.799931,
 	0.798388,
 	3962.82,
 	792.837,
 	10.1646,
 	3.18819,
 	2.58961,
 	3.00000,
 	389.000,
 	518.443,
 	-193.439,
 	-184.012,
 	12.6207,
 	12.2069)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3405.5048531163125,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(2.02659,
 	1.71104,
 	0.615728,
 	1.92615,
 	1.80967,
 	0.414477,
 	1.53046) 
 b.b = VectorD(1.57857)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.793602,
 	0.792010,
 	5671.58,
 	1170.60,
 	15.0077,
 	3.87398,
 	2.78388,
 	3.00000,
 	389.000,
 	498.569,
 	-209.727,
 	-200.300,
 	11.4307,
 	12.1439)
------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 2) ADD variable (6, modelyear) => cols = LinkedHashSet(0, 4, 6) @ 0.8076777378343707 |
------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (4542.393256540909,134)
optimize3: bSize = 20, nB = 19
ending epoch = (4522.413902216151,400)
optimize3: bSize = 20, nB = 19
ending epoch = (4505.132437321775,400)
optimize3: bSize = 20, nB = 19
ending epoch = (4290.78483015999,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3450.1500623303905,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.35798,
 	1.25929,
 	3.01920,
 	1.52290,
 	0.744793,
 	0.179183,
 	0.842494,
 	1.88854,
 	2.04480) 
 b.b = VectorD(1.38420)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.836485,
 	0.834799,
 	4731.23,
 	773.628,
 	9.91831,
 	3.14933,
 	2.30447,
 	4.00000,
 	388.000,
 	496.218,
 	-190.341,
 	-178.558,
 	10.4734,
 	10.6815)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3368.022058038655,187)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.35494,
 	1.25398,
 	3.36240,
 	1.51867,
 	0.752964,
 	0.177866,
 	0.844000,
 	1.88733,
 	2.03400) 
 b.b = VectorD(1.38325)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.799904,
 	0.797842,
 	4472.51,
 	894.930,
 	11.4735,
 	3.38725,
 	2.79424,
 	4.00000,
 	388.000,
 	387.768,
 	-195.883,
 	-184.099,
 	13.1533,
 	12.2791)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3294.7781470599934,348)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.33820,
 	1.24165,
 	3.86385,
 	1.50662,
 	0.741303,
 	0.183915,
 	0.832014,
 	1.86179,
 	2.01632) 
 b.b = VectorD(1.37855)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.814632,
 	0.812721,
 	4664.26,
 	864.606,
 	11.0847,
 	3.32937,
 	2.46159,
 	4.00000,
 	388.000,
 	426.282,
 	-194.497,
 	-182.714,
 	11.5941,
 	11.4991)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3294.7781470599934,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.33820,
 	1.24165,
 	3.86385,
 	1.50662,
 	0.741303,
 	0.183915,
 	0.832014,
 	1.86179,
 	2.01632) 
 b.b = VectorD(1.37985)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.816830,
 	0.814942,
 	3962.82,
 	725.870,
 	9.30602,
 	3.05058,
 	2.48626,
 	4.00000,
 	388.000,
 	432.563,
 	-188.160,
 	-176.376,
 	11.9952,
 	11.6112)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3140.0411938479574,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.32716,
 	1.23061,
 	4.44601,
 	1.49064,
 	0.735328,
 	0.160858,
 	0.825578,
 	1.84291,
 	1.99832) 
 b.b = VectorD(1.37128)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.816474,
 	0.814582,
 	5671.58,
 	1040.88,
 	13.3446,
 	3.65303,
 	2.64381,
 	4.00000,
 	388.000,
 	431.536,
 	-202.550,
 	-190.766,
 	10.8815,
 	11.3408)
------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 3) ADD variable (5, acceleration) => cols = LinkedHashSet(0, 4, 6, 5) @ 0.8180015569974584 |
------------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (4553.259572692493,400)
optimize3: bSize = 20, nB = 19
ending epoch = (4543.313973442513,323)
optimize3: bSize = 20, nB = 19
ending epoch = (4545.37751931707,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3720.855346879013,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.69006,
 	1.13103,
 	0.130456,
 	1.06653,
 	0.667892,
 	0.263135,
 	1.00473,
 	1.94374,
 	1.63094,
 	1.61680,
 	0.837575) 
 b.b = VectorD(1.42034)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.824903,
 	0.822641,
 	4731.23,
 	828.426,
 	10.6208,
 	3.25896,
 	2.45490,
 	5.00000,
 	387.000,
 	364.640,
 	-190.972,
 	-176.831,
 	11.3842,
 	11.6772)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3665.6301795938953,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.72412,
 	1.12767,
 	0.132196,
 	1.05935,
 	0.684541,
 	0.320449,
 	1.00282,
 	1.92220,
 	1.61963,
 	1.60547,
 	0.833051) 
 b.b = VectorD(1.43095)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.795593,
 	0.792952,
 	4472.51,
 	914.212,
 	11.7207,
 	3.42355,
 	2.83151,
 	5.00000,
 	387.000,
 	301.257,
 	-194.672,
 	-180.532,
 	13.5181,
 	12.6715)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3565.4610536658874,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.80212,
 	1.12070,
 	0.122819,
 	1.04610,
 	0.673088,
 	0.366034,
 	0.991735,
 	1.91146,
 	1.61206,
 	1.59189,
 	0.822892) 
 b.b = VectorD(1.43100)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.788030,
 	0.785292,
 	4664.26,
 	988.682,
 	12.6754,
 	3.56025,
 	2.69752,
 	5.00000,
 	387.000,
 	287.747,
 	-197.885,
 	-183.745,
 	12.9906,
 	13.0260)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3750.152020803471,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.82466,
 	1.09536,
 	0.131400,
 	1.03689,
 	0.677474,
 	0.428613,
 	0.980014,
 	1.88831,
 	1.57833,
 	1.56840,
 	0.810871) 
 b.b = VectorD(1.44392)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.796008,
 	0.793373,
 	3962.82,
 	808.382,
 	10.3639,
 	3.21930,
 	2.59717,
 	5.00000,
 	387.000,
 	302.027,
 	-190.107,
 	-175.967,
 	12.6170,
 	12.1242)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3410.796700943651,76)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.82048,
 	1.09128,
 	0.126886,
 	1.03102,
 	0.672737,
 	0.434049,
 	0.972284,
 	1.88163,
 	1.57415,
 	1.56272,
 	0.808562) 
 b.b = VectorD(1.43659)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.795850,
 	0.793212,
 	5671.58,
 	1157.85,
 	14.8443,
 	3.85283,
 	2.77904,
 	5.00000,
 	387.000,
 	301.733,
 	-205.183,
 	-191.043,
 	11.5122,
 	12.2390)
---------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 4) ADD variable (2, displacement) => cols = LinkedHashSet(0, 4, 6, 5, 2) @ 0.8067922926172033 |
---------------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (4541.07794425307,400)
optimize3: bSize = 20, nB = 19
ending epoch = (4555.281820705968,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3716.1032464177993,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.41504,
 	0.982216,
 	0.146481,
 	1.16283,
 	0.655852,
 	0.479975,
 	1.02994,
 	1.84639,
 	1.70641,
 	1.60793,
 	0.780793,
 	0.496024,
 	0.374798) 
 b.b = VectorD(1.53391)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.824434,
 	0.821705,
 	4731.23,
 	830.645,
 	10.6493,
 	3.26333,
 	2.47248,
 	6.00000,
 	386.000,
 	302.100,
 	-189.066,
 	-172.569,
 	11.4464,
 	11.7315)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3657.342874253634,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.41864,
 	0.980424,
 	0.0682905,
 	1.16406,
 	0.660425,
 	0.509635,
 	1.03330,
 	1.83457,
 	1.70357,
 	1.60297,
 	0.777935,
 	0.534454,
 	0.378388) 
 b.b = VectorD(1.54500)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.792671,
 	0.789449,
 	4472.51,
 	927.281,
 	11.8882,
 	3.44793,
 	2.85369,
 	6.00000,
 	386.000,
 	245.963,
 	-193.237,
 	-176.740,
 	13.6117,
 	12.7052)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3570.265656076141,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.41071,
 	0.976690,
 	0.0189594,
 	1.15323,
 	0.655480,
 	0.519862,
 	1.02907,
 	1.83717,
 	1.70331,
 	1.60784,
 	0.781271,
 	0.568288,
 	0.373306) 
 b.b = VectorD(1.54030)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.788571,
 	0.785285,
 	4664.26,
 	986.158,
 	12.6431,
 	3.55571,
 	2.67262,
 	6.00000,
 	386.000,
 	239.946,
 	-195.778,
 	-179.281,
 	12.8597,
 	12.8632)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3751.34554158697,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.38371,
 	0.966490,
 	-0.0225639,
 	1.14516,
 	0.634041,
 	0.538860,
 	1.00354,
 	1.82665,
 	1.67395,
 	1.58413,
 	0.771848,
 	0.630673,
 	0.380175) 
 b.b = VectorD(1.55957)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.795639,
 	0.792462,
 	3962.82,
 	809.846,
 	10.3826,
 	3.22221,
 	2.58282,
 	6.00000,
 	386.000,
 	250.469,
 	-188.168,
 	-171.671,
 	12.5300,
 	11.9972)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3392.323489112511,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.38757,
 	0.963532,
 	-0.112482,
 	1.13987,
 	0.643043,
 	0.577021,
 	1.00739,
 	1.80878,
 	1.66959,
 	1.57348,
 	0.762244,
 	0.713243,
 	0.367454) 
 b.b = VectorD(1.54806)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.793959,
 	0.790756,
 	5671.58,
 	1168.58,
 	14.9818,
 	3.87063,
 	2.81379,
 	6.00000,
 	386.000,
 	247.902,
 	-203.652,
 	-187.155,
 	11.6784,
 	12.4017)
---------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 5) ADD variable (1, cylinders) => cols = LinkedHashSet(0, 4, 6, 5, 2, 1) @ 0.8063870896149883 |
---------------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (4338.512752857307,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3554.7518273645396,216)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.995947,
 	0.909058,
 	0.314503,
 	0.908596,
 	0.557168,
 	0.169058,
 	0.720485,
 	1.98395,
 	1.36382,
 	2.46823,
 	0.610975,
 	0.0930972,
 	0.380976,
 	1.07395,
 	1.04490) 
 b.b = VectorD(1.47173)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.836630,
 	0.833660,
 	4731.23,
 	772.941,
 	9.90950,
 	3.14794,
 	2.35484,
 	7.00000,
 	385.000,
 	281.659,
 	-184.353,
 	-165.499,
 	10.5450,
 	10.6459)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3502.2167687127358,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.977833,
 	0.886738,
 	0.327775,
 	0.889601,
 	0.541181,
 	0.103500,
 	0.703973,
 	2.04734,
 	1.32808,
 	2.85829,
 	0.599333,
 	-0.00164596,
 	0.373558,
 	1.07009,
 	1.02147) 
 b.b = VectorD(1.45681)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.799769,
 	0.796129,
 	4472.51,
 	895.536,
 	11.4812,
 	3.38840,
 	2.79369,
 	7.00000,
 	385.000,
 	219.683,
 	-189.892,
 	-171.038,
 	13.2797,
 	12.4375)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3402.331187516677,201)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.964843,
 	0.873038,
 	0.337489,
 	0.883007,
 	0.535132,
 	0.0910704,
 	0.697313,
 	2.07210,
 	1.32229,
 	2.98796,
 	0.589841,
 	-0.0209409,
 	0.368811,
 	1.06662,
 	1.00946) 
 b.b = VectorD(1.44741)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.796862,
 	0.793169,
 	4664.26,
 	947.487,
 	12.1473,
 	3.48529,
 	2.62172,
 	7.00000,
 	385.000,
 	215.752,
 	-192.239,
 	-173.385,
 	12.5214,
 	12.5078)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3402.331187516677,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.964843,
 	0.873038,
 	0.337489,
 	0.883007,
 	0.535132,
 	0.0910704,
 	0.697313,
 	2.07210,
 	1.32229,
 	2.98796,
 	0.589841,
 	-0.0209409,
 	0.368811,
 	1.06662,
 	1.00946) 
 b.b = VectorD(1.44941)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.814232,
 	0.810855,
 	3962.82,
 	736.163,
 	9.43799,
 	3.07213,
 	2.51214,
 	7.00000,
 	385.000,
 	241.069,
 	-182.691,
 	-163.838,
 	12.2765,
 	11.9231)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3258.5255082161034,74)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.959463,
 	0.872688,
 	0.338420,
 	0.875935,
 	0.533123,
 	0.0873561,
 	0.691989,
 	2.06376,
 	1.31101,
 	2.99197,
 	0.585429,
 	-0.0249840,
 	0.366460,
 	1.05958,
 	1.00517) 
 b.b = VectorD(1.44488)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.805471,
 	0.801935,
 	5671.58,
 	1103.28,
 	14.1447,
 	3.76094,
 	2.75078,
 	7.00000,
 	385.000,
 	227.735,
 	-199.278,
 	-180.424,
 	11.4454,
 	11.9982)
-------------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 6) ADD variable (3, horsepower) => cols = LinkedHashSet(0, 4, 6, 5, 2, 1, 3) @ 0.8145431792243233 |
-------------------------------------------------------------------------------------------------------------------------
k = 7, n = 7
Run + title
x-axis: minX = 0.0, maxX = 6.0
y-axis: minY = 68.0, maxY = 82.0
rSq = 
MatrixD(69.3099,	69.1525,	68.4497,
 	80.9150,	80.7678,	80.3789,
 	81.9859,	81.8002,	81.6865,
 	80.9257,	80.6792,	80.0077,
 	80.9351,	80.6387,	79.9055,
 	81.7855,	81.4543,	81.0593)
