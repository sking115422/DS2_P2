readFileIntoArray: /Users/sdk/Desktop/UGA_proj/DS2/DS2_P2/scala/scalation/data/auto_mpg_fixed_cleaned.csv
load: read 99 data rows so far ...
load: read 199 data rows so far ...
load: read 299 data rows so far ...
load: read in an 392-by-8 matrix from auto_mpg_fixed_cleaned.csv
ox_fname = Array(intercept, cylinders, displacement, horsepower, weight, acceleration, modelyear)
--------------------------------------
| NeuralNet_3L for AutoMPG with reLU |
--------------------------------------
 scaled: x = 
MatrixD(1.00000,	1.48205,	1.07591,	0.663285,	0.619748,	-1.28362,	-1.62324,
 	1.00000,	1.48205,	1.48683,	1.57258,	0.842258,	-1.46485,	-1.62324,
 	1.00000,	1.48205,	1.18103,	1.18288,	0.539692,	-1.64609,	-1.62324,
 	1.00000,	1.48205,	1.04725,	1.18288,	0.536160,	-1.28362,	-1.62324,
 	1.00000,	1.48205,	1.02813,	0.923085,	0.554997,	-1.82732,	-1.62324,
 	1.00000,	1.48205,	2.24177,	2.42992,	1.60515,	-2.00855,	-1.62324,
 	1.00000,	1.48205,	2.48068,	3.00148,	1.62045,	-2.37102,	-1.62324,
 	1.00000,	1.48205,	2.34689,	2.87158,	1.57101,	-2.55226,	-1.62324,
 	1.00000,	1.48205,	2.49023,	3.13138,	1.70404,	-2.00855,	-1.62324,
 	1.00000,	1.48205,	1.86908,	2.22208,	1.02709,	-2.55226,	-1.62324,
 	1.00000,	1.48205,	1.80219,	1.70248,	0.689209,	-2.00855,	-1.62324,
 	1.00000,	1.48205,	1.39127,	1.44268,	0.743365,	-2.73349,	-1.62324,
 	1.00000,	1.48205,	1.96464,	1.18288,	0.922314,	-2.18979,	-1.62324,
 	1.00000,	1.48205,	2.49023,	3.13138,	0.127638,	-2.00855,	-1.62324,
 	1.00000,	-0.862911,	-0.777990,	-0.246015,	-0.712953,	-0.196214,	-1.62324,
 	1.00000,	0.309571,	0.0342878,	-0.246015,	-0.170219,	-0.0149795,	-1.62324,
 	1.00000,	0.309571,	0.0438440,	-0.194055,	-0.239679,	-0.0149795,	-1.62324,
 	1.00000,	0.309571,	0.0534002,	-0.505815,	-0.459834,	0.166254,	-1.62324,
 	1.00000,	-0.862911,	-0.930889,	-0.427875,	-0.997859,	-0.377448,	-1.62324,
 	1.00000,	-0.862911,	-0.930889,	-1.51903,	-1.34516,	1.79736,	-1.62324,
 	1.00000,	-0.862911,	-0.806659,	-0.453855,	-0.359764,	0.709956,	-1.62324,
 	1.00000,	-0.862911,	-0.835327,	-0.375915,	-0.644670,	-0.377448,	-1.62324,
 	1.00000,	-0.862911,	-0.863996,	-0.246015,	-0.709421,	0.709956,	-1.62324,
 	1.00000,	-0.862911,	-0.701540,	0.221625,	-0.875420,	-1.10238,	-1.62324,
 	1.00000,	0.309571,	0.0438440,	-0.375915,	-0.388019,	-0.196214,	-1.62324,
 	1.00000,	1.48205,	1.58239,	2.87158,	1.92773,	-0.558682,	-1.62324,
 	1.00000,	1.48205,	1.07591,	2.48188,	1.64635,	-0.196214,	-1.62324,
 	1.00000,	1.48205,	1.18103,	2.74168,	1.65342,	-0.739916,	-1.62324,
 	1.00000,	1.48205,	1.04725,	2.30002,	2.06547,	1.07242,	-1.62324,
 	1.00000,	-0.862911,	-0.930889,	-0.427875,	-0.997859,	-0.377448,	-1.35178,
 	1.00000,	-0.862911,	-0.519972,	-0.375915,	-0.840101,	-0.0149795,	-1.35178,
 	1.00000,	-0.862911,	-0.777990,	-0.246015,	-0.882484,	-0.558682,	-1.35178,
 	1.00000,	0.309571,	0.359199,	-0.116115,	-0.404501,	-0.921150,	-1.35178,
 	1.00000,	0.309571,	0.292305,	0.0137853,	0.543224,	-0.0149795,	-1.35178,
 	1.00000,	0.309571,	0.531211,	-0.116115,	0.413721,	-0.0149795,	-1.35178,
 	1.00000,	0.309571,	0.531211,	-0.427875,	0.381934,	-0.0149795,	-1.35178,
 	1.00000,	0.309571,	0.359199,	-0.116115,	0.365452,	-0.0149795,	-1.35178,
 	1.00000,	1.48205,	1.48683,	1.57258,	1.44974,	-1.28362,	-1.35178,
 	1.00000,	1.48205,	1.96464,	1.83238,	1.74995,	-1.46485,	-1.35178,
 	1.00000,	1.48205,	1.49639,	1.26082,	1.38499,	-0.739916,	-1.35178,
 	1.00000,	1.48205,	1.18103,	1.18288,	1.31671,	-0.921150,	-1.35178,
 	1.00000,	1.48205,	1.80219,	1.96228,	2.32801,	-1.46485,	-1.35178,
 	1.00000,	1.48205,	1.96464,	1.70248,	2.08195,	-1.28362,	-1.35178,
 	1.00000,	1.48205,	1.96464,	1.83238,	2.54581,	-1.28362,	-1.35178,
 	1.00000,	0.309571,	0.607660,	0.143685,	-0.0183472,	-0.739916,	-1.35178,
 	1.00000,	-0.862911,	-0.519972,	-0.843554,	-0.670570,	1.25366,	-1.35178,
 	1.00000,	0.309571,	0.531211,	-0.116115,	0.358388,	-0.196214,	-1.35178,
 	1.00000,	0.309571,	0.531211,	-0.427875,	0.190035,	-0.377448,	-1.35178,
 	1.00000,	-0.862911,	-0.691984,	-0.479835,	-0.891902,	-0.558682,	-1.35178,
 	1.00000,	-0.862911,	-0.749321,	-0.375915,	-1.00610,	-0.558682,	-1.35178,
 	1.00000,	-0.862911,	-1.10290,	-0.895514,	-1.06379,	1.43489,	-1.35178,
 	1.00000,	-0.862911,	-1.01690,	-0.739634,	-1.07438,	-0.377448,	-1.35178,
 	1.00000,	-0.862911,	-1.17935,	-1.02541,	-1.41815,	1.25366,	-1.35178,
 	1.00000,	-0.862911,	-1.16979,	-0.921494,	-1.60652,	0.891190,	-1.35178,
 	1.00000,	-0.862911,	-0.930889,	-1.15531,	-1.34634,	1.25366,	-1.35178,
 	1.00000,	-0.862911,	-0.988227,	-0.895514,	-1.20389,	1.79736,	-1.35178,
 	1.00000,	-0.862911,	-0.777990,	-0.246015,	-0.823619,	-0.0149795,	-1.08031,
 	1.00000,	-0.862911,	-0.926111,	-0.635714,	-1.00257,	0.528722,	-1.08031,
 	1.00000,	-0.862911,	-0.930889,	-1.31119,	-0.851874,	2.88476,	-1.08031,
 	1.00000,	-0.862911,	-0.519972,	-0.375915,	-0.670570,	1.43489,	-1.08031,
 	1.00000,	-0.862911,	-0.691984,	-0.479835,	-0.884839,	0.347488,	-1.08031,
 	1.00000,	1.48205,	1.48683,	1.57258,	1.52627,	-1.28362,	-1.08031,
 	1.00000,	1.48205,	1.96464,	1.83238,	1.65695,	-1.28362,	-1.08031,
 	1.00000,	1.48205,	1.18103,	1.18288,	1.36262,	-0.739916,	-1.08031,
 	1.00000,	1.48205,	1.49639,	1.26082,	1.35556,	-0.921150,	-1.08031,
 	1.00000,	1.48205,	1.04725,	1.18288,	0.817534,	-1.46485,	-1.08031,
 	1.00000,	1.48205,	2.24177,	2.68972,	1.94892,	-1.64609,	-1.08031,
 	1.00000,	1.48205,	1.48683,	1.31278,	1.79469,	-0.739916,	-1.08031,
 	1.00000,	1.48205,	1.48683,	1.44268,	1.74054,	-0.739916,	-1.08031,
 	1.00000,	1.48205,	1.96464,	2.22208,	1.70051,	-1.10238,	-1.08031,
 	1.00000,	-1.44915,	-1.18891,	-0.194055,	-0.762400,	-0.739916,	-1.08031,
 	1.00000,	1.48205,	1.04725,	1.18288,	1.07654,	-1.10238,	-1.08031,
 	1.00000,	1.48205,	1.07591,	0.663285,	1.31906,	-0.558682,	-1.08031,
 	1.00000,	1.48205,	1.02813,	0.923085,	1.54981,	0.166254,	-1.08031,
 	1.00000,	1.48205,	1.18103,	1.18288,	1.29434,	-0.558682,	-1.08031,
 	1.00000,	-0.862911,	-0.701540,	0.195645,	-0.0524889,	-0.377448,	-1.08031,
 	1.00000,	-0.862911,	-0.701540,	-0.739634,	-0.549309,	0.891190,	-1.08031,
 	1.00000,	-0.862911,	-0.711097,	-0.453855,	0.00166684,	1.43489,	-1.08031,
 	1.00000,	-0.862911,	-0.940446,	-0.921494,	-0.928399,	0.891190,	-1.08031,
 	1.00000,	-0.862911,	-0.691984,	-0.479835,	-0.685875,	0.166254,	-1.08031,
 	1.00000,	-0.862911,	-0.930889,	-0.323955,	-0.811846,	0.528722,	-1.08031,
 	1.00000,	-0.862911,	-0.711097,	-0.194055,	-0.555195,	-0.377448,	-1.08031,
 	1.00000,	-0.862911,	-0.921333,	-0.635714,	-0.957831,	-0.196214,	-1.08031,
 	1.00000,	-0.862911,	-0.930889,	-0.427875,	-1.03318,	0.347488,	-1.08031,
 	1.00000,	1.48205,	1.48683,	1.83238,	1.32142,	-0.921150,	-0.808850,
 	1.00000,	1.48205,	1.04725,	1.18288,	0.817534,	-1.46485,	-0.808850,
 	1.00000,	1.48205,	1.48683,	1.05298,	1.18956,	-0.921150,	-0.808850,
 	1.00000,	1.48205,	1.02813,	0.845145,	1.25313,	-0.377448,	-0.808850,
 	1.00000,	1.48205,	1.18103,	1.18288,	0.941151,	-1.10238,	-0.808850,
 	1.00000,	1.48205,	2.24177,	2.42992,	2.32448,	-1.46485,	-0.808850,
 	1.00000,	1.48205,	1.96464,	1.18288,	1.74995,	-1.28362,	-0.808850,
 	1.00000,	1.48205,	1.49639,	1.39072,	1.63105,	-0.921150,	-0.808850,
 	1.00000,	1.48205,	1.18103,	1.18288,	1.48271,	-0.377448,	-0.808850,
 	1.00000,	1.48205,	2.34689,	2.87158,	2.06900,	-1.64609,	-0.808850,
 	1.00000,	1.48205,	2.49023,	3.13138,	2.32330,	-1.64609,	-0.808850,
 	1.00000,	1.48205,	1.58239,	1.83238,	0.992952,	-1.64609,	-0.808850,
 	1.00000,	0.309571,	0.292305,	0.0137853,	0.168843,	0.347488,	-0.808850,
 	1.00000,	0.309571,	0.531211,	-0.116115,	0.353679,	0.891190,	-0.808850,
 	1.00000,	0.309571,	0.359199,	-0.116115,	-0.0383613,	0.166254,	-0.808850,
 	1.00000,	0.309571,	0.531211,	-0.427875,	0.0511134,	0.347488,	-0.808850,
 	1.00000,	0.309571,	0.0342878,	-0.246015,	-0.0866305,	0.166254,	-0.808850,
 	1.00000,	-0.862911,	-0.930889,	-1.51903,	-1.20977,	1.97859,	-0.808850,
 	1.00000,	1.48205,	1.96464,	1.18288,	2.37745,	-0.558682,	-0.808850,
 	1.00000,	1.48205,	1.96464,	1.62454,	2.27032,	-1.10238,	-0.808850,
 	1.00000,	1.48205,	1.58239,	1.70248,	1.97364,	-0.921150,	-0.808850,
 	1.00000,	1.48205,	1.48683,	1.96228,	1.79116,	-1.10238,	-0.808850,
 	1.00000,	0.309571,	0.359199,	-0.116115,	-0.222020,	-0.196214,	-0.808850,
 	1.00000,	-0.862911,	-0.930889,	-0.427875,	-0.822442,	1.25366,	-0.808850,
 	1.00000,	-0.862911,	-0.519972,	-0.843554,	-0.678811,	1.43489,	-0.808850,
 	1.00000,	-0.862911,	-0.825771,	-0.271995,	-0.704712,	0.347488,	-0.808850,
 	1.00000,	-1.44915,	-1.18891,	-0.375915,	-1.00492,	-0.739916,	-0.808850,
 	1.00000,	-0.862911,	-0.691984,	-0.505815,	-0.785946,	1.07242,	-0.808850,
 	1.00000,	0.309571,	-0.376629,	0.0657453,	-0.595223,	-0.558682,	-0.808850,
 	1.00000,	-0.862911,	-0.921333,	-0.375915,	-0.838924,	-0.0149795,	-0.808850,
 	1.00000,	1.48205,	1.48683,	1.05298,	1.30023,	-0.921150,	-0.808850,
 	1.00000,	1.48205,	1.96464,	3.26128,	1.53098,	-2.18979,	-0.808850,
 	1.00000,	-0.862911,	-1.20802,	-1.44109,	-1.30749,	1.43489,	-0.808850,
 	1.00000,	-0.862911,	-0.749321,	-0.765614,	-0.964895,	-0.0149795,	-0.808850,
 	1.00000,	-0.862911,	-0.768434,	-0.349935,	-0.465720,	-0.558682,	-0.808850,
 	1.00000,	-0.862911,	-0.701540,	0.195645,	-0.129013,	-0.0149795,	-0.808850,
 	1.00000,	1.48205,	1.18103,	1.18288,	0.496132,	-1.64609,	-0.808850,
 	1.00000,	-0.862911,	-0.701540,	0.143685,	-0.373891,	-0.558682,	-0.808850,
 	1.00000,	0.309571,	-0.367073,	0.455445,	-0.200828,	-0.739916,	-0.808850,
 	1.00000,	1.48205,	1.48683,	1.96228,	0.808116,	-1.64609,	-0.808850,
 	1.00000,	0.309571,	0.0342878,	-0.246015,	0.146475,	0.347488,	-0.537387,
 	1.00000,	0.309571,	0.359199,	-0.116115,	-0.0901624,	0.166254,	-0.537387,
 	1.00000,	0.309571,	0.531211,	-0.116115,	0.421962,	0.528722,	-0.537387,
 	1.00000,	-0.862911,	-1.10290,	-0.973454,	-1.20977,	1.25366,	-0.537387,
 	1.00000,	-0.862911,	-0.691984,	-0.635714,	-0.619947,	0.347488,	-0.537387,
 	1.00000,	-0.862911,	-1.17935,	-1.02541,	-1.34398,	1.97859,	-0.537387,
 	1.00000,	-0.862911,	-0.519972,	-0.765614,	-0.512812,	0.528722,	-0.537387,
 	1.00000,	0.309571,	0.531211,	-0.116115,	0.945860,	0.528722,	-0.537387,
 	1.00000,	0.309571,	0.607660,	0.143685,	0.770442,	0.891190,	-0.537387,
 	1.00000,	0.309571,	0.292305,	0.0137853,	0.748074,	0.347488,	-0.537387,
 	1.00000,	1.48205,	1.02813,	0.923085,	1.36969,	-0.558682,	-0.537387,
 	1.00000,	1.48205,	1.48683,	1.18288,	2.02662,	-0.377448,	-0.537387,
 	1.00000,	1.48205,	1.18103,	1.18288,	1.74171,	-0.739916,	-0.537387,
 	1.00000,	1.48205,	1.02813,	0.923085,	1.95480,	0.166254,	-0.537387,
 	1.00000,	1.48205,	1.04725,	1.18288,	1.50625,	-0.0149795,	-0.537387,
 	1.00000,	-0.862911,	-0.921333,	-0.557775,	-0.893080,	0.347488,	-0.537387,
 	1.00000,	-0.862911,	-1.10290,	-0.973454,	-1.19447,	-0.0149795,	-0.537387,
 	1.00000,	-0.862911,	-0.930889,	-0.687674,	-0.797719,	-0.377448,	-0.537387,
 	1.00000,	-0.862911,	-1.13157,	-1.36315,	-1.56414,	0.347488,	-0.537387,
 	1.00000,	-0.862911,	-1.06468,	-1.12933,	-1.14738,	1.25366,	-0.537387,
 	1.00000,	-0.862911,	-0.997783,	-0.765614,	-1.00375,	-0.377448,	-0.537387,
 	1.00000,	-0.862911,	-0.997783,	-0.765614,	-1.02376,	-0.0149795,	-0.537387,
 	1.00000,	-0.862911,	-0.749321,	-0.765614,	-0.861293,	-0.558682,	-0.537387,
 	1.00000,	-0.862911,	-0.711097,	-0.194055,	-0.575209,	-0.196214,	-0.537387,
 	1.00000,	-0.862911,	-0.825771,	-0.297975,	-0.690584,	-0.0149795,	-0.537387,
 	1.00000,	-0.862911,	-1.10290,	-0.973454,	-1.15091,	0.166254,	-0.537387,
 	1.00000,	0.309571,	0.292305,	-0.246015,	0.337197,	0.166254,	-0.265923,
 	1.00000,	0.309571,	0.531211,	0.0137853,	0.566770,	0.166254,	-0.265923,
 	1.00000,	0.309571,	0.531211,	-0.843554,	0.534983,	1.97859,	-0.265923,
 	1.00000,	0.309571,	0.531211,	-0.843554,	0.212403,	1.43489,	-0.265923,
 	1.00000,	1.48205,	1.96464,	1.70248,	1.99012,	-1.46485,	-0.265923,
 	1.00000,	1.48205,	1.48683,	1.05298,	1.72170,	-0.558682,	-0.265923,
 	1.00000,	1.48205,	1.18103,	1.18288,	1.78998,	-0.377448,	-0.265923,
 	1.00000,	1.48205,	1.49639,	1.13092,	1.97717,	-0.739916,	-0.265923,
 	1.00000,	0.309571,	0.349643,	0.143685,	1.09420,	1.97859,	-0.265923,
 	1.00000,	0.309571,	0.531211,	0.0137853,	1.08243,	1.07242,	-0.265923,
 	1.00000,	0.309571,	0.607660,	0.143685,	0.885818,	1.25366,	-0.265923,
 	1.00000,	0.309571,	0.292305,	-0.246015,	0.950569,	1.25366,	-0.265923,
 	1.00000,	0.309571,	0.349643,	0.143685,	0.0723047,	-0.196214,	-0.265923,
 	1.00000,	1.48205,	0.645885,	0.143685,	0.286573,	-0.739916,	-0.265923,
 	1.00000,	1.48205,	1.02813,	0.637305,	0.225353,	-1.28362,	-0.265923,
 	1.00000,	-0.862911,	-0.930889,	-0.765614,	-0.949590,	0.166254,	-0.265923,
 	1.00000,	-0.862911,	-0.519972,	-0.557775,	-0.398615,	0.528722,	-0.265923,
 	1.00000,	0.309571,	0.359199,	-0.116115,	-0.0748575,	0.166254,	-0.265923,
 	1.00000,	-0.862911,	-0.519972,	-0.687674,	-0.453948,	1.07242,	-0.265923,
 	1.00000,	-0.862911,	-0.577310,	-0.220035,	-0.324445,	-0.739916,	-0.265923,
 	1.00000,	-0.862911,	-0.997783,	-0.869534,	-0.888371,	0.347488,	-0.265923,
 	1.00000,	-0.862911,	-0.720653,	-0.194055,	-0.509281,	0.528722,	-0.265923,
 	1.00000,	0.309571,	-0.223730,	-0.194055,	0.00755333,	-0.377448,	-0.265923,
 	1.00000,	-0.862911,	-0.997783,	-0.895514,	-1.22508,	-0.558682,	-0.265923,
 	1.00000,	0.309571,	0.359199,	-0.375915,	0.274800,	0.528722,	-0.265923,
 	1.00000,	-0.862911,	-0.758878,	-0.246015,	-0.333863,	-0.196214,	-0.265923,
 	1.00000,	-0.862911,	-0.711097,	-0.427875,	-0.0242337,	0.528722,	-0.265923,
 	1.00000,	-0.862911,	-0.701540,	-0.168075,	-0.0383613,	-0.377448,	-0.265923,
 	1.00000,	-0.862911,	-0.701540,	0.273585,	-0.360941,	-0.739916,	-0.265923,
 	1.00000,	-0.862911,	-0.988227,	-1.33717,	-1.39225,	0.709956,	-0.265923,
 	1.00000,	-0.862911,	-0.835327,	-0.479835,	-0.604642,	-0.0149795,	0.00554007,
 	1.00000,	-0.862911,	-0.749321,	-0.609734,	-0.891902,	0.492476,	0.00554007,
 	1.00000,	-0.862911,	-0.519972,	-0.323955,	-0.477493,	-0.232460,	0.00554007,
 	1.00000,	-0.862911,	-0.921333,	-0.661694,	-0.850697,	0.782450,	0.00554007,
 	1.00000,	-0.862911,	-0.892665,	-0.557775,	-0.913094,	-0.0874731,	0.00554007,
 	1.00000,	1.48205,	1.05680,	0.923085,	1.45681,	-0.921150,	0.00554007,
 	1.00000,	1.48205,	1.18103,	1.18288,	1.42737,	-0.921150,	0.00554007,
 	1.00000,	1.48205,	1.04725,	0.403485,	1.15895,	-0.594928,	0.00554007,
 	1.00000,	1.48205,	1.49639,	1.23484,	1.45681,	-0.993643,	0.00554007,
 	1.00000,	0.309571,	0.292305,	-0.116115,	0.300701,	-0.0512263,	0.00554007,
 	1.00000,	0.309571,	0.531211,	0.0137853,	0.441976,	-0.377448,	0.00554007,
 	1.00000,	0.309571,	0.0534002,	-0.609734,	0.0405177,	0.746203,	0.00554007,
 	1.00000,	0.309571,	0.359199,	-0.375915,	0.126460,	0.746203,	0.00554007,
 	1.00000,	-0.862911,	-1.04556,	-1.36315,	-1.10970,	2.41356,	0.00554007,
 	1.00000,	-0.862911,	-0.921333,	-1.15531,	-0.957831,	2.37731,	0.00554007,
 	1.00000,	-0.862911,	-0.997783,	-0.895514,	-1.22508,	-0.486188,	0.00554007,
 	1.00000,	-0.862911,	-0.988227,	-1.33717,	-1.39225,	0.673710,	0.00554007,
 	1.00000,	0.309571,	0.292305,	-0.116115,	0.792811,	0.782450,	0.00554007,
 	1.00000,	0.309571,	0.531211,	-0.687674,	0.702159,	1.97859,	0.00554007,
 	1.00000,	0.309571,	0.531211,	0.143685,	0.785747,	0.238748,	0.00554007,
 	1.00000,	0.309571,	0.607660,	-0.246015,	0.253609,	0.818697,	0.00554007,
 	1.00000,	-0.862911,	-0.930889,	-0.869534,	-1.35694,	-1.21112,	0.00554007,
 	1.00000,	-0.862911,	-1.04556,	-0.895514,	-1.16268,	0.528722,	0.00554007,
 	1.00000,	-0.862911,	-0.930889,	-0.765614,	-0.968427,	0.311242,	0.00554007,
 	1.00000,	-0.862911,	-0.519972,	-0.843554,	-0.485735,	-0.703669,	0.00554007,
 	1.00000,	-0.862911,	-0.615534,	-0.0641547,	0.202985,	0.0575141,	0.00554007,
 	1.00000,	1.48205,	1.18103,	1.18288,	1.13305,	-0.848656,	0.00554007,
 	1.00000,	-0.862911,	-0.711097,	-0.427875,	0.344261,	2.30482,	0.00554007,
 	1.00000,	0.309571,	-0.367073,	0.0917253,	-0.0560208,	-0.0149795,	0.00554007,
 	1.00000,	0.309571,	-0.252399,	0.403485,	0.991775,	0.419982,	0.00554007,
 	1.00000,	1.48205,	1.48683,	1.96228,	1.65106,	-1.24737,	0.00554007,
 	1.00000,	1.48205,	1.48683,	1.05298,	1.26844,	-1.28362,	0.00554007,
 	1.00000,	1.48205,	1.02813,	0.663285,	1.05064,	-0.196214,	0.00554007,
 	1.00000,	1.48205,	1.18103,	1.18288,	0.915250,	-0.558682,	0.00554007,
 	1.00000,	-0.862911,	-0.921333,	-0.947474,	-1.09793,	1.07242,	0.277004,
 	1.00000,	-0.862911,	-0.797102,	-0.635714,	-0.968427,	-0.268707,	0.277004,
 	1.00000,	-0.862911,	-1.10290,	-1.20727,	-1.35694,	1.10867,	0.277004,
 	1.00000,	-0.862911,	-0.691984,	-0.220035,	-0.797719,	-0.0149795,	0.277004,
 	1.00000,	-0.862911,	-1.04556,	-0.895514,	-1.21566,	0.456229,	0.277004,
 	1.00000,	1.48205,	1.05680,	1.05298,	1.06241,	-1.10238,	0.277004,
 	1.00000,	1.48205,	0.626773,	0.143685,	1.27433,	1.25366,	0.277004,
 	1.00000,	1.48205,	1.18103,	1.05298,	1.36851,	-0.667422,	0.277004,
 	1.00000,	1.48205,	1.02813,	0.663285,	1.55099,	-0.232460,	0.277004,
 	1.00000,	0.309571,	0.531211,	0.143685,	0.638585,	0.311242,	0.277004,
 	1.00000,	0.309571,	0.349643,	0.0137853,	0.526742,	0.492476,	0.277004,
 	1.00000,	0.309571,	0.292305,	-0.116115,	0.768088,	0.782450,	0.277004,
 	1.00000,	0.309571,	0.531211,	-0.168075,	0.644472,	1.25366,	0.277004,
 	1.00000,	1.48205,	1.96464,	1.96228,	1.46269,	-1.60984,	0.277004,
 	1.00000,	1.48205,	1.48683,	1.70248,	1.39794,	-1.50110,	0.277004,
 	1.00000,	1.48205,	1.96464,	2.22208,	1.58631,	-1.21112,	0.277004,
 	1.00000,	1.48205,	1.49639,	1.15690,	1.59808,	-0.377448,	0.277004,
 	1.00000,	-0.862911,	-0.930889,	-0.687674,	-1.22155,	-0.377448,	0.277004,
 	1.00000,	-0.862911,	-0.414854,	-0.427875,	-0.279707,	0.166254,	0.277004,
 	1.00000,	-0.862911,	-0.930889,	-0.765614,	-0.838924,	0.963684,	0.277004,
 	1.00000,	-0.862911,	-0.519972,	-0.401895,	-0.262048,	0.0937609,	0.277004,
 	1.00000,	-0.862911,	-0.921333,	-1.07737,	-1.09087,	0.528722,	0.277004,
 	1.00000,	-0.862911,	-0.921333,	-0.557775,	-1.06261,	0.130008,	0.277004,
 	1.00000,	-0.862911,	-0.930889,	-0.973454,	-1.16857,	0.311242,	0.277004,
 	1.00000,	-0.862911,	-0.930889,	-0.687674,	-0.927221,	-0.522435,	0.277004,
 	1.00000,	0.309571,	-0.462635,	-0.194055,	-0.191410,	-0.377448,	0.277004,
 	1.00000,	-0.862911,	-0.701540,	0.143685,	-0.444529,	-0.993643,	0.277004,
 	1.00000,	-1.44915,	-1.09334,	0.143685,	-0.303253,	-0.739916,	0.277004,
 	1.00000,	-0.862911,	-0.997783,	-1.46707,	-1.16857,	2.15983,	0.548467,
 	1.00000,	-0.862911,	-0.921333,	-0.999434,	-1.38637,	-0.413694,	0.548467,
 	1.00000,	-0.862911,	-1.11246,	-1.36315,	-1.16857,	1.39865,	0.548467,
 	1.00000,	-0.862911,	-1.04556,	-0.895514,	-1.06850,	1.10867,	0.548467,
 	1.00000,	-0.862911,	-0.988227,	-1.15531,	-1.38637,	0.311242,	0.548467,
 	1.00000,	1.48205,	0.626773,	0.143685,	0.456104,	-0.0149795,	0.548467,
 	1.00000,	1.48205,	1.18103,	0.923085,	0.891704,	-0.848656,	0.548467,
 	1.00000,	1.48205,	1.02813,	0.897105,	0.697450,	-0.993643,	0.548467,
 	1.00000,	0.309571,	0.349643,	0.0137853,	0.656245,	1.32615,	0.548467,
 	1.00000,	0.309571,	0.0534002,	-0.246015,	0.208871,	0.963684,	0.548467,
 	1.00000,	0.309571,	0.0534002,	-0.505815,	-0.0148153,	0.0937609,	0.548467,
 	1.00000,	-0.862911,	-0.519972,	-0.427875,	-0.303253,	-0.0512263,	0.548467,
 	1.00000,	0.309571,	0.292305,	-0.116115,	0.532628,	0.601216,	0.548467,
 	1.00000,	0.309571,	0.359199,	-0.375915,	0.273623,	0.601216,	0.548467,
 	1.00000,	0.309571,	0.349643,	0.0137853,	0.473763,	0.0937609,	0.548467,
 	1.00000,	0.309571,	0.0534002,	-0.505815,	0.108801,	0.419982,	0.548467,
 	1.00000,	0.309571,	0.292305,	0.143685,	0.756315,	1.14492,	0.548467,
 	1.00000,	0.309571,	0.607660,	0.403485,	0.509082,	-0.159967,	0.548467,
 	1.00000,	1.48205,	1.05680,	1.05298,	0.526742,	-0.848656,	0.548467,
 	1.00000,	0.309571,	0.349643,	1.57258,	0.550288,	-0.776162,	0.548467,
 	1.00000,	1.48205,	1.02813,	0.897105,	0.267736,	-1.57359,	0.548467,
 	1.00000,	1.48205,	1.18103,	0.923085,	1.29787,	-0.667422,	0.548467,
 	1.00000,	-0.862911,	-0.921333,	-0.947474,	-0.968427,	0.347488,	0.548467,
 	1.00000,	-0.862911,	-0.577310,	-0.246015,	-0.491621,	-0.486188,	0.548467,
 	1.00000,	-0.862911,	-0.720653,	-0.194055,	-0.797719,	-0.304954,	0.548467,
 	1.00000,	-0.862911,	-0.854440,	-0.765614,	-0.880129,	-0.377448,	0.548467,
 	1.00000,	-0.862911,	-0.577310,	-0.246015,	-0.544599,	-0.268707,	0.548467,
 	1.00000,	-0.862911,	-0.367073,	0.0137853,	-0.273821,	0.419982,	0.548467,
 	1.00000,	-0.862911,	-0.414854,	-0.505815,	-0.144318,	0.746203,	0.548467,
 	1.00000,	-0.862911,	-0.720653,	-0.194055,	-0.674102,	-0.232460,	0.548467,
 	1.00000,	-0.276670,	-0.605978,	-0.0381747,	-0.173751,	0.130008,	0.548467,
 	1.00000,	0.309571,	-0.300180,	0.533385,	0.191212,	-0.703669,	0.548467,
 	1.00000,	-0.862911,	-0.701540,	0.273585,	-0.214956,	0.0575141,	0.548467,
 	1.00000,	0.309571,	-0.300180,	0.741225,	0.509082,	0.0937609,	0.548467,
 	1.00000,	-0.862911,	-1.00734,	-0.869534,	-1.16268,	-0.232460,	0.548467,
 	1.00000,	-0.862911,	-0.921333,	-0.947474,	-0.991973,	0.383735,	0.548467,
 	1.00000,	0.309571,	0.349643,	0.273585,	0.314828,	-0.0512263,	0.819931,
 	1.00000,	0.309571,	0.0534002,	-0.505815,	0.0146171,	0.963684,	0.819931,
 	1.00000,	-0.862911,	-0.519972,	-0.427875,	-0.103113,	0.637463,	0.819931,
 	1.00000,	0.309571,	0.359199,	-0.375915,	0.338374,	0.963684,	0.819931,
 	1.00000,	0.309571,	0.292305,	0.143685,	0.450217,	0.383735,	0.819931,
 	1.00000,	1.48205,	1.05680,	0.663285,	1.01532,	-0.0512263,	0.819931,
 	1.00000,	1.48205,	1.02813,	0.637305,	0.879931,	-0.776162,	0.819931,
 	1.00000,	1.48205,	1.49639,	0.871125,	1.15071,	-0.848656,	0.819931,
 	1.00000,	1.48205,	1.18103,	0.793185,	1.00355,	-0.123720,	0.819931,
 	1.00000,	1.48205,	1.48683,	1.31278,	1.62752,	-0.232460,	0.819931,
 	1.00000,	1.48205,	1.49639,	0.975045,	1.26726,	-0.449941,	0.819931,
 	1.00000,	1.48205,	0.693666,	0.533385,	0.738655,	-0.196214,	0.819931,
 	1.00000,	1.48205,	1.58239,	1.18288,	1.13305,	-0.921150,	0.819931,
 	1.00000,	-0.862911,	-1.00734,	-0.869534,	-1.23921,	-0.558682,	0.819931,
 	1.00000,	-0.862911,	-1.03601,	-1.02541,	-1.18034,	-0.123720,	0.819931,
 	1.00000,	-0.862911,	-0.921333,	-0.635714,	-1.25098,	-0.413694,	0.819931,
 	1.00000,	-0.862911,	-0.701540,	-0.635714,	-0.362118,	-0.196214,	0.819931,
 	1.00000,	-0.276670,	-0.109055,	-0.713654,	0.650358,	1.65237,	0.819931,
 	1.00000,	1.48205,	1.48683,	0.533385,	1.08596,	0.673710,	0.819931,
 	1.00000,	-0.862911,	-0.510416,	-0.869534,	0.250077,	3.35597,	0.819931,
 	1.00000,	1.48205,	0.626773,	-0.375915,	0.520855,	2.41356,	0.819931,
 	1.00000,	-0.862911,	-0.854440,	-0.895514,	-0.915448,	-0.848656,	0.819931,
 	1.00000,	-0.862911,	-0.854440,	-0.895514,	-0.974313,	-0.232460,	0.819931,
 	1.00000,	-0.862911,	-1.04556,	-1.02541,	-1.12736,	1.32615,	0.819931,
 	1.00000,	-0.862911,	-0.988227,	-0.921494,	-0.997859,	-0.304954,	0.819931,
 	1.00000,	-0.862911,	-0.414854,	-0.375915,	-0.362118,	0.166254,	0.819931,
 	1.00000,	0.309571,	-0.204617,	0.273585,	-0.450416,	-1.53735,	0.819931,
 	1.00000,	0.309571,	-0.204617,	0.273585,	-0.326799,	-0.957396,	0.819931,
 	1.00000,	-0.862911,	-0.414854,	-0.375915,	-0.496330,	-0.848656,	0.819931,
 	1.00000,	-0.862911,	-0.921333,	-0.739634,	-0.981377,	-0.304954,	1.09139,
 	1.00000,	-0.862911,	-1.00734,	-1.15531,	-1.18858,	1.18116,	1.09139,
 	1.00000,	-0.862911,	-0.921333,	-0.895514,	-1.00963,	-0.0149795,	1.09139,
 	1.00000,	-0.862911,	-1.03601,	-1.02541,	-1.12854,	0.311242,	1.09139,
 	1.00000,	-0.862911,	-0.414854,	-0.375915,	-0.352700,	0.347488,	1.09139,
 	1.00000,	-0.862911,	-0.519972,	-0.427875,	-0.126659,	0.927437,	1.09139,
 	1.00000,	-0.862911,	-0.414854,	-0.375915,	0.0299220,	1.65237,	1.09139,
 	1.00000,	0.309571,	0.292305,	-0.375915,	0.474941,	1.14492,	1.09139,
 	1.00000,	-0.862911,	-0.930889,	-0.687674,	-0.929576,	0.0937609,	1.09139,
 	1.00000,	-0.862911,	-0.577310,	-0.375915,	-0.313849,	-0.0149795,	1.09139,
 	1.00000,	-0.862911,	-0.711097,	-0.765614,	-0.512812,	0.709956,	1.09139,
 	1.00000,	-0.862911,	-0.720653,	-0.323955,	-0.639961,	-0.196214,	1.09139,
 	1.00000,	-0.862911,	-0.825771,	-0.765614,	-0.838924,	-0.123720,	1.09139,
 	1.00000,	-0.862911,	-1.03601,	-1.02541,	-1.02141,	0.854944,	1.09139,
 	1.00000,	-0.862911,	-0.367073,	0.0137853,	-0.209070,	-0.413694,	1.09139,
 	1.00000,	-0.862911,	-1.04556,	-1.02541,	-1.02141,	1.32615,	1.09139,
 	1.00000,	-0.862911,	-0.997783,	-1.46707,	-1.05084,	2.23232,	1.09139,
 	1.00000,	-0.862911,	-0.997783,	-1.46707,	-0.756513,	2.95726,	1.09139,
 	1.00000,	-0.276670,	-0.701540,	-0.973454,	-0.0324748,	1.57988,	1.09139,
 	1.00000,	-0.862911,	-0.462635,	-0.973454,	0.320715,	2.26857,	1.09139,
 	1.00000,	-0.862911,	-0.988227,	-0.973454,	-1.32750,	-0.631175,	1.09139,
 	1.00000,	-0.862911,	-0.930889,	-0.973454,	-0.980200,	0.891190,	1.09139,
 	1.00000,	-0.862911,	-1.00734,	-1.10335,	-1.33339,	-0.0874731,	1.09139,
 	1.00000,	0.309571,	-0.252399,	0.715245,	-0.0795667,	-1.50110,	1.09139,
 	1.00000,	-1.44915,	-1.18891,	-0.116115,	-0.656443,	-1.10238,	1.09139,
 	1.00000,	-0.862911,	-0.691984,	-0.427875,	-0.562259,	-0.159967,	1.09139,
 	1.00000,	-0.862911,	-0.835327,	-0.843554,	-0.809492,	0.528722,	1.09139,
 	1.00000,	-0.862911,	-0.567753,	-0.531795,	-0.574032,	0.0575141,	1.36286,
 	1.00000,	-0.862911,	-0.414854,	-0.531795,	-0.403324,	0.311242,	1.36286,
 	1.00000,	-0.862911,	-0.367073,	-0.323955,	-0.420983,	-0.413694,	1.36286,
 	1.00000,	0.309571,	-0.204617,	0.143685,	-0.297367,	-1.06614,	1.36286,
 	1.00000,	-0.862911,	-0.567753,	-0.531795,	-0.697648,	-0.957396,	1.36286,
 	1.00000,	-0.862911,	-1.10290,	-1.20727,	-1.43935,	0.492476,	1.36286,
 	1.00000,	-0.862911,	-1.03601,	-1.05139,	-1.29807,	0.311242,	1.36286,
 	1.00000,	-0.862911,	-1.08379,	-1.15531,	-1.43346,	0.202501,	1.36286,
 	1.00000,	-0.862911,	-0.930889,	-0.973454,	-1.07438,	0.818697,	1.36286,
 	1.00000,	-0.862911,	-1.04556,	-1.02541,	-1.18034,	1.39865,	1.36286,
 	1.00000,	-0.862911,	-1.00734,	-1.10335,	-1.09204,	0.637463,	1.36286,
 	1.00000,	-0.862911,	-0.988227,	-0.947474,	-1.16857,	0.166254,	1.36286,
 	1.00000,	-0.862911,	-0.854440,	-1.07737,	-0.897789,	-0.232460,	1.36286,
 	1.00000,	-0.862911,	-0.921333,	-1.02541,	-1.09793,	0.238748,	1.36286,
 	1.00000,	-0.862911,	-0.921333,	-1.02541,	-0.703535,	1.86985,	1.36286,
 	1.00000,	-0.862911,	-0.854440,	-0.791594,	-0.927221,	-0.486188,	1.36286,
 	1.00000,	-0.862911,	-0.835327,	-0.765614,	-0.903675,	-0.413694,	1.36286,
 	1.00000,	-0.862911,	-0.825771,	-0.765614,	-0.738854,	0.456229,	1.36286,
 	1.00000,	-0.862911,	-0.720653,	-0.116115,	-0.426870,	-0.268707,	1.36286,
 	1.00000,	-0.862911,	-0.711097,	-0.791594,	-0.403324,	0.999931,	1.36286,
 	1.00000,	-0.862911,	-0.510416,	-0.635714,	0.297169,	1.76111,	1.36286,
 	1.00000,	0.309571,	-0.472191,	-0.739634,	0.214758,	1.47114,	1.36286,
 	1.00000,	0.309571,	-0.252399,	0.299565,	-0.0913397,	-1.06614,	1.36286,
 	1.00000,	0.309571,	-0.462635,	0.403485,	-0.0560208,	-0.631175,	1.36286,
 	1.00000,	0.309571,	0.349643,	0.143685,	0.514969,	0.0937609,	1.36286,
 	1.00000,	1.48205,	1.48683,	0.0137853,	0.879931,	1.25366,	1.36286,
 	1.00000,	0.309571,	0.0534002,	-0.427875,	0.0970280,	0.564969,	1.36286,
 	1.00000,	0.309571,	0.292305,	-0.505815,	0.573834,	0.383735,	1.36286,
 	1.00000,	-0.862911,	-0.787546,	-0.427875,	-0.438643,	1.47114,	1.63432,
 	1.00000,	-0.862911,	-0.787546,	-0.427875,	-0.397437,	1.10867,	1.63432,
 	1.00000,	-0.862911,	-0.787546,	-0.427875,	-0.685875,	0.891190,	1.63432,
 	1.00000,	-0.862911,	-0.787546,	-0.505815,	-0.473962,	0.238748,	1.63432,
 	1.00000,	-0.862911,	-0.567753,	-0.531795,	-0.532826,	0.166254,	1.63432,
 	1.00000,	-0.862911,	-0.414854,	-0.375915,	-0.285594,	0.891190,	1.63432,
 	1.00000,	-0.862911,	-0.519972,	-0.323955,	-0.132545,	0.311242,	1.63432,
 	1.00000,	-0.862911,	-0.854440,	-0.791594,	-1.17445,	-0.0874731,	1.63432,
 	1.00000,	-0.862911,	-0.988227,	-0.947474,	-1.12148,	0.963684,	1.63432,
 	1.00000,	-0.862911,	-0.988227,	-0.947474,	-1.18623,	0.746203,	1.63432,
 	1.00000,	-0.862911,	-0.854440,	-1.07737,	-1.00375,	-0.304954,	1.63432,
 	1.00000,	-0.862911,	-0.921333,	-0.895514,	-1.00375,	0.637463,	1.63432,
 	1.00000,	-0.862911,	-0.711097,	-0.427875,	-0.962540,	-0.377448,	1.63432,
 	1.00000,	-0.862911,	-0.835327,	-0.765614,	-0.909562,	-0.377448,	1.63432,
 	1.00000,	-0.862911,	-0.825771,	-0.895514,	-0.862470,	0.492476,	1.63432,
 	1.00000,	-0.862911,	-0.988227,	-0.973454,	-1.19211,	-0.196214,	1.63432,
 	1.00000,	-0.862911,	-0.988227,	-0.973454,	-1.19211,	0.0575141,	1.63432,
 	1.00000,	-0.862911,	-0.988227,	-0.973454,	-1.15679,	0.238748,	1.63432,
 	1.00000,	0.309571,	-0.128168,	0.143685,	-0.0383613,	0.311242,	1.63432,
 	1.00000,	0.309571,	0.645885,	-0.505815,	0.0440496,	0.528722,	1.63432,
 	1.00000,	-0.862911,	-0.367073,	-0.323955,	-0.462189,	-0.377448,	1.63432,
 	1.00000,	0.309571,	0.359199,	0.195645,	-0.167864,	-0.304954,	1.63432,
 	1.00000,	-0.862911,	-0.481748,	-0.220035,	-0.368005,	-0.594928,	1.63432,
 	1.00000,	-0.862911,	-0.567753,	-0.531795,	-0.715308,	-0.921150,	1.63432,
 	1.00000,	-0.862911,	-0.414854,	-0.375915,	-0.0324748,	0.637463,	1.63432,
 	1.00000,	-0.862911,	-0.519972,	-0.479835,	-0.220842,	0.0212673,	1.63432,
 	1.00000,	-0.862911,	-0.930889,	-1.36315,	-0.997859,	3.28348,	1.63432,
 	1.00000,	-0.862911,	-0.567753,	-0.531795,	-0.803605,	-1.42860,	1.63432,
 	1.00000,	-0.862911,	-0.711097,	-0.661694,	-0.415097,	1.10867,	1.63432,
 	1.00000,	-0.862911,	-0.720653,	-0.583754,	-0.303253,	1.39865,	1.63432) 
 scaled y = 
MatrixD(18.0000,
 	15.0000,
 	18.0000,
 	16.0000,
 	17.0000,
 	15.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	15.0000,
 	15.0000,
 	14.0000,
 	15.0000,
 	14.0000,
 	24.0000,
 	22.0000,
 	18.0000,
 	21.0000,
 	27.0000,
 	26.0000,
 	25.0000,
 	24.0000,
 	25.0000,
 	26.0000,
 	21.0000,
 	10.0000,
 	10.0000,
 	11.0000,
 	9.00000,
 	27.0000,
 	28.0000,
 	25.0000,
 	19.0000,
 	16.0000,
 	17.0000,
 	19.0000,
 	18.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	12.0000,
 	13.0000,
 	13.0000,
 	18.0000,
 	22.0000,
 	19.0000,
 	18.0000,
 	23.0000,
 	28.0000,
 	30.0000,
 	30.0000,
 	31.0000,
 	35.0000,
 	27.0000,
 	26.0000,
 	24.0000,
 	25.0000,
 	23.0000,
 	20.0000,
 	21.0000,
 	13.0000,
 	14.0000,
 	15.0000,
 	14.0000,
 	17.0000,
 	11.0000,
 	13.0000,
 	12.0000,
 	13.0000,
 	19.0000,
 	15.0000,
 	13.0000,
 	13.0000,
 	14.0000,
 	18.0000,
 	22.0000,
 	21.0000,
 	26.0000,
 	22.0000,
 	28.0000,
 	23.0000,
 	28.0000,
 	27.0000,
 	13.0000,
 	14.0000,
 	13.0000,
 	14.0000,
 	15.0000,
 	12.0000,
 	13.0000,
 	13.0000,
 	14.0000,
 	13.0000,
 	12.0000,
 	13.0000,
 	18.0000,
 	16.0000,
 	18.0000,
 	18.0000,
 	23.0000,
 	26.0000,
 	11.0000,
 	12.0000,
 	13.0000,
 	12.0000,
 	18.0000,
 	20.0000,
 	21.0000,
 	22.0000,
 	18.0000,
 	19.0000,
 	21.0000,
 	26.0000,
 	15.0000,
 	16.0000,
 	29.0000,
 	24.0000,
 	20.0000,
 	19.0000,
 	15.0000,
 	24.0000,
 	20.0000,
 	11.0000,
 	20.0000,
 	19.0000,
 	15.0000,
 	31.0000,
 	26.0000,
 	32.0000,
 	25.0000,
 	16.0000,
 	16.0000,
 	18.0000,
 	16.0000,
 	13.0000,
 	14.0000,
 	14.0000,
 	14.0000,
 	29.0000,
 	26.0000,
 	26.0000,
 	31.0000,
 	32.0000,
 	28.0000,
 	24.0000,
 	26.0000,
 	24.0000,
 	26.0000,
 	31.0000,
 	19.0000,
 	18.0000,
 	15.0000,
 	15.0000,
 	16.0000,
 	15.0000,
 	16.0000,
 	14.0000,
 	17.0000,
 	16.0000,
 	15.0000,
 	18.0000,
 	21.0000,
 	20.0000,
 	13.0000,
 	29.0000,
 	23.0000,
 	20.0000,
 	23.0000,
 	24.0000,
 	25.0000,
 	24.0000,
 	18.0000,
 	29.0000,
 	19.0000,
 	23.0000,
 	23.0000,
 	22.0000,
 	25.0000,
 	33.0000,
 	28.0000,
 	25.0000,
 	25.0000,
 	26.0000,
 	27.0000,
 	17.5000,
 	16.0000,
 	15.5000,
 	14.5000,
 	22.0000,
 	22.0000,
 	24.0000,
 	22.5000,
 	29.0000,
 	24.5000,
 	29.0000,
 	33.0000,
 	20.0000,
 	18.0000,
 	18.5000,
 	17.5000,
 	29.5000,
 	32.0000,
 	28.0000,
 	26.5000,
 	20.0000,
 	13.0000,
 	19.0000,
 	19.0000,
 	16.5000,
 	16.5000,
 	13.0000,
 	13.0000,
 	13.0000,
 	31.5000,
 	30.0000,
 	36.0000,
 	25.5000,
 	33.5000,
 	17.5000,
 	17.0000,
 	15.5000,
 	15.0000,
 	17.5000,
 	20.5000,
 	19.0000,
 	18.5000,
 	16.0000,
 	15.5000,
 	15.5000,
 	16.0000,
 	29.0000,
 	24.5000,
 	26.0000,
 	25.5000,
 	30.5000,
 	33.5000,
 	30.0000,
 	30.5000,
 	22.0000,
 	21.5000,
 	21.5000,
 	43.1000,
 	36.1000,
 	32.8000,
 	39.4000,
 	36.1000,
 	19.9000,
 	19.4000,
 	20.2000,
 	19.2000,
 	20.5000,
 	20.2000,
 	25.1000,
 	20.5000,
 	19.4000,
 	20.6000,
 	20.8000,
 	18.6000,
 	18.1000,
 	19.2000,
 	17.7000,
 	18.1000,
 	17.5000,
 	30.0000,
 	27.5000,
 	27.2000,
 	30.9000,
 	21.1000,
 	23.2000,
 	23.8000,
 	23.9000,
 	20.3000,
 	17.0000,
 	21.6000,
 	16.2000,
 	31.5000,
 	29.5000,
 	21.5000,
 	19.8000,
 	22.3000,
 	20.2000,
 	20.6000,
 	17.0000,
 	17.6000,
 	16.5000,
 	18.2000,
 	16.9000,
 	15.5000,
 	19.2000,
 	18.5000,
 	31.9000,
 	34.1000,
 	35.7000,
 	27.4000,
 	25.4000,
 	23.0000,
 	27.2000,
 	23.9000,
 	34.2000,
 	34.5000,
 	31.8000,
 	37.3000,
 	28.4000,
 	28.8000,
 	26.8000,
 	33.5000,
 	41.5000,
 	38.1000,
 	32.1000,
 	37.2000,
 	28.0000,
 	26.4000,
 	24.3000,
 	19.1000,
 	34.3000,
 	29.8000,
 	31.3000,
 	37.0000,
 	32.2000,
 	46.6000,
 	27.9000,
 	40.8000,
 	44.3000,
 	43.4000,
 	36.4000,
 	30.0000,
 	44.6000,
 	33.8000,
 	29.8000,
 	32.7000,
 	23.7000,
 	35.0000,
 	32.4000,
 	27.2000,
 	26.6000,
 	25.8000,
 	23.5000,
 	30.0000,
 	39.1000,
 	39.0000,
 	35.1000,
 	32.3000,
 	37.0000,
 	37.7000,
 	34.1000,
 	34.7000,
 	34.4000,
 	29.9000,
 	33.0000,
 	33.7000,
 	32.4000,
 	32.9000,
 	31.6000,
 	28.1000,
 	30.7000,
 	25.4000,
 	24.2000,
 	22.4000,
 	26.6000,
 	20.2000,
 	17.6000,
 	28.0000,
 	27.0000,
 	34.0000,
 	31.0000,
 	29.0000,
 	27.0000,
 	24.0000,
 	36.0000,
 	37.0000,
 	31.0000,
 	38.0000,
 	36.0000,
 	36.0000,
 	36.0000,
 	34.0000,
 	38.0000,
 	32.0000,
 	38.0000,
 	25.0000,
 	38.0000,
 	26.0000,
 	22.0000,
 	32.0000,
 	36.0000,
 	27.0000,
 	27.0000,
 	44.0000,
 	32.0000,
 	28.0000,
 	31.0000)
auto_optimize: etaI = (2.5E-4,0.004)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 2.5E-4, result = (4450.325809915026,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 4.84375E-4, result = (4437.232007205236,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 7.1875E-4, result = (4440.923918652383,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 9.53125E-4, result = (4442.748126123199,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0011875, result = (4443.180339173002,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.001421875, result = (4453.663522445885,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.00165625, result = (4431.846036626761,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.001890625, result = (4444.205811049722,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.002125, result = (4451.979989583514,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0023593750000000004, result = (4444.636704717827,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0025937499999999997, result = (4427.172825571121,216)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.002828125, result = (4427.172825571121,-3)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0030625, result = (4454.211538571144,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0032968750000000003, result = (4438.834140444718,400)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.0035312499999999997, result = (4427.172825571121,214)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.003765625, result = (4427.172825571121,-3)
optimize3: bSize = 20, nB = 19
auto_optimize: eta = 0.004, result = (4498.375208549015,400)
ending epoch = (4427.172825571121,216)

REPORT
    ----------------------------------------------------------------------------
    modelName  mn  = NeuralNet_3L_reLU
    ----------------------------------------------------------------------------
    hparameter hp  = HyperParameter (HashMap(lambda -> (0.01,0.01), maxEpochs -> (400,400), eta -> (0.1,0.1), nu -> (0.9,0.9), upLimit -> (4,4), beta -> (0.9,0.9), bSize -> (20,20)))
    ----------------------------------------------------------------------------
    features   fn  = Array(intercept, cylinders, displacement, horsepower, weight, acceleration, modelyear)
    ----------------------------------------------------------------------------
    parameter  bb  = Array(b.w = 
MatrixD(0.880702,	0.713786,	0.192541,	0.760403,	0.470425,	0.183528,	0.669868,	1.09139,	1.17537,	1.04644,	0.508908,	0.150907,	0.317071,	0.718322,	0.899180,
 	0.102752,	0.200784,	0.0815134,	0.0124412,	0.0417358,	0.170157,	0.0361360,	-0.140395,	-0.199648,	-0.223302,	0.0919164,	0.210576,	-0.0280143,	-0.133876,	0.148677,
 	0.0269481,	0.247970,	0.250902,	-0.0453212,	0.197135,	0.0132566,	-0.00415355,	0.194351,	-0.103214,	0.170191,	-0.0590276,	0.125222,	0.144604,	0.0476638,	-0.0548313,
 	-0.000469953,	-0.148973,	0.160739,	-0.0115591,	-0.0170420,	0.0340613,	0.00860529,	0.0658587,	-0.0625372,	-0.0841174,	0.149279,	0.262612,	0.0825133,	0.166175,	-0.153805,
 	-0.239714,	-0.285485,	-0.00406465,	-0.239055,	-0.273401,	-0.123427,	-0.344459,	-0.449170,	-0.748563,	-0.799603,	-0.343241,	0.0350369,	-0.0608226,	-0.274366,	-0.432088,
 	0.0822806,	-0.00854704,	0.209035,	0.154239,	0.201997,	0.332785,	0.198237,	-0.0764836,	0.0657294,	-0.221446,	0.0151720,	0.314331,	0.142945,	-0.142408,	-0.0840178,
 	0.389830,	0.267021,	0.204655,	0.0965178,	0.254980,	0.0434429,	0.244479,	0.0982418,	0.231405,	0.205185,	0.133283,	0.110218,	0.270561,	0.249384,	0.176991) 
 b.b = VectorD(0.776199,	0.626442,	0.175902,	0.668441,	0.417063,	0.164940,	0.591906,	0.953062,	1.03472,	0.920247,	0.445859,	0.139279,	0.283109,	0.630017,	0.788618), b.w = 
MatrixD(1.03851,
 	0.892001,
 	0.191664,
 	0.906458,
 	0.607573,
 	0.402860,
 	0.925531,
 	1.37982,
 	2.20388,
 	1.64285,
 	0.672817,
 	0.357792,
 	0.353243,
 	0.911411,
 	1.19702) 
 b.b = VectorD(2.02794))
    ----------------------------------------------------------------------------
    fitMap     qof = 
		rSq 	 -> VectorD(0.811143) 
		rSqBar 	 -> VectorD(0.807710) 
		sst 	 -> VectorD(23819.0) 
		sse 	 -> VectorD(4498.38) 
		mse0 	 -> VectorD(11.4754) 
		rmse 	 -> VectorD(3.38754) 
		mae 	 -> VectorD(2.58599) 
		dfm 	 -> VectorD(7.00000) 
		df 	 -> VectorD(385.000) 
		fStat 	 -> VectorD(236.226) 
		aic 	 -> VectorD(-1018.51) 
		bic 	 -> VectorD(-986.741) 
		mape 	 -> VectorD(11.7599) 
		smape 	 -> VectorD(11.7917) 

    ----------------------------------------------------------------------------
        
Run + title
--------------------
| Cross-Validation |
--------------------
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3619.311835324386,287)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.925520,
 	0.787007,
 	0.139923,
 	0.805890,
 	0.544181,
 	0.717400,
 	0.891528,
 	1.21076,
 	2.78869,
 	1.52615,
 	0.586533,
 	0.701713,
 	0.321888,
 	0.802876,
 	1.05282) 
 b.b = VectorD(2.30452)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.829701,
 	0.826604,
 	4731.23,
 	805.726,
 	10.3298,
 	3.21400,
 	2.35305,
 	7.00000,
 	385.000,
 	267.961,
 	-185.922,
 	-167.069,
 	10.5257,
 	10.7911)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3567.5776047794607,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.925520,
 	0.787007,
 	0.139923,
 	0.805890,
 	0.544181,
 	0.717400,
 	0.891528,
 	1.21076,
 	2.78869,
 	1.52615,
 	0.586533,
 	0.701713,
 	0.321888,
 	0.802876,
 	1.05282) 
 b.b = VectorD(2.30452)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.816243,
 	0.812901,
 	4472.51,
 	821.858,
 	10.5366,
 	3.24602,
 	2.65825,
 	7.00000,
 	385.000,
 	244.308,
 	-186.631,
 	-167.777,
 	12.4769,
 	11.8687)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3447.2334032674257,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.925520,
 	0.787007,
 	0.139923,
 	0.805890,
 	0.544181,
 	0.717400,
 	0.891528,
 	1.21076,
 	2.78869,
 	1.52615,
 	0.586533,
 	0.701713,
 	0.321888,
 	0.802876,
 	1.05282) 
 b.b = VectorD(2.30452)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.793404,
 	0.789648,
 	4664.26,
 	963.617,
 	12.3541,
 	3.51483,
 	2.61689,
 	7.00000,
 	385.000,
 	211.220,
 	-192.856,
 	-174.003,
 	12.3391,
 	12.4740)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3639.6048792323004,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.925520,
 	0.787007,
 	0.139923,
 	0.805890,
 	0.544181,
 	0.717400,
 	0.891528,
 	1.21076,
 	2.78869,
 	1.52615,
 	0.586533,
 	0.701713,
 	0.321888,
 	0.802876,
 	1.05282) 
 b.b = VectorD(2.30452)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.813641,
 	0.810252,
 	3962.82,
 	738.508,
 	9.46806,
 	3.07702,
 	2.48743,
 	7.00000,
 	385.000,
 	240.129,
 	-182.970,
 	-164.117,
 	11.9243,
 	11.6502)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3290.9288960727654,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.925520,
 	0.787007,
 	0.139923,
 	0.805890,
 	0.544181,
 	0.717400,
 	0.891528,
 	1.21076,
 	2.78869,
 	1.52615,
 	0.586533,
 	0.701713,
 	0.321888,
 	0.802876,
 	1.05282) 
 b.b = VectorD(2.30452)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.799195,
 	0.795544,
 	5671.58,
 	1138.88,
 	14.6011,
 	3.82113,
 	2.78169,
 	7.00000,
 	385.000,
 	218.897,
 	-200.553,
 	-181.700,
 	11.3823,
 	11.9735)
-----------------------------------------------
| showQofStatTable: Statistical Table for QoF |
-----------------------------------------------
|        name |   num |        min |        max |       mean |      stdev |   interval |
----------------------------------------------------------------------------------------
|         rSq |     5 |      0.793 |      0.830 |      0.810 |      0.014 |      0.018 |
|      rSqBar |     5 |      0.790 |      0.827 |      0.807 |      0.015 |      0.018 |
|         sst |     5 |   3962.818 |   5671.580 |   4700.481 |    620.767 |    770.935 |
|         sse |     5 |    738.508 |   1138.883 |    893.718 |    159.678 |    198.305 |
|        mse0 |     5 |      9.468 |     14.601 |     11.458 |      2.047 |      2.542 |
|        rmse |     5 |      3.077 |      3.821 |      3.375 |      0.296 |      0.367 |
|         mae |     5 |      2.353 |      2.782 |      2.579 |      0.164 |      0.204 |
|         dfm |     5 |      7.000 |      7.000 |      7.000 |      0.000 |      0.000 |
|          df |     5 |    385.000 |    385.000 |    385.000 |      0.000 |      0.000 |
|       fStat |     5 |    211.220 |    267.961 |    236.503 |     22.432 |     27.859 |
|         aic |     5 |   -200.553 |   -182.970 |   -189.787 |      7.012 |      8.709 |
|         bic |     5 |   -181.700 |   -164.117 |   -170.933 |      7.012 |      8.709 |
|        mape |     5 |     10.526 |     12.477 |     11.730 |      0.797 |      0.989 |
|       smape |     5 |     10.791 |     12.474 |     11.751 |      0.616 |      0.765 |
----------------------------------------------------------------------------------------
----------------------------------------
| Feature Selection Technique: Forward |
----------------------------------------
-------------------------------------------------------------------------------------
| forwardSelAll: (l = 0) INITIAL variable (0, intercept) => cols = LinkedHashSet(0) |
-------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (9416.808445168721,400)
optimize3: bSize = 20, nB = 19
ending epoch = (8362.166347188435,353)
optimize3: bSize = 20, nB = 19
ending epoch = (9043.832770286475,400)
optimize3: bSize = 20, nB = 19
ending epoch = (7311.284821508487,400)
optimize3: bSize = 20, nB = 19
ending epoch = (19565.76633241945,400)
optimize3: bSize = 20, nB = 19
ending epoch = (15785.540835137308,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (6038.954066600967,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(2.98676,
 	1.99787,
 	0.239328,
 	1.84352,
 	0.897466) 
 b.b = VectorD(1.56621)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.730933,
 	0.729554,
 	4731.23,
 	1273.02,
 	16.3207,
 	4.03989,
 	2.98212,
 	2.00000,
 	390.000,
 	529.728,
 	-213.915,
 	-206.845,
 	12.7859,
 	13.0383)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (6002.424613073918,105)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(2.98751,
 	2.00067,
 	0.246874,
 	1.84974,
 	0.903882) 
 b.b = VectorD(1.56312)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.706279,
 	0.704772,
 	4472.51,
 	1313.67,
 	16.8420,
 	4.10390,
 	3.26961,
 	2.00000,
 	390.000,
 	468.894,
 	-215.005,
 	-207.934,
 	14.8770,
 	14.1297)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (5546.288365436182,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.03382,
 	2.00235,
 	0.241825,
 	1.84956,
 	0.902112) 
 b.b = VectorD(1.56439)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.618879,
 	0.616925,
 	4664.26,
 	1777.65,
 	22.7903,
 	4.77392,
 	3.63444,
 	2.00000,
 	390.000,
 	316.649,
 	-227.443,
 	-220.373,
 	16.3467,
 	15.5065)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (5998.8691030884065,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.06509,
 	2.00307,
 	0.246135,
 	1.85317,
 	0.906576) 
 b.b = VectorD(1.55536)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.666726,
 	0.665016,
 	3962.82,
 	1320.71,
 	16.9321,
 	4.11487,
 	3.29200,
 	2.00000,
 	390.000,
 	390.103,
 	-215.193,
 	-208.123,
 	15.2998,
 	14.6167)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (5545.411124119258,131)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(3.01953,
 	2.01075,
 	0.243034,
 	1.85704,
 	0.905504) 
 b.b = VectorD(1.55994)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.714936,
 	0.713474,
 	5671.58,
 	1616.77,
 	20.7278,
 	4.55278,
 	3.28057,
 	2.00000,
 	390.000,
 	489.056,
 	-223.130,
 	-216.060,
 	13.2358,
 	13.6105)
------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 1) ADD variable (4, weight) => cols = LinkedHashSet(0, 4) @ 0.6914740079479603 |
------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (7202.502682538772,289)
optimize3: bSize = 20, nB = 19
ending epoch = (7155.59906424616,400)
optimize3: bSize = 20, nB = 19
ending epoch = (6957.869714758284,400)
optimize3: bSize = 20, nB = 19
ending epoch = (7141.718324957577,400)
optimize3: bSize = 20, nB = 19
ending epoch = (4549.571346341437,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3717.249481358591,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(2.07212,
 	1.74981,
 	0.583659,
 	1.96819,
 	1.62035,
 	0.422646,
 	1.56342) 
 b.b = VectorD(1.57664)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.824147,
 	0.822790,
 	4731.23,
 	832.004,
 	10.6667,
 	3.26599,
 	2.45031,
 	3.00000,
 	389.000,
 	607.690,
 	-195.128,
 	-185.701,
 	11.2797,
 	11.5564)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3715.1707307700417,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(2.05680,
 	1.73664,
 	0.600605,
 	1.95330,
 	1.73109,
 	0.418792,
 	1.55145) 
 b.b = VectorD(1.58450)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.812738,
 	0.811294,
 	4472.51,
 	837.531,
 	10.7376,
 	3.27682,
 	2.67779,
 	3.00000,
 	389.000,
 	562.769,
 	-195.366,
 	-185.940,
 	12.8024,
 	11.9775)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3575.1087270914754,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(2.04944,
 	1.72952,
 	0.611338,
 	1.94971,
 	1.86793,
 	0.417227,
 	1.54639) 
 b.b = VectorD(1.57584)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.791563,
 	0.789955,
 	4664.26,
 	972.206,
 	12.4642,
 	3.53046,
 	2.63217,
 	3.00000,
 	389.000,
 	492.423,
 	-201.172,
 	-191.745,
 	12.6466,
 	12.7047)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3573.5870992036935,85)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(2.04559,
 	1.72609,
 	0.608699,
 	1.94696,
 	1.86160,
 	0.416319,
 	1.54368) 
 b.b = VectorD(1.57610)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.800137,
 	0.798595,
 	3962.82,
 	792.023,
 	10.1541,
 	3.18656,
 	2.59114,
 	3.00000,
 	389.000,
 	519.109,
 	-193.405,
 	-183.978,
 	12.6304,
 	12.2270)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3402.0643406439094,360)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(2.02672,
 	1.71102,
 	0.648581,
 	1.92604,
 	1.91086,
 	0.413791,
 	1.52908) 
 b.b = VectorD(1.57324)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.795936,
 	0.794362,
 	5671.58,
 	1157.37,
 	14.8380,
 	3.85201,
 	2.77566,
 	3.00000,
 	389.000,
 	505.755,
 	-209.154,
 	-199.728,
 	11.4808,
 	12.1892)
------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 2) ADD variable (6, modelyear) => cols = LinkedHashSet(0, 4, 6) @ 0.8075209172581354 |
------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (4541.830237695393,400)
optimize3: bSize = 20, nB = 19
ending epoch = (4520.0370840252335,246)
optimize3: bSize = 20, nB = 19
ending epoch = (4507.5615386987665,400)
optimize3: bSize = 20, nB = 19
ending epoch = (4289.905195434969,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3460.0758620986226,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.34435,
 	1.24659,
 	3.00964,
 	1.50884,
 	0.739479,
 	0.179035,
 	0.834642,
 	1.87215,
 	2.02564) 
 b.b = VectorD(1.39693)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.836800,
 	0.835117,
 	4731.23,
 	772.139,
 	9.89922,
 	3.14630,
 	2.29623,
 	4.00000,
 	388.000,
 	497.361,
 	-190.272,
 	-178.489,
 	10.4034,
 	10.6018)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3362.1526761968166,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.32781,
 	1.22903,
 	3.81005,
 	1.48901,
 	0.740548,
 	0.157855,
 	0.827557,
 	1.85040,
 	1.99489) 
 b.b = VectorD(1.39404)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.803207,
 	0.801178,
 	4472.51,
 	880.160,
 	11.2841,
 	3.35918,
 	2.76959,
 	4.00000,
 	388.000,
 	395.903,
 	-195.208,
 	-183.425,
 	12.9894,
 	12.1476)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3316.672841426512,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.31758,
 	1.22172,
 	4.39700,
 	1.47957,
 	0.732939,
 	0.170378,
 	0.820660,
 	1.83353,
 	1.98423) 
 b.b = VectorD(1.38699)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.813772,
 	0.811852,
 	4664.26,
 	868.615,
 	11.1361,
 	3.33708,
 	2.46472,
 	4.00000,
 	388.000,
 	423.868,
 	-194.681,
 	-182.897,
 	11.5524,
 	11.3790)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3456.5889177346417,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.29952,
 	1.20464,
 	4.94858,
 	1.45819,
 	0.725564,
 	0.132874,
 	0.809529,
 	1.80717,
 	1.95601) 
 b.b = VectorD(1.39059)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.813935,
 	0.812016,
 	3962.82,
 	737.343,
 	9.45312,
 	3.07459,
 	2.47995,
 	4.00000,
 	388.000,
 	424.322,
 	-188.682,
 	-176.899,
 	11.8906,
 	11.4330)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3125.768065927492,92)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.29376,
 	1.20006,
 	4.95500,
 	1.45281,
 	0.720821,
 	0.129518,
 	0.804808,
 	1.79849,
 	1.94933) 
 b.b = VectorD(1.38661)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.813809,
 	0.811890,
 	5671.58,
 	1056.00,
 	13.5384,
 	3.67946,
 	2.67694,
 	4.00000,
 	388.000,
 	423.971,
 	-203.243,
 	-191.459,
 	11.0361,
 	11.5526)
------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 3) ADD variable (5, acceleration) => cols = LinkedHashSet(0, 4, 6, 5) @ 0.8180388676892554 |
------------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (4552.548133656158,400)
optimize3: bSize = 20, nB = 19
ending epoch = (4545.008329564703,400)
optimize3: bSize = 20, nB = 19
ending epoch = (4545.210016337628,169)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3720.1006442045987,378)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.70198,
 	1.13099,
 	0.131700,
 	1.06838,
 	0.663902,
 	0.275347,
 	1.00452,
 	1.95427,
 	1.63388,
 	1.61892,
 	0.836346) 
 b.b = VectorD(1.41552)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.824554,
 	0.822288,
 	4731.23,
 	830.075,
 	10.6420,
 	3.26221,
 	2.45259,
 	5.00000,
 	387.000,
 	363.762,
 	-191.044,
 	-176.904,
 	11.3766,
 	11.6933)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3665.311470464856,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.74516,
 	1.13360,
 	0.135303,
 	1.06734,
 	0.686110,
 	0.335936,
 	1.00812,
 	1.94118,
 	1.63076,
 	1.61559,
 	0.836343) 
 b.b = VectorD(1.41928)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.794206,
 	0.791547,
 	4472.51,
 	920.419,
 	11.8002,
 	3.43515,
 	2.84008,
 	5.00000,
 	387.000,
 	298.703,
 	-194.940,
 	-180.800,
 	13.5672,
 	12.6948)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3562.051752469898,396)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.82925,
 	1.13205,
 	0.126823,
 	1.06023,
 	0.678664,
 	0.380201,
 	1.00201,
 	1.94138,
 	1.63150,
 	1.61095,
 	0.831066) 
 b.b = VectorD(1.40907)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.787823,
 	0.785082,
 	4664.26,
 	989.648,
 	12.6878,
 	3.56199,
 	2.69704,
 	5.00000,
 	387.000,
 	287.390,
 	-197.926,
 	-183.785,
 	13.0541,
 	13.1225)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3562.051752469898,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.82925,
 	1.13205,
 	0.126823,
 	1.06023,
 	0.678664,
 	0.380201,
 	1.00201,
 	1.94138,
 	1.63150,
 	1.61095,
 	0.831066) 
 b.b = VectorD(1.41060)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.804653,
 	0.802129,
 	3962.82,
 	774.125,
 	9.92468,
 	3.15035,
 	2.56659,
 	5.00000,
 	387.000,
 	318.818,
 	-188.631,
 	-174.491,
 	12.5656,
 	12.1516)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3410.0119712562173,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.83238,
 	1.10823,
 	0.130355,
 	1.04809,
 	0.675827,
 	0.451943,
 	0.985895,
 	1.91660,
 	1.60085,
 	1.58704,
 	0.819555) 
 b.b = VectorD(1.41432)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.797823,
 	0.795211,
 	5671.58,
 	1146.66,
 	14.7008,
 	3.83417,
 	2.76783,
 	5.00000,
 	387.000,
 	305.432,
 	-204.697,
 	-190.557,
 	11.4917,
 	12.1891)
---------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 4) ADD variable (2, displacement) => cols = LinkedHashSet(0, 4, 6, 5, 2) @ 0.8067202388996368 |
---------------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (4540.288502096583,363)
optimize3: bSize = 20, nB = 19
ending epoch = (4546.339877452546,202)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3716.5715045767197,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.42093,
 	0.992227,
 	0.163405,
 	1.17364,
 	0.661992,
 	0.479942,
 	1.03789,
 	1.85910,
 	1.71542,
 	1.61920,
 	0.788829,
 	0.492587,
 	0.380746) 
 b.b = VectorD(1.52479)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.824292,
 	0.821561,
 	4731.23,
 	831.316,
 	10.6579,
 	3.26464,
 	2.47800,
 	6.00000,
 	386.000,
 	301.804,
 	-189.094,
 	-172.597,
 	11.4735,
 	11.7445)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3657.9341286364843,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.43178,
 	0.996460,
 	0.0882552,
 	1.18116,
 	0.669823,
 	0.513082,
 	1.04610,
 	1.85746,
 	1.72122,
 	1.62283,
 	0.790143,
 	0.531751,
 	0.387298) 
 b.b = VectorD(1.52266)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.792558,
 	0.789334,
 	4472.51,
 	927.787,
 	11.8947,
 	3.44887,
 	2.85457,
 	6.00000,
 	386.000,
 	245.794,
 	-193.259,
 	-176.762,
 	13.6093,
 	12.7154)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3571.282308095985,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.42280,
 	0.991893,
 	0.0391266,
 	1.17002,
 	0.664561,
 	0.525033,
 	1.04142,
 	1.85794,
 	1.71957,
 	1.62573,
 	0.792750,
 	0.566665,
 	0.381938) 
 b.b = VectorD(1.52552)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.788745,
 	0.785461,
 	4664.26,
 	985.350,
 	12.6327,
 	3.55425,
 	2.67791,
 	6.00000,
 	386.000,
 	240.195,
 	-195.744,
 	-179.247,
 	12.9093,
 	12.8528)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3752.3547680394104,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.39808,
 	0.983403,
 	-0.00189638,
 	1.16341,
 	0.644350,
 	0.546356,
 	1.01756,
 	1.85035,
 	1.69307,
 	1.60468,
 	0.784489,
 	0.630900,
 	0.388850) 
 b.b = VectorD(1.53830)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.794312,
 	0.791115,
 	3962.82,
 	815.105,
 	10.4501,
 	3.23266,
 	2.59094,
 	6.00000,
 	386.000,
 	248.438,
 	-188.394,
 	-171.897,
 	12.5859,
 	12.0326)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3391.667334752641,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(1.40189,
 	0.981079,
 	-0.0887146,
 	1.15880,
 	0.653428,
 	0.587469,
 	1.02157,
 	1.83216,
 	1.68870,
 	1.59397,
 	0.775299,
 	0.714375,
 	0.377562) 
 b.b = VectorD(1.52031)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.792172,
 	0.788941,
 	5671.58,
 	1178.71,
 	15.1117,
 	3.88738,
 	2.82470,
 	6.00000,
 	386.000,
 	245.217,
 	-204.091,
 	-187.594,
 	11.6457,
 	12.3604)
--------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 5) ADD variable (1, cylinders) => cols = LinkedHashSet(0, 4, 6, 5, 2, 1) @ 0.806420748185789 |
--------------------------------------------------------------------------------------------------------------------
optimize3: bSize = 20, nB = 19
ending epoch = (4333.645280907344,400)
DEBUG @ PredictorMV.crossValidate: fold 0: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3569.409061409928,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.985642,
 	0.899256,
 	0.343441,
 	0.893818,
 	0.549891,
 	0.121083,
 	0.711403,
 	2.04693,
 	1.33341,
 	2.87634,
 	0.598591,
 	0.0201054,
 	0.374914,
 	1.06167,
 	1.03022) 
 b.b = VectorD(1.44022)
DEBUG @ PredictorMV.crossValidate: fold 0: qof = 
MatrixD(0.834754,
 	0.831750,
 	4731.23,
 	781.815,
 	10.0233,
 	3.16596,
 	2.37333,
 	7.00000,
 	385.000,
 	277.838,
 	-184.750,
 	-165.896,
 	10.5843,
 	10.6507)
DEBUG @ PredictorMV.crossValidate: fold 1: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3530.548451654305,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.972270,
 	0.880219,
 	0.358348,
 	0.878827,
 	0.537744,
 	0.0568720,
 	0.699406,
 	2.09350,
 	1.30637,
 	3.19937,
 	0.590451,
 	-0.0733459,
 	0.370442,
 	1.05802,
 	1.01076) 
 b.b = VectorD(1.42989)
DEBUG @ PredictorMV.crossValidate: fold 1: qof = 
MatrixD(0.799270,
 	0.795621,
 	4472.51,
 	897.766,
 	11.5098,
 	3.39261,
 	2.79707,
 	7.00000,
 	385.000,
 	219.000,
 	-189.994,
 	-171.140,
 	13.3007,
 	12.4329)
DEBUG @ PredictorMV.crossValidate: fold 2: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3409.4041571247503,173)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.967659,
 	0.875327,
 	0.360164,
 	0.879446,
 	0.536234,
 	0.0519552,
 	0.698334,
 	2.10721,
 	1.31102,
 	3.24761,
 	0.586846,
 	-0.0839088,
 	0.368440,
 	1.05862,
 	1.00824) 
 b.b = VectorD(1.42224)
DEBUG @ PredictorMV.crossValidate: fold 2: qof = 
MatrixD(0.797157,
 	0.793469,
 	4664.26,
 	946.113,
 	12.1297,
 	3.48277,
 	2.62139,
 	7.00000,
 	385.000,
 	216.145,
 	-192.181,
 	-173.327,
 	12.5288,
 	12.5051)
DEBUG @ PredictorMV.crossValidate: fold 3: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3409.4041571247503,-3)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.967659,
 	0.875327,
 	0.360164,
 	0.879446,
 	0.536234,
 	0.0519552,
 	0.698334,
 	2.10721,
 	1.31102,
 	3.24761,
 	0.586846,
 	-0.0839088,
 	0.368440,
 	1.05862,
 	1.00824) 
 b.b = VectorD(1.42286)
DEBUG @ PredictorMV.crossValidate: fold 3: qof = 
MatrixD(0.813984,
 	0.810602,
 	3962.82,
 	737.147,
 	9.45060,
 	3.07418,
 	2.51222,
 	7.00000,
 	385.000,
 	240.674,
 	-182.730,
 	-163.876,
 	12.2748,
 	11.9190)
DEBUG @ PredictorMV.crossValidate: fold 4: test set size = 78
DEBUG @ PredictorMV.validate: test set size = 78
optimize3: bSize = 20, nB = 15
ending epoch = (3292.595924639385,400)
DEBUG @ PredictorMV.validate: parameters b = b.w = 
MatrixD(0.937075,
 	0.854851,
 	0.400592,
 	0.849415,
 	0.518745,
 	-0.0122104,
 	0.674199,
 	2.08961,
 	1.26378,
 	3.46246,
 	0.569115,
 	-0.177811,
 	0.353208,
 	1.02371,
 	0.982051) 
 b.b = VectorD(1.42415)
DEBUG @ PredictorMV.crossValidate: fold 4: qof = 
MatrixD(0.799801,
 	0.796161,
 	5671.58,
 	1135.45,
 	14.5570,
 	3.81536,
 	2.78173,
 	7.00000,
 	385.000,
 	219.726,
 	-200.744,
 	-181.890,
 	11.4400,
 	11.9920)
-------------------------------------------------------------------------------------------------------------------------
| forwardSelAll: (l = 6) ADD variable (3, horsepower) => cols = LinkedHashSet(0, 4, 6, 5, 2, 1, 3) @ 0.8147512472707893 |
-------------------------------------------------------------------------------------------------------------------------
k = 7, n = 7
Run + title
x-axis: minX = 0.0, maxX = 6.0
y-axis: minY = 68.0, maxY = 82.0
rSq = 
MatrixD(69.3048,	69.1474,	68.7550,
 	80.8994,	80.7521,	80.4904,
 	81.9896,	81.8039,	81.6304,
 	80.9186,	80.6720,	80.1812,
 	80.9384,	80.6421,	79.8416,
 	81.8059,	81.4751,	80.8993)
